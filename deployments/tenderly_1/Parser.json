{
  "metadata": "{\"compiler\":{\"version\":\"0.8.11\"},\"sources\":{\"contracts/dsl/Parser.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from './interfaces/IERC20.sol';\\nimport { IContext } from './interfaces/IContext.sol';\\nimport { IParser } from './interfaces/IParser.sol';\\nimport { StringUtils } from './libs/StringUtils.sol';\\nimport { ByteUtils } from './libs/ByteUtils.sol';\\nimport { Storage } from './helpers/Storage.sol';\\nimport { Preprocessor } from './Preprocessor.sol';\\n\\n// import 'hardhat/console.sol';\\n\\n/**\\n * @dev Parser of DSL code\\n *\\n * One of the core contracts of the project. It parses DSL expression\\n * that comes from user. After parsing code in Parser\\n * a bytecode of the DSL program is generated as stored in Context\\n *\\n * DSL code in postfix notation as string -> Parser -> raw bytecode\\n */\\ncontract Parser is IParser, Storage {\\n    using StringUtils for string;\\n    using ByteUtils for bytes;\\n\\n    Preprocessor public preprocessor;\\n\\n    bytes internal program; // raw bytecode of the program that preprocessor is generating\\n    string[] internal cmds; // DSL code in postfix form (input from Preprocessor)\\n    uint256 internal cmdIdx; // Current parsing index of DSL code\\n\\n    mapping(string => uint256) public labelPos;\\n    mapping(string => bool) isVariable;\\n    mapping(string => bytes) savedProgram;\\n\\n    constructor() {\\n        preprocessor = new Preprocessor(); // TODO: provide as input param\\n    }\\n\\n    /**\\n     * @dev Transform DSL code from array in infix notation to raw bytecode\\n     * @param _ctxAddr Context contract interface address\\n     * @param _codeRaw Input code as a string in infix notation\\n     */\\n    function parse(address _ctxAddr, string memory _codeRaw) external {\\n        string[] memory _code = preprocessor.transform(_ctxAddr, _codeRaw);\\n        _parseCode(_ctxAddr, _code);\\n    }\\n\\n    /**\\n     * @dev Asm functions\\n     * Concatenates the previous program bytecode with the next command\\n     * that contains in the `cmds` list. `cmdIdx` is helping to follow\\n     * what exactly the command is in the process\\n     * Example of code for :\\n     * ```\\n     * cmds = ['bool', 'true'] // current cmds\\n     * cmdIdx = 0 // current parsing index of DSL code\\n     * program = ''\\n     * ```\\n     *\\n     * So it will be executed the asmSetLocalBool() function where:\\n     * - `_parseVariable()` internal function will update the previous empty\\n     * `program` with the bytecode of `bool` opcode\\n     *\\n     * Result is `program = '0x18'` (see Context.sol for `addOpcode('bool'..)`\\n     * to check the code for `bool` opcode)\\n     * cmdIdx = 0 // current parsing index of DSL code is the same\\n     *\\n     * - `asmBool()` function will concatenate previous `program` with the bytecode of `true` value\\n     * `program` with the bytecode `0x01` (see return values for Parser.sol for `asmBool()` function\\n     *\\n     * ```\\n     * cmdIdx = 1 // parsing index of DSL code was updated\\n     * program = '0x1801'\\n     * ```\\n     */\\n\\n    /**\\n     * @dev Updates the program with the bool value\\n     *\\n     * Example of a command:\\n     * ```\\n     * bool true\\n     * ```\\n     */\\n    function asmSetLocalBool() public {\\n        _parseVariable();\\n        asmBool();\\n    }\\n\\n    /**\\n     * @dev Updates the program with the local variable value\\n     *\\n     * Example of a command:\\n     * ```\\n     * setLocalUint256 VARNAME 12345\\n     * ```\\n     */\\n    function asmSetLocalUint256() public {\\n        _parseVariable();\\n        asmUint256();\\n    }\\n\\n    /**\\n     * @dev Updates the program with the local variable value\\n     *\\n     *  * Example of a command:\\n     * ```\\n     * (uint256 5 + uint256 7) setUint256 VARNAME\\n     * ```\\n     */\\n    function asmSetUint256(IContext _ctx) public {\\n        _setVariable(_ctx, cmds[cmdIdx], 'uint256');\\n        _parseVariable();\\n    }\\n\\n    /**\\n     * @dev Updates the program with the LoadLocal variable\\n     *\\n     * Example of command:\\n     * ```\\n     * loadLocal uint256 NUMBER\\n     * ```\\n     */\\n    function asmLoadLocal(IContext _ctx) public {\\n        _parseBranchOf(_ctx, 'loadLocal'); // program += bytecode for `loadLocal uint256`\\n        _parseVariable(); // program += bytecode for `NUMBER`\\n    }\\n\\n    /**\\n     * @dev Updates the program with the LoadLocal variable\\n     *\\n     * Example of a command:\\n     * ```\\n     * loadRemote bool MARY_ADDRESS 9A676e781A523b5d0C0e43731313A708CB607508\\n     * ```\\n     */\\n    function asmLoadRemote(IContext _ctx) public {\\n        _parseBranchOf(_ctx, 'loadRemote'); // program += bytecode for `loadRemote bool`\\n        _parseVariable(); // program += bytecode for `MARY_ADDRESS`\\n        _parseAddress(); // program += bytecode for `9A676e781A523b5...`\\n    }\\n\\n    /**\\n     * @dev Concatenates and updates previous `program` with the `0x01`\\n     * bytecode of `true` value otherwise `0x00` for `false`\\n     */\\n    function asmBool() public {\\n        bytes1 value = bytes1(_nextCmd().equal('true') ? 0x01 : 0x00);\\n        program = bytes.concat(program, value);\\n    }\\n\\n    /**\\n     * @dev Concatenates and updates previous `program` with the\\n     * bytecode of uint256 value\\n     */\\n    function asmUint256() public {\\n        uint256 value = _nextCmd().toUint256();\\n        program = bytes.concat(program, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Updates previous `program` with the amount that will be send (in wei)\\n     *\\n     * Example of a command:\\n     * ```\\n     * sendEth RECEIVER 1234\\n     * ```\\n     */\\n    function asmSend() public {\\n        _parseVariable(); // program += bytecode for `sendEth RECEIVER`\\n        asmUint256(); // program += bytecode for `1234`\\n    }\\n\\n    /**\\n     * @dev Updates previous `program` with the amount of tokens\\n     * that will be transfer to reciever(in wei). The `TOKEN` and `RECEIVER`\\n     * parameters should be stored in smart contract\\n     *\\n     * Example of a command:\\n     * ```\\n     * transfer TOKEN RECEIVER 1234\\n     * ```\\n     */\\n    function asmTransfer() public {\\n        _parseVariable(); // token address\\n        _parseVariable(); // receiver address\\n        asmUint256(); // amount\\n    }\\n\\n    /**\\n     * @dev Updates previous `program` with the amount of tokens\\n     * that will be transfer to reciever(in wei). The `TOKEN`, `RECEIVER`, `AMOUNT`\\n     * parameters should be stored in smart contract\\n     *\\n     * Example of a command:\\n     * ```\\n     * transferVar TOKEN RECEIVER AMOUNT\\n     * ```\\n     */\\n    function asmTransferVar() public {\\n        _parseVariable(); // token address\\n        _parseVariable(); // receiver\\n        _parseVariable(); // amount\\n    }\\n\\n    /**\\n     * @dev Updates previous `program` with the amount of tokens\\n     * that will be transfer from the certain address to reciever(in wei).\\n     * The `TOKEN`, `FROM`, `TO` address parameters should be stored in smart contract\\n     *\\n     * Example of a command:\\n     * ```\\n     * transferFrom TOKEN FROM TO 1234\\n     * ```\\n     */\\n    function asmTransferFrom() public {\\n        _parseVariable(); // token address\\n        _parseVariable(); // from\\n        _parseVariable(); // to\\n        asmUint256(); // amount\\n    }\\n\\n    /**\\n     * @dev Updates previous `program` with the amount of tokens\\n     * that will be transfer from the certain address to reciever(in wei).\\n     * The `TOKEN`, `FROM`, `TO`, `AMOUNT` parameters should be stored in smart contract\\n     *\\n     * Example of a command:\\n     * ```\\n     * transferFromVar TOKEN FROM TO AMOUNT\\n     * ```\\n     */\\n    function asmTransferFromVar() public {\\n        _parseVariable(); // token address\\n        _parseVariable(); // from\\n        _parseVariable(); // to\\n        _parseVariable(); // amount\\n    }\\n\\n    /**\\n     * @dev Updates previous `program` with getting the amount of tokens\\n     * The `TOKEN`, `USER` address parameters should be stored in smart contract\\n     *\\n     * Example of a command:\\n     * ```\\n     * balanceOf TOKEN USER\\n     * ```\\n     */\\n    function asmBalanceOf() public {\\n        _parseVariable(); // token address\\n        _parseVariable(); // user address\\n    }\\n\\n    /**\\n     * @dev Updates previous `program` for positive and negative branch position\\n     *\\n     * Example of a command:\\n     * ```\\n     * 6 > 5 // condition is here must return true or false\\n     * ifelse AA BB\\n     * end\\n     *\\n     * branch AA {\\n     *   // code for `positive` branch\\n     * }\\n     *\\n     * branch BB {\\n     *   // code for `negative` branch\\n     * }\\n     * ```\\n     */\\n    function asmIfelse() public {\\n        string memory _true = _nextCmd(); // \\\"positive\\\" branch name\\n        string memory _false = _nextCmd(); // \\\"negative\\\" branch name\\n\\n        labelPos[_true] = program.length; // `positive` branch position\\n        program = bytes.concat(program, bytes2(0)); // placeholder for `positive` branch offset\\n\\n        labelPos[_false] = program.length; // `negative` branch position\\n        program = bytes.concat(program, bytes2(0)); // placeholder for `negative` branch offset\\n    }\\n\\n    /**\\n     * @dev Updates previous `program` for positive branch position\\n     *\\n     * Example of a command:\\n     * ```\\n     * 6 > 5 // condition is here must return true or false\\n     * if POSITIVE_ACTION\\n     * end\\n     *\\n     * POSITIVE_ACTION {\\n     *   // code for `positive` branch\\n     * }\\n     * ```\\n     */\\n    function asmIf() public {\\n        labelPos[_nextCmd()] = program.length; // `true` branch position\\n        program = bytes.concat(program, bytes2(0)); // placeholder for `true` branch offset\\n    }\\n\\n    /**\\n     * @dev Updates previous `program` for function code\\n     *\\n     * Example of a command:\\n     * ```\\n     * func NAME_OF_FUNCTION\\n     *\\n     * NAME_OF_FUNCTION {\\n     *   // code for the body of function\\n     * }\\n     * ```\\n     */\\n    function asmFunc() public {\\n        labelPos[_nextCmd()] = program.length; // `name of function` position\\n        program = bytes.concat(program, bytes2(0)); // placeholder for `name of function` offset\\n    }\\n\\n    /**\\n     * Internal functions\\n     */\\n\\n    /**\\n     * @dev returns `true` if the name of `if/ifelse branch` or `function` exists in the labelPos list\\n     * otherwise returns `false`\\n     */\\n    function _isLabel(string memory _name) internal view returns (bool) {\\n        return (labelPos[_name] > 0);\\n    }\\n\\n    /**\\n     * @dev Сonverts a list of commands to bytecode\\n     */\\n    function _parseCode(address _ctxAddr, string[] memory code) internal {\\n        delete program;\\n        cmdIdx = 0;\\n        cmds = code;\\n        IContext(_ctxAddr).setPc(0);\\n        IContext(_ctxAddr).stack().clear();\\n\\n        while (cmdIdx < cmds.length) {\\n            _parseOpcodeWithParams(_ctxAddr);\\n        }\\n\\n        // console.logBytes(program);\\n        IContext(_ctxAddr).setProgram(program);\\n    }\\n\\n    /**\\n     * @dev Updates the bytecode `program` in dependence on\\n     * commands that were provided in `cmds` list\\n     */\\n    function _parseOpcodeWithParams(address _ctxAddr) internal {\\n        string storage cmd = _nextCmd();\\n\\n        bytes1 opcode = IContext(_ctxAddr).opCodeByName(cmd);\\n        require(\\n            opcode != 0x0 || _isLabel(cmd) || isVariable[cmd],\\n            string(abi.encodePacked('Parser: \\\"', cmd, '\\\" command is unknown'))\\n        );\\n\\n        if (isVariable[cmd]) {\\n            // if the variable was saved before its loading, so the concatenation\\n            // will gather the current program and a prepared loading program for this variable\\n            program = bytes.concat(program, savedProgram[cmd]);\\n        } else if (_isLabel(cmd)) {\\n            uint256 _branchLocation = program.length;\\n            bytes memory programBefore = program.slice(0, labelPos[cmd]);\\n            bytes memory programAfter = program.slice(labelPos[cmd] + 2, program.length);\\n            program = bytes.concat(programBefore, bytes2(uint16(_branchLocation)), programAfter);\\n        } else {\\n            program = bytes.concat(program, opcode);\\n            bytes4 _selector = IContext(_ctxAddr).asmSelectors(cmd);\\n\\n            if (_selector != 0x0) {\\n                (bool success, ) = address(this).delegatecall(\\n                    abi.encodeWithSelector(_selector, IContext(_ctxAddr))\\n                );\\n                require(success, 'Parser: delegatecall to asmSelector failed');\\n            }\\n        }\\n        // if no selector then opcode without params\\n    }\\n\\n    /**\\n     * @dev Returns next commad from the cmds list, increases the\\n     * command index `cmdIdx` by 1\\n     * @return nextCmd string\\n     */\\n    function _nextCmd() internal returns (string storage) {\\n        return cmds[cmdIdx++];\\n    }\\n\\n    /**\\n     * @dev Updates previous `program` with the next provided command\\n     */\\n    function _parseVariable() internal {\\n        program = bytes.concat(program, bytes4(keccak256(abi.encodePacked(_nextCmd()))));\\n    }\\n\\n    /**\\n     * @dev Updates previous `program` with the branch name, like `loadLocal` or `loadRemote`\\n     * of command and its additional used type\\n     */\\n    function _parseBranchOf(IContext _ctx, string memory baseOpName) internal {\\n        program = bytes.concat(program, _ctx.branchCodes(baseOpName, _nextCmd()));\\n    }\\n\\n    /**\\n     * @dev Updates previous `program` with the address command that is a value\\n     */\\n    function _parseAddress() internal {\\n        program = bytes.concat(program, _nextCmd().fromHex());\\n    }\\n\\n    /**\\n     * @dev Sets additional program for saved parameter, so it can be\\n     * possible to load the variable directly.\\n     *\\n     *\\n     * For example:\\n     * The base command of loading stored NUMBER parameter can be used as\\n     * ```\\n     * (uint256 5 + uint256 7) setUint256 NUMBER\\n     * (loadLocal uint256 NUMBER + 4) setUint256 NUMBER2\\n     * ```\\n     * so, _setVariable function participates in the simplification of loading NUMBER\\n     *\\n     * ```\\n     * (uint256 5 + uint256 7) setUint256 NUMBER\\n     * (NUMBER + 4) setUint256 NUMBER2\\n     * ```\\n     */\\n    function _setVariable(\\n        IContext _ctx,\\n        string memory _name,\\n        string memory _type\\n    ) internal {\\n        isVariable[_name] = true;\\n\\n        // TODO: add the loadRemote type\\n        string memory _loadType = 'loadLocal';\\n        bytes4 name_ = bytes4(keccak256(abi.encodePacked(_name)));\\n        bytes1 type_ = _ctx.opCodeByName(_loadType);\\n        bytes1 code_ = _ctx.branchCodes(_loadType, _type);\\n\\n        // ex. savedProgram['NUMBER'] = 'loadLocal uint256 NUMBER'\\n        savedProgram[_name] = bytes.concat(type_, code_, name_);\\n    }\\n}\\n\"},\"contracts/dsl/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"contracts/dsl/helpers/Stack.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ncontract StackValue {\\n    enum StackType {\\n        // NONE in an OpSpec shows that the op pops or yields nothing\\n        NONE,\\n        // UINT256 in an OpSpec shows that the op pops or yields a uint256\\n        UINT256,\\n        STRING,\\n        ADDRESS\\n    }\\n\\n    StackType private _type;\\n\\n    uint256 private _uint256;\\n    string private _string;\\n    address private _address;\\n\\n    function getUint256() public view returns (uint256) {\\n        require(_type == StackType.UINT256, 'Stack: uint256 type mismatch');\\n        return _uint256;\\n    }\\n\\n    function setUint256(uint256 value) public {\\n        _uint256 = value;\\n        _type = StackType.UINT256;\\n    }\\n\\n    function getString() public view returns (string memory) {\\n        require(_type == StackType.STRING, 'Stack: string type mismatch');\\n        return _string;\\n    }\\n\\n    function setString(string memory value) public {\\n        _string = value;\\n        _type = StackType.STRING;\\n    }\\n\\n    function getAddress() public view returns (address) {\\n        require(_type == StackType.ADDRESS, 'Stack: address type mismatch');\\n        return _address;\\n    }\\n\\n    function setAddress(address _addr) public {\\n        _address = _addr;\\n        _type = StackType.ADDRESS;\\n    }\\n\\n    function getType() public view returns (StackType) {\\n        return _type;\\n    }\\n}\\n\\ncontract Stack {\\n    StackValue[] public stack;\\n\\n    function length() external view returns (uint256) {\\n        return _length();\\n    }\\n\\n    function seeLast() external view returns (StackValue) {\\n        return _seeLast();\\n    }\\n\\n    function push(StackValue data) external {\\n        stack.push(data);\\n    }\\n\\n    function pop() external returns (StackValue) {\\n        StackValue data = _seeLast();\\n        stack.pop();\\n\\n        return data;\\n    }\\n\\n    function clear() external {\\n        delete stack;\\n    }\\n\\n    function _length() internal view returns (uint256) {\\n        return stack.length;\\n    }\\n\\n    function _seeLast() internal view returns (StackValue) {\\n        require(_length() > 0, 'Stack: stack is empty');\\n        return stack[_length() - 1];\\n    }\\n}\\n\"},\"contracts/dsl/interfaces/IContext.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport '../helpers/Stack.sol';\\n\\ninterface IContext {\\n    enum OpcodeLibNames {\\n        ComparisonOpcodes,\\n        BranchingOpcodes,\\n        LogicalOpcodes,\\n        OtherOpcodes\\n    }\\n\\n    // Variables\\n    function stack() external view returns (Stack);\\n\\n    function program() external view returns (bytes memory);\\n\\n    function pc() external view returns (uint256);\\n\\n    function nextpc() external view returns (uint256);\\n\\n    function appAddress() external view returns (address);\\n\\n    function msgSender() external view returns (address);\\n\\n    function comparisonOpcodes() external view returns (address);\\n\\n    function branchingOpcodes() external view returns (address);\\n\\n    function logicalOpcodes() external view returns (address);\\n\\n    function otherOpcodes() external view returns (address);\\n\\n    function msgValue() external view returns (uint256);\\n\\n    function opCodeByName(string memory _name) external view returns (bytes1 _opcode);\\n\\n    function selectorByOpcode(bytes1 _opcode) external view returns (bytes4 _selecotor);\\n\\n    function opcodeLibNameByOpcode(bytes1 _opcode) external view returns (OpcodeLibNames _name);\\n\\n    function asmSelectors(string memory _name) external view returns (bytes4 _selecotor);\\n\\n    function opsPriors(string memory _name) external view returns (uint256 _priority);\\n\\n    function operators(uint256 _index) external view returns (string memory _operator);\\n\\n    function branchSelectors(string memory _baseOpName, bytes1 _branchCode)\\n        external\\n        view\\n        returns (bytes4 _selector);\\n\\n    function branchCodes(string memory _baseOpName, string memory _branchName)\\n        external\\n        view\\n        returns (bytes1 _branchCode);\\n\\n    function aliases(string memory _alias) external view returns (string memory _baseCmd);\\n\\n    // Functions\\n\\n    function initOpcodes() external;\\n\\n    function operatorsLen() external view returns (uint256);\\n\\n    function setComparisonOpcodesAddr(address _opcodes) external;\\n\\n    function setBranchingOpcodesAddr(address _opcodes) external;\\n\\n    function setLogicalOpcodesAddr(address _opcodes) external;\\n\\n    function setOtherOpcodesAddr(address _opcodes) external;\\n\\n    // TODO: can we remove these comments?\\n\\n    // function addOpcode(\\n    //     string memory _name,\\n    //     bytes1 _opcode,\\n    //     bytes4 _opSelector,\\n    //     bytes4 _asmSelector,\\n    //     OpcodeLibNames _libName\\n    // ) external;\\n\\n    // function _addOpcodeForOperator(\\n    //     string memory _name,\\n    //     bytes1 _opcode,\\n    //     bytes4 _opSelector,\\n    //     bytes4 _asmSelector,\\n    //     OpcodeLibNames _libName,\\n    //     uint256 _priority\\n    // ) external;\\n\\n    // function _addOpcodeBranch(\\n    //     string memory _baseOpName,\\n    //     string memory _branchName,\\n    //     bytes1 _branchCode,\\n    //     bytes4 _selector\\n    // ) external;\\n\\n    function setProgram(bytes memory _data) external;\\n\\n    function programAt(uint256 _index, uint256 _step) external view returns (bytes memory);\\n\\n    function programSlice(\\n        bytes calldata _payload,\\n        uint256 _index,\\n        uint256 _step\\n    ) external view returns (bytes memory);\\n\\n    function setPc(uint256 _pc) external;\\n\\n    function setNextPc(uint256 _nextpc) external;\\n\\n    function incPc(uint256 _val) external;\\n\\n    function setAppAddress(address _addr) external;\\n\\n    function setMsgSender(address _msgSender) external;\\n\\n    function setMsgValue(uint256 _msgValue) external;\\n}\\n\"},\"contracts/dsl/libs/StringUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n// import 'hardhat/console.sol';\\n\\nlibrary StringUtils {\\n    function char(string memory s, uint256 index) public pure returns (string memory) {\\n        require(index < length(s), 'String: index out of range');\\n        bytes memory sBytes = new bytes(1);\\n        sBytes[0] = bytes(s)[index];\\n        return string(sBytes);\\n    }\\n\\n    function equal(string memory s1, string memory s2) internal pure returns (bool) {\\n        return keccak256(abi.encodePacked(s1)) == keccak256(abi.encodePacked(s2));\\n    }\\n\\n    function length(string memory s) internal pure returns (uint256) {\\n        return bytes(s).length;\\n    }\\n\\n    function concat(string memory s1, string memory s2) internal pure returns (string memory) {\\n        // TODO: check collisions in the hash value\\n        // https://docs.soliditylang.org/en/v0.8.13/abi-spec.html#non-standard-packed-mode\\n        return string(abi.encodePacked(s1, s2));\\n    }\\n\\n    // Convert an hexadecimal string (without \\\"0x\\\" prefix) to raw bytes\\n    // TODO: check if the string is empty\\n    function fromHex(string memory s) public pure returns (bytes memory) {\\n        bytes memory ss = bytes(s);\\n        require(ss.length % 2 == 0, 'String: hex lenght not even'); // length must be even\\n        bytes memory r = new bytes(ss.length / 2);\\n        for (uint256 i = 0; i < ss.length / 2; ++i) {\\n            r[i] = bytes1(fromHexChar(ss[2 * i]) * 16 + fromHexChar(ss[2 * i + 1]));\\n        }\\n        return r;\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return '0';\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    // string decimal number to uint256\\n    function toUint256(string memory s) public pure returns (uint256 value) {\\n        bytes memory b = bytes(s);\\n        uint256 tmp;\\n        for (uint256 i = 0; i < b.length; i++) {\\n            tmp = uint8(b[i]);\\n            require(tmp >= 0x30 && tmp <= 0x39, 'String: non-decimal character');\\n            value = value * 10 + (tmp - 0x30); // 0x30 ascii is '0'\\n        }\\n    }\\n\\n    // string decimal number with e symbol (1e18) to uint256 (in wei)\\n    function getWei(string memory _s) public pure returns (string memory result) {\\n        bool isFound; // was `e` symbol found\\n        uint256 tmp;\\n        bytes memory b = bytes(_s);\\n        string memory base;\\n        string memory decimals;\\n\\n        for (uint256 i = 0; i < b.length; i++) {\\n            tmp = uint8(b[i]);\\n            if (tmp >= 0x30 && tmp <= 0x39) {\\n                if (!isFound) {\\n                    base = concat(base, string(abi.encodePacked(b[i])));\\n                } else {\\n                    decimals = concat(decimals, string(abi.encodePacked(b[i])));\\n                }\\n            } else if (tmp == 0x65 && !isFound) {\\n                require(!equal(base, ''), 'StringUtils: base was not provided');\\n                isFound = true;\\n            } else if (tmp != 0x65 || isFound) {\\n                // use only one `e` sympol between values without spaces; example: 1e18 or 456e10\\n                revert('StringUtils: invalid format');\\n            }\\n        }\\n\\n        require(!equal(decimals, ''), 'StringUtils: decimals were not provided');\\n        result = toString(toUint256(base) * (10**toUint256(decimals)));\\n    }\\n\\n    /**\\n     * @dev If the string starts with a number, so we assume that it's a number.\\n     * @param _value is a current chunk\\n     * @return isNumber that is true if the string starts with a number, otherwise is false\\n     */\\n    function mayBeNumber(string memory _value) public pure returns (bool isNumber) {\\n        bytes1 _firstByte = bytes(_value)[0];\\n        if (uint8(_firstByte) >= 48 && uint8(_firstByte) <= 57) {\\n            isNumber = true;\\n        }\\n    }\\n\\n    // Convert an hexadecimal character to their value\\n    function fromHexChar(bytes1 c) public pure returns (uint8 result) {\\n        if (c >= bytes1('0') && c <= bytes1('9')) {\\n            result = uint8(c) - uint8(bytes1('0'));\\n        }\\n        if (c >= bytes1('a') && c <= bytes1('f')) {\\n            result = 10 + uint8(c) - uint8(bytes1('a'));\\n        }\\n        if (c >= bytes1('A') && c <= bytes1('F')) {\\n            result = 10 + uint8(c) - uint8(bytes1('A'));\\n        }\\n        // TODO: check that returns 0\\n    }\\n}\\n\"},\"contracts/dsl/Preprocessor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport { IContext } from './interfaces/IContext.sol';\\nimport { Stack, StackValue } from './helpers/Stack.sol';\\nimport { StringUtils } from './libs/StringUtils.sol';\\n\\n// import 'hardhat/console.sol';\\n\\n/**\\n * @dev Preprocessor of DSL code\\n *\\n * One of the core contracts of the project. It can remove comments that were\\n * created by user in the DSL code string. It transforms the users DSL code string\\n * to the list of commands that can be used in a Parser contract.\\n *\\n * DSL code in postfix notation as\\n * user's string code -> Preprocessor -> each command is separated in the commands list\\n */\\ncontract Preprocessor {\\n    using StringUtils for string;\\n    // uses for storing data for DSL functions\\n    struct FuncParameter {\\n        // the type of variable that provides for the function\\n        string _type;\\n        // the name of variable that will be generated in denedce on the function name\\n        string nameOfVariable;\\n        // the value for provided variable\\n        string value;\\n    }\\n    mapping(uint256 => FuncParameter) parameters;\\n    string[] internal result; // stores the list of commands after infixToPostfix transformation\\n\\n    /**\\n     * @dev The main function that transforms the user's DSL code string to the list of commands.\\n     *\\n     * Example:\\n     * The user's DSL code string is\\n     * ```\\n     * uint256 6 setUint256 A\\n     * ```\\n     * The end result after executing a `transform()` function is\\n     * ```\\n     * ['uint256', '6', 'setUint256', 'A']\\n     * ```\\n     *\\n     * @param _ctxAddr is a context contract address\\n     * @param _program is a user's DSL code string\\n     * @return the list of commands that storing `result`\\n     */\\n    function transform(address _ctxAddr, string memory _program)\\n        external\\n        returns (string[] memory)\\n    {\\n        Stack stack = new Stack();\\n        string[] memory code = split(_program);\\n        return infixToPostfix(_ctxAddr, code, stack);\\n    }\\n\\n    /**\\n     * @dev Searches the comments in the program and removes comment lines\\n     * Example:\\n     * The user's DSL code string is\\n     * ```\\n     *  bool true\\n     *  // uint256 2 * uint256 5\\n     * ```\\n     * The end result after executing a `cleanString()` function is\\n     * ```\\n     * bool true\\n     * ```\\n     * @param _program is a current program string\\n     * @return _cleanedProgram new string program that contains only clean code without comments\\n     */\\n    function cleanString(string memory _program)\\n        public\\n        pure\\n        returns (string memory _cleanedProgram)\\n    {\\n        bool isCommented;\\n\\n        // searchedSymbolLen is a flag that uses for searching a correct end symbol\\n        uint256 searchedSymbolLen; // 1 - search \\\\n symbol, 2 - search */ symbol\\n        uint256 tempIndex; // uses for checking if the index was changed\\n        uint256 i;\\n        string memory char;\\n\\n        while (i < _program.length()) {\\n            char = _program.char(i);\\n            tempIndex = i;\\n            if (isCommented) {\\n                (tempIndex, isCommented) = _getEndCommentSymbol(\\n                    searchedSymbolLen,\\n                    i,\\n                    _program,\\n                    char\\n                );\\n            } else {\\n                (searchedSymbolLen, tempIndex, isCommented) = _getCommentSymbol(i, _program, char);\\n            }\\n\\n            if (tempIndex > i) {\\n                i = tempIndex;\\n                continue;\\n            }\\n\\n            if (isCommented) {\\n                i += 1;\\n                continue;\\n            }\\n\\n            _cleanedProgram = _cleanedProgram.concat(char);\\n            i += 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Splits the user's DSL code string to the list of commands\\n     * avoiding several symbols:\\n     * - removes additional and useless symbols as ' ', `\\\\\\\\n`\\n     * - defines and adding help 'end' symbol for the ifelse condition\\n     * - defines and cleans the code from `{` and `}` symbols\\n     *\\n     * Example:\\n     * The user's DSL code string is\\n     * ```\\n     * (loadLocal uint256 TIMESTAMP >    loadLocal uint256 INIT)\\n     * ```\\n     * The end result after executing a `split()` function is\\n     * ```\\n     * ['loadLocal', 'uint256', 'TIMESTAMP', '>', 'loadLocal', 'uint256', 'INIT']\\n     * ```\\n     *\\n     * @param _program is a user's DSL code string\\n     * @return the list of commands that storing in `result`\\n     */\\n    function split(string memory _program) public returns (string[] memory) {\\n        delete result;\\n        string memory buffer;\\n\\n        for (uint256 i = 0; i < _program.length(); i++) {\\n            string memory char = _program.char(i);\\n\\n            // if-else conditions parsing\\n            if (char.equal('{')) continue;\\n            if (char.equal('}')) {\\n                result.push('end');\\n                continue;\\n            }\\n\\n            if (char.equal(' ') || char.equal('\\\\n') || char.equal('(') || char.equal(')')) {\\n                if (buffer.length() > 0) {\\n                    result.push(buffer);\\n                    buffer = '';\\n                }\\n            } else {\\n                buffer = buffer.concat(char);\\n            }\\n\\n            if (char.equal('(') || char.equal(')')) {\\n                result.push(char);\\n            }\\n        }\\n\\n        if (buffer.length() > 0) {\\n            result.push(buffer);\\n            buffer = '';\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Rebuild and transforms the user's DSL commands (can be prepared by\\n     * the `split()` function) to the list of commands.\\n     *\\n     * Example:\\n     * The user's DSL command contains\\n     * ```\\n     * ['1', '+', '2']\\n     * ```\\n     * The result after executing a `infixToPostfix()` function is\\n     * ```\\n     * ['uint256', '1', 'uint256', '2', '+']\\n     * ```\\n     *\\n     * @param _ctxAddr is a context contract address\\n     * @param _code is a DSL command list\\n     * @return _stack uses for getting and storing temporary data to\\n     * rebuild the list of commands\\n     */\\n    function infixToPostfix(\\n        address _ctxAddr,\\n        string[] memory _code,\\n        Stack _stack\\n    ) public returns (string[] memory) {\\n        delete result;\\n        bool isFunc;\\n        bool isName;\\n        bool loadRemoteFlag;\\n        bool directUseUint256;\\n        uint256 loadRemoteVarCount = 3;\\n        string memory chunk;\\n        string memory name;\\n\\n        for (uint256 i = 0; i < _code.length; i++) {\\n            chunk = _code[i];\\n\\n            // returns true if the chunk can use uint256 directly\\n            directUseUint256 = _isDirectUseUint256(directUseUint256, chunk);\\n            // checks and updates if the chunk can use uint256 or it's loadRemote opcode\\n            (loadRemoteFlag, loadRemoteVarCount) = _updateRemoteParams(\\n                loadRemoteFlag,\\n                loadRemoteVarCount,\\n                chunk\\n            );\\n\\n            // Replace alises with base commands\\n            if (_isAlias(_ctxAddr, chunk)) {\\n                chunk = IContext(_ctxAddr).aliases(chunk);\\n            }\\n\\n            if (_isOperator(_ctxAddr, chunk)) {\\n                while (\\n                    _stack.length() > 0 &&\\n                    IContext(_ctxAddr).opsPriors(chunk) <=\\n                    IContext(_ctxAddr).opsPriors(_stack.seeLast().getString())\\n                ) {\\n                    result.push(_stack.pop().getString());\\n                }\\n                _pushStringToStack(_stack, chunk);\\n            } else if (chunk.equal('(')) {\\n                _pushStringToStack(_stack, chunk);\\n            } else if (chunk.equal(')')) {\\n                while (!_stack.seeLast().getString().equal('(')) {\\n                    result.push(_stack.pop().getString());\\n                }\\n                _stack.pop(); // remove '(' that is left\\n            } else if (chunk.mayBeNumber() && !isFunc && !directUseUint256) {\\n                _updateUINT256param(loadRemoteFlag);\\n                result.push(_parseNumber(chunk, loadRemoteFlag));\\n            } else if (chunk.mayBeNumber() && !isFunc && directUseUint256) {\\n                directUseUint256 = false;\\n                result.push(chunk);\\n            } else if (chunk.equal('func')) {\\n                // if the chunk is 'func' then `Functions block` will occur\\n                isFunc = true;\\n            } else if (isFunc && !isName) {\\n                // `Functions block` started\\n                // if was not set the name for a function\\n                (isFunc, isName, name) = _parceFuncMainData(chunk, name, isFunc, isName);\\n            } else if (isFunc && isName) {\\n                // `Functions block` finished\\n                // if it was already set the name for a function\\n                isName = false;\\n                isFunc = _parceFuncParams(chunk, name, isFunc);\\n            } else {\\n                result.push(chunk);\\n            }\\n        }\\n\\n        while (_stack.length() > 0) {\\n            result.push(_stack.pop().getString());\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev As the string of values can be simple and complex for DSL this function returns a number in\\n     * Wei regardless of what type of number parameter was provided by the user.\\n     * For example:\\n     * `uint256 1000000` - simple\\n     * `uint256 1e6 - complex`\\n     * @param _chunk provided number by the user\\n     * @param _loadRemoteFlag is used to check if it was started the set of parameters for 'loadRemote' opcode\\n     * @return updatedChunk amount in Wei of provided _chunk value\\n     */\\n    function _parseNumber(string memory _chunk, bool _loadRemoteFlag)\\n        internal\\n        view\\n        returns (string memory updatedChunk)\\n    {\\n        if (_loadRemoteFlag) return _chunk;\\n\\n        try _chunk.toUint256() {\\n            updatedChunk = _chunk;\\n        } catch {\\n            updatedChunk = _chunk.getWei();\\n        }\\n    }\\n\\n    /**\\n     * @dev Pushes additional 'uint256' string to results in case, if there are no\\n     * types provided for uint256 values or\\n     * loadRemote command, is not in the processing or\\n     * the last chunk that was added to results is not 'uint256'\\n     * @param _loadRemoteFlag is used to check if it was started the set of parameters for 'loadRemote' opcode\\n     */\\n    function _updateUINT256param(bool _loadRemoteFlag) internal {\\n        if (\\n            result.length == 0 ||\\n            (!(result[result.length - 1].equal('uint256')) && _loadRemoteFlag == false)\\n        ) {\\n            result.push('uint256');\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks parameters and updates DSL code depending on what\\n     * kind of function was provided.\\n     * This internal function expects 'func' that can be with and without parameters.\\n     * @param _chunk is a current chunk from the DSL string code\\n     * @param _currentName is a current name of function\\n     * @param _isFunc describes if the func opcode was occured\\n     */\\n    function _parceFuncParams(\\n        string memory _chunk,\\n        string memory _currentName,\\n        bool _isFunc\\n    ) internal returns (bool) {\\n        if (_chunk.equal('endf')) {\\n            // if the function without parameters\\n            _pushFuncName(_currentName);\\n            return false;\\n        } else {\\n            // if the function with parameters\\n            _rebuildParameters(_chunk.toUint256(), _currentName);\\n            return _isFunc;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns updated parameters for the `func` opcode processing\\n     * Pushes the command that saves parameter in the smart contract instead\\n     * of the parameters that were provided for parsing.\\n     * The function will store the command like `uint256 7 setUint256 NUMBER_VAR` and\\n     * remove the parameter like `uint256 7`.\\n     * The DSL command will be stored before the function body.\\n     * For the moment it works only with uint256 type.\\n     * @param _chunk is a current chunk from the DSL string code\\n     * @param _currentName is a current name of function\\n     * @param _isFunc describes if the func opcode was occured\\n     * @param _isName describes if the name for the function was already set\\n     * @return isFunc the new state of _isFunc for function processing\\n     * @return isName the new state of _isName for function processing\\n     * @return name the new name of the function\\n     */\\n    function _parceFuncMainData(\\n        string memory _chunk,\\n        string memory _currentName,\\n        bool _isFunc,\\n        bool _isName\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool,\\n            bool,\\n            string memory\\n        )\\n    {\\n        if (_chunk.equal('endf')) {\\n            // finish `Functions block` process\\n            // example: `func NAME <number_of_params> endf`\\n            // updates only for: isFunc => false - end of func opcode\\n            return (false, _isName, _currentName);\\n        } else {\\n            // updates only for:\\n            // isName => true - setting the name of function has occurred\\n            // name => current cunk\\n            return (_isFunc, true, _chunk);\\n        }\\n    }\\n\\n    /**\\n     * @dev Rebuilds parameters to DSL commands in result's list.\\n     * Pushes the command that saves parameter in the smart contract instead\\n     * of the parameters that were provided for parsing.\\n     * The function will store the command like `uint256 7 setUint256 NUMBER_VAR` and\\n     * remove the parameter like `uint256 7`.\\n     * The DSL command will be stored before the function body.\\n     * For the moment it works only with uint256 type.\\n     * @param _paramsCount is an amount of parameters that provided after\\n     * the name of function\\n     * @param _nameOfFunc is a name of function that is used to generate\\n     * the name of variables\\n     */\\n    function _rebuildParameters(uint256 _paramsCount, string memory _nameOfFunc) internal {\\n        /* \\n        `chunks` list needs to store parameters temporarly and rewrite dsl string code\\n\\n        `_paramsCount * 2` includes type and value for the parameter\\n\\n        `indexFirst` is an index where the first parameter was pushed to results\\n\\n        For example:\\n        if the function has 6 input parameters then the indexFirst will be set in\\n        the index that shows, where it was the first parameter was stored before\\n        the 'func', was occurred.\\n        */\\n\\n        uint256 _totalParams = _paramsCount * 2;\\n        require(_paramsCount > 0, 'Preprocessor: amount of parameters can not be 0');\\n        string[] memory chunks = new string[](_totalParams);\\n\\n        require(result.length >= _totalParams, 'Preprocessor: invalid parameters for the function');\\n        uint256 indexFirst = result.length - _totalParams;\\n\\n        // store paramerets that were already pushed to results\\n        for (uint256 j = 0; j < _totalParams; j++) {\\n            chunks[j] = result[indexFirst + j];\\n        }\\n\\n        _cleanCode(_totalParams);\\n\\n        for (uint256 j = 0; j < chunks.length; j += 2) {\\n            _saveParameter(j, chunks[j], chunks[j + 1], _nameOfFunc);\\n        }\\n\\n        _pushParameters(_paramsCount);\\n        _pushFuncName(_nameOfFunc);\\n    }\\n\\n    /**\\n     * @dev Pushes parameters to result's list depend on their type for each value\\n     * @param _count is an amount of parameters provided next to the name of func\\n     */\\n    function _pushParameters(uint256 _count) internal {\\n        for (uint256 j = 0; j < _count; j++) {\\n            FuncParameter memory fp = parameters[j + 1];\\n            _rebuildParameter(fp._type, fp.value, fp.nameOfVariable);\\n            // clear mapping data to prevent collisions with values\\n            parameters[j + 1] = FuncParameter('', '0', '');\\n        }\\n    }\\n\\n    /**\\n     * @dev Saves parameters in mapping checking/using valid type for each value\\n     * @param _index is a current chunk index from temporary chunks\\n     * @param _type is a type of the parameter\\n     * @param _value is a value of the parameter\\n     * @param _nameOfFunc is a name of function that is used to generate\\n     * the name of the current variable\\n     */\\n    function _saveParameter(\\n        uint256 _index,\\n        string memory _type,\\n        string memory _value,\\n        string memory _nameOfFunc\\n    ) internal {\\n        FuncParameter storage fp = parameters[_index / 2 + 1];\\n        fp._type = _type;\\n        fp.value = _value;\\n        fp.nameOfVariable = string(\\n            abi.encodePacked(_nameOfFunc, '_', StringUtils.toString(_index / 2 + 1))\\n        );\\n    }\\n\\n    /**\\n     * @dev Clears useless variables from the DSL code string as\\n     * all needed parameters are already stored in chunks list\\n     * @param _count is an amount of parameters provided next\\n     * to the name of func. As parameters are stored with their types,\\n     * the _count variable was already multiplied to 2\\n     */\\n    function _cleanCode(uint256 _count) internal {\\n        for (uint256 j = 0; j < _count; j++) {\\n            result.pop();\\n        }\\n    }\\n\\n    /**\\n     * @dev Preparing and pushes the DSL command to results.\\n     * The comand will save this parameter and its name in the smart contract.\\n     * For example: `uint256 7 setUint256 NUMBER_VAR`\\n     * For the moment it works only with uint256 types.\\n     * @param _type is a type of the parameter\\n     * @param _value is a value of the parameter\\n     * @param _variableName is a name of variable that was generated before\\n     */\\n    function _rebuildParameter(\\n        string memory _type,\\n        string memory _value,\\n        string memory _variableName\\n    ) internal {\\n        // TODO: '_type' - should be used in the future for other types\\n        result.push(_type);\\n        result.push(_value);\\n        // TODO: setUint256 - update for other types in dependence on '_type'\\n        result.push('setUint256');\\n        result.push(_variableName);\\n    }\\n\\n    /**\\n     * @dev Pushes the func opcode and the name of the function\\n     * @param _name is a current name of the function\\n     */\\n    function _pushFuncName(string memory _name) internal {\\n        result.push('func');\\n        result.push(_name);\\n    }\\n\\n    function _pushStringToStack(Stack stack_, string memory value) internal {\\n        StackValue stackValue = new StackValue();\\n        stackValue.setString(value);\\n        stack_.push(stackValue);\\n    }\\n\\n    function _isOperator(address _ctxAddr, string memory op) internal view returns (bool) {\\n        for (uint256 i = 0; i < IContext(_ctxAddr).operatorsLen(); i++) {\\n            if (op.equal(IContext(_ctxAddr).operators(i))) return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Checks if a string is an alias to a command from DSL\\n     */\\n    function _isAlias(address _ctxAddr, string memory _cmd) internal view returns (bool) {\\n        return !IContext(_ctxAddr).aliases(_cmd).equal('');\\n    }\\n\\n    /**\\n     * @dev Checks if a symbol is a comment, then increases _index to the next\\n     * no-comment symbol avoiding an additional iteration\\n     * @param _index is a current index of a char that might be changed\\n     * @param _program is a current program string\\n     * @return new index\\n     * @return searchedSymbolLen\\n     * @return isCommeted\\n     */\\n    function _getCommentSymbol(\\n        uint256 _index,\\n        string memory _program,\\n        string memory char\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            bool\\n        )\\n    {\\n        if (_canGetSymbol(_index + 1, _program)) {\\n            string memory nextChar = _program.char(_index + 1);\\n            if (char.equal('/') && nextChar.equal('/')) {\\n                return (1, _index + 2, true);\\n            } else if (char.equal('/') && nextChar.equal('*')) {\\n                return (2, _index + 2, true);\\n            }\\n        }\\n        return (0, _index, false);\\n    }\\n\\n    /**\\n     * @dev Checks if a symbol is an end symbol of a comment, then increases _index to the next\\n     * no-comment symbol avoiding an additional iteration\\n     * @param _i is a current index of a char that might be changed\\n     * @param _ssl is a searched symbol len that might be 0, 1, 2\\n     * @param _p is a current program string\\n     * @return index is a new index of a char\\n     * @return isCommeted\\n     */\\n    function _getEndCommentSymbol(\\n        uint256 _ssl,\\n        uint256 _i,\\n        string memory _p,\\n        string memory char\\n    ) internal pure returns (uint256, bool) {\\n        if (_ssl == 1 && char.equal('\\\\n')) {\\n            return (_i + 1, false);\\n        } else if (_ssl == 2 && char.equal('*') && _canGetSymbol(_i + 1, _p)) {\\n            string memory nextChar = _p.char(_i + 1);\\n            if (nextChar.equal('/')) {\\n                return (_i + 2, false);\\n            }\\n        }\\n        return (_i, true);\\n    }\\n\\n    /**\\n     * @dev Checks if it is possible to get next char from a _program\\n     * @param _index is a current index of a char\\n     * @param _program is a current program string\\n     * @return true if program has the next symbol, otherwise is false\\n     */\\n    function _canGetSymbol(uint256 _index, string memory _program) internal pure returns (bool) {\\n        try _program.char(_index) {\\n            return true;\\n        } catch Error(string memory) {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev This function is used to check if 'transferFrom', 'setLocalUint256',\\n     * 'sendEth' and 'transfer' functions(opcodes) won't use 'uint256' opcode during code\\n     * execution directly. So it needs to be sure that executed code won't mess up\\n     * parameters for the simple number and a number that be used for these functions.\\n     * @param _directUseUint256 set by default from the outer function. Allows to keep current state of a contract\\n     * @param _chunk is a current chunk from the outer function\\n     * @return _isDirect is true if a chunk is matched one from the opcode list, otherwise is false\\n     */\\n    function _isDirectUseUint256(bool _directUseUint256, string memory _chunk)\\n        internal\\n        pure\\n        returns (bool _isDirect)\\n    {\\n        _isDirect = _directUseUint256;\\n        if (\\n            _chunk.equal('transferFrom') ||\\n            _chunk.equal('setLocalUint256') ||\\n            _chunk.equal('sendEth') ||\\n            _chunk.equal('transfer')\\n        ) {\\n            _isDirect = true;\\n        }\\n    }\\n\\n    /**\\n     * @dev As a 'loadRemote' opcode has 4 parameters and two of them are\\n     * numbers it is important to be sure that executed code under 'loadRemote'\\n     * won't mess parameters with the simple uint256 numbers.\\n     * @param _loadRemoteFlag is used to check if it was started the set of parameters for 'loadRemote' opcode\\n     * @param _loadRemoteVarCount is used to check if it was finished the set of parameters for 'loadRemote' opcode\\n     * @param _chunk is a current chunk from the outer function\\n     * @return _flag is an updated or current value of _loadRemoteFlag\\n     * @return _count is an updated or current value of _loadRemoteVarCount\\n     */\\n    function _updateRemoteParams(\\n        bool _loadRemoteFlag,\\n        uint256 _loadRemoteVarCount,\\n        string memory _chunk\\n    ) internal pure returns (bool _flag, uint256 _count) {\\n        _count = 3;\\n        _flag = _loadRemoteFlag;\\n\\n        if (_chunk.equal('loadRemote')) {\\n            _flag = true;\\n        }\\n\\n        if (_flag && _loadRemoteVarCount > 0) {\\n            _count = _loadRemoteVarCount - 1;\\n        }\\n        return (_flag, _count);\\n    }\\n}\\n\"},\"contracts/dsl/interfaces/IParser.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport { IContext } from './IContext.sol';\\nimport { Preprocessor } from '../Preprocessor.sol';\\n\\ninterface IParser {\\n    // Variables\\n\\n    function preprocessor() external returns (Preprocessor);\\n\\n    event ExecRes(bool result);\\n    event NewConditionalTx(address txObj);\\n\\n    // Functions\\n\\n    function parse(address _ctxAddr, string memory _codeRaw) external;\\n\\n    function asmSetLocalBool() external;\\n\\n    function asmSetLocalUint256() external;\\n\\n    function asmSetUint256(IContext _ctx) external;\\n\\n    function asmLoadLocal(IContext _ctx) external;\\n\\n    function asmLoadRemote(IContext _ctx) external;\\n\\n    function asmBool() external;\\n\\n    function asmUint256() external;\\n\\n    function asmSend() external;\\n\\n    function asmTransfer() external;\\n\\n    function asmTransferVar() external;\\n\\n    function asmTransferFrom() external;\\n\\n    function asmBalanceOf() external;\\n\\n    function asmTransferFromVar() external;\\n\\n    function asmIfelse() external;\\n\\n    function asmIf() external;\\n\\n    function asmFunc() external;\\n}\\n\"},\"contracts/dsl/libs/ByteUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nlibrary ByteUtils {\\n    function slice(\\n        bytes calldata _data,\\n        uint256 _start,\\n        uint256 _end\\n    ) public pure returns (bytes memory) {\\n        require(_start < _end, \\\"ByteUtils: 'end' index must be greater than 'start'\\\");\\n        require(_end <= _data.length, \\\"ByteUtils: 'end' is greater than the length of the array\\\");\\n        return _data[_start:_end];\\n    }\\n}\\n\"},\"contracts/dsl/interfaces/IStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IStorage {\\n    function getStorageBool(bytes32 position) external view returns (bool data);\\n\\n    function getStorageAddress(bytes32 position) external view returns (address data);\\n\\n    function getStorageBytes32(bytes32 position) external view returns (bytes32 data);\\n\\n    function getStorageUint256(bytes32 position) external view returns (uint256 data);\\n}\\n\"},\"contracts/dsl/libs/UnstructuredStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary UnstructuredStorage {\\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function setStorageBool(bytes32 position, bool data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageAddress(bytes32 position, address data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageUint256(bytes32 position, uint256 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n}\\n\"},\"contracts/dsl/helpers/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport { IStorage } from '../interfaces/IStorage.sol';\\nimport { UnstructuredStorage } from '../libs/UnstructuredStorage.sol';\\n\\n// TODO: make a library\\ncontract Storage is IStorage {\\n    using UnstructuredStorage for bytes32;\\n\\n    function getStorageBool(bytes32 position) public view override returns (bool data) {\\n        return position.getStorageBool();\\n    }\\n\\n    function getStorageAddress(bytes32 position) public view override returns (address data) {\\n        return position.getStorageAddress();\\n    }\\n\\n    function getStorageBytes32(bytes32 position) public view override returns (bytes32 data) {\\n        return position.getStorageBytes32();\\n    }\\n\\n    function getStorageUint256(bytes32 position) public view override returns (uint256 data) {\\n        return position.getStorageUint256();\\n    }\\n\\n    function setStorageBool(bytes32 position, bool data) public {\\n        position.setStorageBool(data);\\n    }\\n\\n    function setStorageAddress(bytes32 position, address data) public {\\n        position.setStorageAddress(data);\\n    }\\n\\n    function setStorageBytes32(bytes32 position, bytes32 data) public {\\n        position.setStorageBytes32(data);\\n    }\\n\\n    function setStorageUint256(bytes32 position, uint256 data) public {\\n        position.setStorageUint256(data);\\n    }\\n}\\n\"}}}",
  "address": "0x58565C37913627BA42da92896cB7a4e206665e03",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620000209062000083565b604051809103906000f0801580156200003d573d6000803e3d6000fd5b506000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000091565b614f4380620034c383390190565b61342280620000a16000396000f3fe608060405234801561001057600080fd5b50600436106101795760003560e01c80637d4bb2ec116100d9578063dff9ffc411610087578063dff9ffc41461035e578063e4bd0c0714610368578063ea80bd5514610384578063efedfec01461038e578063f71c692a146103aa578063f9d1d3a2146103b4578063ffaeef8d146103e457610179565b80637d4bb2ec146102ba57806394aef8e1146102c4578063b2dced0b146102e2578063be1d1211146102fe578063c35e0ec814610308578063cf7f7ff414610338578063d261d8631461034257610179565b80633635664611610136578063363566461461021657806346b0a4f0146102205780634a6cc8a61461022a5780635141108114610246578063548e07c5146102765780635981f3db1461028057806360fad1ed146102b057610179565b806306a8f6c51461017e578063072fa70b1461019a5780630b91bffc146101a457806316295b1c146101ae5780632d423a6c146101de578063357bf0fb146101fa575b600080fd5b61019860048036038101906101939190611f45565b6103ee565b005b6101a2610405565b005b6101ac610417565b005b6101c860048036038101906101c39190611f85565b610564565b6040516101d59190611fc1565b60405180910390f35b6101f860048036038101906101f39190611fdc565b610576565b005b610214600480360381019061020f919061208c565b61058d565b005b61021e6105d7565b005b6102286105f1565b005b610244600480360381019061023f919061208c565b610603565b005b610260600480360381019061025b9190611f85565b610655565b60405161026d91906120c8565b60405180910390f35b61027e610667565b005b61029a60048036038101906102959190612229565b610681565b6040516102a7919061228b565b60405180910390f35b6102b86106af565b005b6102c26106c1565b005b6102cc6107ea565b6040516102d99190612305565b60405180910390f35b6102fc60048036038101906102f7919061234c565b61080e565b005b610306610825565b005b610322600480360381019061031d9190611f85565b610a2f565b60405161032f919061228b565b60405180910390f35b610340610a41565b005b61035c6004803603810190610357919061238c565b610ab8565b005b610366610b6f565b005b610382600480360381019061037d919061208c565b610b91565b005b61038c610c84565b005b6103a860048036038101906103a39190612414565b610c96565b005b6103b2610cad565b005b6103ce60048036038101906103c99190611f85565b610d24565b6040516103db9190612463565b60405180910390f35b6103ec610d36565b005b6104018183610d5890919063ffffffff16565b5050565b61040d610d5f565b610415610417565b565b6000610421610dc7565b805461042c906124ad565b80601f0160208091040260200160405190810160405280929190818152602001828054610458906124ad565b80156104a55780601f1061047a576101008083540402835291602001916104a5565b820191906000526020600020905b81548152906001019060200180831161048857829003601f168201915b505050505073__$2641d0e8ea942d61d4fa904ca538dff49f$__6370121b7190916040518263ffffffff1660e01b81526004016104e29190612567565b602060405180830381865af41580156104ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610523919061259e565b905060018160001b60405160200161053c92919061268b565b60405160208183030381529060405260019080519060200190610560929190611c96565b5050565b600061056f82610e02565b9050919050565b6105898183610e0d90919063ffffffff16565b5050565b6105cc816040518060400160405280600981526020017f6c6f61644c6f63616c0000000000000000000000000000000000000000000000815250610e14565b6105d4610d5f565b50565b6105df610d5f565b6105e7610d5f565b6105ef610d5f565b565b6105f9610d5f565b6106016106c1565b565b610642816040518060400160405280600a81526020017f6c6f616452656d6f746500000000000000000000000000000000000000000000815250610e14565b61064a610d5f565b610652610ed3565b50565b60006106608261101c565b9050919050565b61066f610d5f565b610677610d5f565b61067f610417565b565b6004818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6106b7610d5f565b6106bf610d5f565b565b600061079b6040518060400160405280600481526020017f7472756500000000000000000000000000000000000000000000000000000000815250610704610dc7565b805461070f906124ad565b80601f016020809104026020016040519081016040528092919081815260200182805461073b906124ad565b80156107885780601f1061075d57610100808354040283529160200191610788565b820191906000526020600020905b81548152906001019060200180831161076b57829003601f168201915b505050505061102790919063ffffffff16565b6107a65760006107a9565b60015b60f81b90506001816040516020016107c2929190612700565b604051602081830303815290604052600190805190602001906107e6929190611c96565b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610821818361108090919063ffffffff16565b5050565b600061082f610dc7565b805461083a906124ad565b80601f0160208091040260200160405190810160405280929190818152602001828054610866906124ad565b80156108b35780601f10610888576101008083540402835291602001916108b3565b820191906000526020600020905b81548152906001019060200180831161089657829003601f168201915b5050505050905060006108c4610dc7565b80546108cf906124ad565b80601f01602080910402602001604051908101604052809291908181526020018280546108fb906124ad565b80156109485780601f1061091d57610100808354040283529160200191610948565b820191906000526020600020905b81548152906001019060200180831161092b57829003601f168201915b505050505090506001805461095c906124ad565b905060048360405161096e9190612764565b9081526020016040518091039020819055506001600060f01b6040516020016109989291906127c8565b604051602081830303815290604052600190805190602001906109bc929190611c96565b50600180546109ca906124ad565b90506004826040516109dc9190612764565b9081526020016040518091039020819055506001600060f01b604051602001610a069291906127c8565b60405160208183030381529060405260019080519060200190610a2a929190611c96565b505050565b6000610a3a82611087565b9050919050565b60018054610a4e906124ad565b90506004610a5a610dc7565b604051610a679190612884565b9081526020016040518091039020819055506001600060f01b604051602001610a919291906127c8565b60405160208183030381529060405260019080519060200190610ab5929190611c96565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630411de8884846040518363ffffffff1660e01b8152600401610b169291906128e5565b6000604051808303816000875af1158015610b35573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b5e9190612a6b565b9050610b6a8382611092565b505050565b610b77610d5f565b610b7f610d5f565b610b87610d5f565b610b8f610417565b565b610c7981600260035481548110610bab57610baa612ab4565b5b906000526020600020018054610bc0906124ad565b80601f0160208091040260200160405190810160405280929190818152602001828054610bec906124ad565b8015610c395780601f10610c0e57610100808354040283529160200191610c39565b820191906000526020600020905b815481529060010190602001808311610c1c57829003601f168201915b50505050506040518060400160405280600781526020017f75696e7432353600000000000000000000000000000000000000000000000000815250611287565b610c81610d5f565b50565b610c8c610d5f565b610c94610417565b565b610ca9818361148090919063ffffffff16565b5050565b60018054610cba906124ad565b90506004610cc6610dc7565b604051610cd39190612884565b9081526020016040518091039020819055506001600060f01b604051602001610cfd9291906127c8565b60405160208183030381529060405260019080519060200190610d21929190611c96565b50565b6000610d2f82611487565b9050919050565b610d3e610d5f565b610d46610d5f565b610d4e610d5f565b610d56610d5f565b565b8082555050565b6001610d69610dc7565b604051602001610d799190612884565b60405160208183030381529060405280519060200120604051602001610da0929190612b30565b60405160208183030381529060405260019080519060200190610dc4929190611c96565b50565b6000600260036000815480929190610dde90612b87565b9190505581548110610df357610df2612ab4565b5b90600052602060002001905090565b600081549050919050565b8082555050565b60018273ffffffffffffffffffffffffffffffffffffffff16635bf3e5d783610e3b610dc7565b6040518363ffffffff1660e01b8152600401610e58929190612c50565b602060405180830381865afa158015610e75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e999190612cb3565b604051602001610eaa929190612700565b60405160208183030381529060405260019080519060200190610ece929190611c96565b505050565b6001610edd610dc7565b8054610ee8906124ad565b80601f0160208091040260200160405190810160405280929190818152602001828054610f14906124ad565b8015610f615780601f10610f3657610100808354040283529160200191610f61565b820191906000526020600020905b815481529060010190602001808311610f4457829003601f168201915b505050505073__$2641d0e8ea942d61d4fa904ca538dff49f$__638e7e34d790916040518263ffffffff1660e01b8152600401610f9e9190612567565b600060405180830381865af4158015610fbb573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610fe49190612d81565b604051602001610ff5929190612e06565b60405160208183030381529060405260019080519060200190611019929190611c96565b50565b600081549050919050565b60008160405160200161103a9190612764565b60405160208183030381529060405280519060200120836040516020016110619190612764565b6040516020818303038152906040528051906020012014905092915050565b8082555050565b600081549050919050565b600160006110a09190611d1c565b600060038190555080600290805190602001906110be929190611d5c565b508173ffffffffffffffffffffffffffffffffffffffff1663f26c917860006040518263ffffffff1660e01b81526004016110f99190612e65565b600060405180830381600087803b15801561111357600080fd5b505af1158015611127573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663138ef1516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611176573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119a9190612ebe565b73ffffffffffffffffffffffffffffffffffffffff166352efea6e6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156111e157600080fd5b505af11580156111f5573d6000803e3d6000fd5b505050505b60028054905060035410156112175761121282611492565b6111fa565b8173ffffffffffffffffffffffffffffffffffffffff1663bcf80c9d60016040518263ffffffff1660e01b81526004016112519190612f7c565b600060405180830381600087803b15801561126b57600080fd5b505af115801561127f573d6000803e3d6000fd5b505050505050565b60016005836040516112999190612764565b908152602001604051809103902060006101000a81548160ff02191690831515021790555060006040518060400160405280600981526020017f6c6f61644c6f63616c0000000000000000000000000000000000000000000000815250905060008360405160200161130b9190612764565b60405160208183030381529060405280519060200120905060008573ffffffffffffffffffffffffffffffffffffffff1663f3f8d4e3846040518263ffffffff1660e01b815260040161135e9190612f9e565b602060405180830381865afa15801561137b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139f9190612cb3565b905060008673ffffffffffffffffffffffffffffffffffffffff16635bf3e5d785876040518363ffffffff1660e01b81526004016113de929190612fc0565b602060405180830381865afa1580156113fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141f9190612cb3565b905081818460405160200161143693929190612ff7565b6040516020818303038152906040526006876040516114559190612764565b90815260200160405180910390209080519060200190611476929190611c96565b5050505050505050565b8082555050565b600081549050919050565b600061149c610dc7565b905060008273ffffffffffffffffffffffffffffffffffffffff1663f3f8d4e3836040518263ffffffff1660e01b81526004016114d99190613034565b602060405180830381865afa1580156114f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151a9190612cb3565b9050600060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415806115df57506115de82805461155b906124ad565b80601f0160208091040260200160405190810160405280929190818152602001828054611587906124ad565b80156115d45780601f106115a9576101008083540402835291602001916115d4565b820191906000526020600020905b8154815290600101906020018083116115b757829003601f168201915b5050505050611c6c565b5b8061161257506005826040516115f59190612884565b908152602001604051809103902060009054906101000a900460ff165b8260405160200161162391906130ee565b60405160208183030381529060405290611673576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166a9190612f9e565b60405180910390fd5b506005826040516116849190612884565b908152602001604051809103902060009054906101000a900460ff16156117005760016006836040516116b79190612884565b90815260200160405180910390206040516020016116d692919061311b565b604051602081830303815290604052600190805190602001906116fa929190611c96565b50611c67565b61179282805461170f906124ad565b80601f016020809104026020016040519081016040528092919081815260200182805461173b906124ad565b80156117885780601f1061175d57610100808354040283529160200191611788565b820191906000526020600020905b81548152906001019060200180831161176b57829003601f168201915b5050505050611c6c565b15611a68576000600180546117a6906124ad565b905090506000600180546117b9906124ad565b80601f01602080910402602001604051908101604052809291908181526020018280546117e5906124ad565b80156118325780601f1061180757610100808354040283529160200191611832565b820191906000526020600020905b81548152906001019060200180831161181557829003601f168201915b505050505073__$54268a2ccf5b28930bb1a8a55944723b0b$__63e0041396909160006004886040516118659190612884565b9081526020016040518091039020546040518463ffffffff1660e01b8152600401611892939291906131a7565b600060405180830381865af41580156118af573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906118d89190612d81565b90506000600180546118e9906124ad565b80601f0160208091040260200160405190810160405280929190818152602001828054611915906124ad565b80156119625780601f1061193757610100808354040283529160200191611962565b820191906000526020600020905b81548152906001019060200180831161194557829003601f168201915b505050505073__$54268a2ccf5b28930bb1a8a55944723b0b$__63e0041396909160026004896040516119959190612884565b9081526020016040518091039020546119ae91906131e5565b600180546119bb906124ad565b90506040518463ffffffff1660e01b81526004016119db9392919061323b565b600060405180830381865af41580156119f8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611a219190612d81565b9050818360f01b82604051602001611a3b93929190613279565b60405160208183030381529060405260019080519060200190611a5f929190611c96565b50505050611c66565b600181604051602001611a7c929190612700565b60405160208183030381529060405260019080519060200190611aa0929190611c96565b5060008373ffffffffffffffffffffffffffffffffffffffff16633cb9ceff846040518263ffffffff1660e01b8152600401611adc9190613034565b602060405180830381865afa158015611af9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1d91906132da565b9050600060e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611c645760003073ffffffffffffffffffffffffffffffffffffffff168286604051602401611b749190613328565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611bde9190613343565b600060405180830381855af49150503d8060008114611c19576040519150601f19603f3d011682016040523d82523d6000602084013e611c1e565b606091505b5050905080611c62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c59906133cc565b60405180910390fd5b505b505b5b505050565b600080600483604051611c7f9190612764565b908152602001604051809103902054119050919050565b828054611ca2906124ad565b90600052602060002090601f016020900481019282611cc45760008555611d0b565b82601f10611cdd57805160ff1916838001178555611d0b565b82800160010185558215611d0b579182015b82811115611d0a578251825591602001919060010190611cef565b5b509050611d189190611dbc565b5090565b508054611d28906124ad565b6000825580601f10611d3a5750611d59565b601f016020900490600052602060002090810190611d589190611dbc565b5b50565b828054828255906000526020600020908101928215611dab579160200282015b82811115611daa578251829080519060200190611d9a929190611dd9565b5091602001919060010190611d7c565b5b509050611db89190611e5f565b5090565b5b80821115611dd5576000816000905550600101611dbd565b5090565b828054611de5906124ad565b90600052602060002090601f016020900481019282611e075760008555611e4e565b82601f10611e2057805160ff1916838001178555611e4e565b82800160010185558215611e4e579182015b82811115611e4d578251825591602001919060010190611e32565b5b509050611e5b9190611dbc565b5090565b5b80821115611e7f5760008181611e769190611e83565b50600101611e60565b5090565b508054611e8f906124ad565b6000825580601f10611ea15750611ec0565b601f016020900490600052602060002090810190611ebf9190611dbc565b5b50565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611eea81611ed7565b8114611ef557600080fd5b50565b600081359050611f0781611ee1565b92915050565b60008115159050919050565b611f2281611f0d565b8114611f2d57600080fd5b50565b600081359050611f3f81611f19565b92915050565b60008060408385031215611f5c57611f5b611ecd565b5b6000611f6a85828601611ef8565b9250506020611f7b85828601611f30565b9150509250929050565b600060208284031215611f9b57611f9a611ecd565b5b6000611fa984828501611ef8565b91505092915050565b611fbb81611ed7565b82525050565b6000602082019050611fd66000830184611fb2565b92915050565b60008060408385031215611ff357611ff2611ecd565b5b600061200185828601611ef8565b925050602061201285828601611ef8565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006120478261201c565b9050919050565b60006120598261203c565b9050919050565b6120698161204e565b811461207457600080fd5b50565b60008135905061208681612060565b92915050565b6000602082840312156120a2576120a1611ecd565b5b60006120b084828501612077565b91505092915050565b6120c281611f0d565b82525050565b60006020820190506120dd60008301846120b9565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612136826120ed565b810181811067ffffffffffffffff82111715612155576121546120fe565b5b80604052505050565b6000612168611ec3565b9050612174828261212d565b919050565b600067ffffffffffffffff821115612194576121936120fe565b5b61219d826120ed565b9050602081019050919050565b82818337600083830152505050565b60006121cc6121c784612179565b61215e565b9050828152602081018484840111156121e8576121e76120e8565b5b6121f38482856121aa565b509392505050565b600082601f8301126122105761220f6120e3565b5b81356122208482602086016121b9565b91505092915050565b60006020828403121561223f5761223e611ecd565b5b600082013567ffffffffffffffff81111561225d5761225c611ed2565b5b612269848285016121fb565b91505092915050565b6000819050919050565b61228581612272565b82525050565b60006020820190506122a0600083018461227c565b92915050565b6000819050919050565b60006122cb6122c66122c18461201c565b6122a6565b61201c565b9050919050565b60006122dd826122b0565b9050919050565b60006122ef826122d2565b9050919050565b6122ff816122e4565b82525050565b600060208201905061231a60008301846122f6565b92915050565b6123298161203c565b811461233457600080fd5b50565b60008135905061234681612320565b92915050565b6000806040838503121561236357612362611ecd565b5b600061237185828601611ef8565b925050602061238285828601612337565b9150509250929050565b600080604083850312156123a3576123a2611ecd565b5b60006123b185828601612337565b925050602083013567ffffffffffffffff8111156123d2576123d1611ed2565b5b6123de858286016121fb565b9150509250929050565b6123f181612272565b81146123fc57600080fd5b50565b60008135905061240e816123e8565b92915050565b6000806040838503121561242b5761242a611ecd565b5b600061243985828601611ef8565b925050602061244a858286016123ff565b9150509250929050565b61245d8161203c565b82525050565b60006020820190506124786000830184612454565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806124c557607f821691505b602082108114156124d9576124d861247e565b5b50919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156125195780820151818401526020810190506124fe565b83811115612528576000848401525b50505050565b6000612539826124df565b61254381856124ea565b93506125538185602086016124fb565b61255c816120ed565b840191505092915050565b60006020820190508181036000830152612581818461252e565b905092915050565b600081519050612598816123e8565b92915050565b6000602082840312156125b4576125b3611ecd565b5b60006125c284828501612589565b91505092915050565b600081905092915050565b60008190508160005260206000209050919050565b600081546125f8816124ad565b61260281866125cb565b9450600182166000811461261d576001811461262e57612661565b60ff19831686528186019350612661565b612637856125d6565b60005b838110156126595781548189015260018201915060208101905061263a565b838801955050505b50505092915050565b6000819050919050565b61268561268082611ed7565b61266a565b82525050565b600061269782856125eb565b91506126a38284612674565b6020820191508190509392505050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b6126fa6126f5826126b3565b6126df565b82525050565b600061270c82856125eb565b915061271882846126e9565b6001820191508190509392505050565b600081905092915050565b600061273e826124df565b6127488185612728565b93506127588185602086016124fb565b80840191505092915050565b60006127708284612733565b915081905092915050565b60007fffff00000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b6127c26127bd8261277b565b6127a7565b82525050565b60006127d482856125eb565b91506127e082846127b1565b6002820191508190509392505050565b60008190508160005260206000209050919050565b60008154612812816124ad565b61281c8186612728565b9450600182166000811461283757600181146128485761287b565b60ff1983168652818601935061287b565b612851856127f0565b60005b8381101561287357815481890152600182019150602081019050612854565b838801955050505b50505092915050565b60006128908284612805565b915081905092915050565b600082825260208201905092915050565b60006128b7826124df565b6128c1818561289b565b93506128d18185602086016124fb565b6128da816120ed565b840191505092915050565b60006040820190506128fa6000830185612454565b818103602083015261290c81846128ac565b90509392505050565b600067ffffffffffffffff8211156129305761292f6120fe565b5b602082029050602081019050919050565b600080fd5b600061295961295484612179565b61215e565b905082815260208101848484011115612975576129746120e8565b5b6129808482856124fb565b509392505050565b600082601f83011261299d5761299c6120e3565b5b81516129ad848260208601612946565b91505092915050565b60006129c96129c484612915565b61215e565b905080838252602082019050602084028301858111156129ec576129eb612941565b5b835b81811015612a3357805167ffffffffffffffff811115612a1157612a106120e3565b5b808601612a1e8982612988565b855260208501945050506020810190506129ee565b5050509392505050565b600082601f830112612a5257612a516120e3565b5b8151612a628482602086016129b6565b91505092915050565b600060208284031215612a8157612a80611ecd565b5b600082015167ffffffffffffffff811115612a9f57612a9e611ed2565b5b612aab84828501612a3d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b612b2a612b2582612ae3565b612b0f565b82525050565b6000612b3c82856125eb565b9150612b488284612b19565b6004820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612b9282612272565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612bc557612bc4612b58565b5b600182019050919050565b60008154612bdd816124ad565b612be7818661289b565b94506001821660008114612c025760018114612c1457612c47565b60ff1983168652602086019350612c47565b612c1d856127f0565b60005b83811015612c3f57815481890152600182019150602081019050612c20565b808801955050505b50505092915050565b60006040820190508181036000830152612c6a81856128ac565b90508181036020830152612c7e8184612bd0565b90509392505050565b612c90816126b3565b8114612c9b57600080fd5b50565b600081519050612cad81612c87565b92915050565b600060208284031215612cc957612cc8611ecd565b5b6000612cd784828501612c9e565b91505092915050565b600067ffffffffffffffff821115612cfb57612cfa6120fe565b5b612d04826120ed565b9050602081019050919050565b6000612d24612d1f84612ce0565b61215e565b905082815260208101848484011115612d4057612d3f6120e8565b5b612d4b8482856124fb565b509392505050565b600082601f830112612d6857612d676120e3565b5b8151612d78848260208601612d11565b91505092915050565b600060208284031215612d9757612d96611ecd565b5b600082015167ffffffffffffffff811115612db557612db4611ed2565b5b612dc184828501612d53565b91505092915050565b600081519050919050565b6000612de082612dca565b612dea81856125cb565b9350612dfa8185602086016124fb565b80840191505092915050565b6000612e1282856125eb565b9150612e1e8284612dd5565b91508190509392505050565b6000819050919050565b6000612e4f612e4a612e4584612e2a565b6122a6565b612272565b9050919050565b612e5f81612e34565b82525050565b6000602082019050612e7a6000830184612e56565b92915050565b6000612e8b8261203c565b9050919050565b612e9b81612e80565b8114612ea657600080fd5b50565b600081519050612eb881612e92565b92915050565b600060208284031215612ed457612ed3611ecd565b5b6000612ee284828501612ea9565b91505092915050565b600082825260208201905092915050565b60008154612f09816124ad565b612f138186612eeb565b94506001821660008114612f2e5760018114612f4057612f73565b60ff1983168652602086019350612f73565b612f49856125d6565b60005b83811015612f6b57815481890152600182019150602081019050612f4c565b808801955050505b50505092915050565b60006020820190508181036000830152612f968184612efc565b905092915050565b60006020820190508181036000830152612fb881846128ac565b905092915050565b60006040820190508181036000830152612fda81856128ac565b90508181036020830152612fee81846128ac565b90509392505050565b600061300382866126e9565b60018201915061301382856126e9565b6001820191506130238284612b19565b600482019150819050949350505050565b6000602082019050818103600083015261304e8184612bd0565b905092915050565b7f5061727365723a20220000000000000000000000000000000000000000000000600082015250565b600061308c600983612728565b915061309782613056565b600982019050919050565b7f2220636f6d6d616e6420697320756e6b6e6f776e000000000000000000000000600082015250565b60006130d8601483612728565b91506130e3826130a2565b601482019050919050565b60006130f98261307f565b91506131058284612805565b9150613110826130cb565b915081905092915050565b600061312782856125eb565b915061313382846125eb565b91508190509392505050565b600082825260208201905092915050565b600061315b82612dca565b613165818561313f565b93506131758185602086016124fb565b61317e816120ed565b840191505092915050565b61319281612e34565b82525050565b6131a181612272565b82525050565b600060608201905081810360008301526131c18186613150565b90506131d06020830185613189565b6131dd6040830184613198565b949350505050565b60006131f082612272565b91506131fb83612272565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156132305761322f612b58565b5b828201905092915050565b600060608201905081810360008301526132558186613150565b90506132646020830185613198565b6132716040830184613198565b949350505050565b60006132858286612dd5565b915061329182856127b1565b6002820191506132a18284612dd5565b9150819050949350505050565b6132b781612ae3565b81146132c257600080fd5b50565b6000815190506132d4816132ae565b92915050565b6000602082840312156132f0576132ef611ecd565b5b60006132fe848285016132c5565b91505092915050565b6000613312826122d2565b9050919050565b61332281613307565b82525050565b600060208201905061333d6000830184613319565b92915050565b600061334f8284612dd5565b915081905092915050565b7f5061727365723a2064656c656761746563616c6c20746f2061736d53656c656360008201527f746f72206661696c656400000000000000000000000000000000000000000000602082015250565b60006133b6602a8361289b565b91506133c18261335a565b604082019050919050565b600060208201905081810360008301526133e5816133a9565b905091905056fea2646970667358221220c7540ce1a03524f5b9ef9456dbc7a9d7218cdd230549f376aece47a4cbf032e164736f6c634300080b0033608060405234801561001057600080fd5b50614f23806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630411de8814610051578063092d9490146100815780632a7b2c93146100b1578063f0dada05146100e1575b600080fd5b61006b60048036038101906100669190613094565b610111565b604051610078919061323a565b60405180910390f35b61009b60048036038101906100969190613380565b610162565b6040516100a8919061323a565b60405180910390f35b6100cb60048036038101906100c691906133ef565b610ea0565b6040516100d8919061323a565b60405180910390f35b6100fb60048036038101906100f691906133ef565b61143c565b6040516101089190613482565b60405180910390f35b6060600060405161012190612d9a565b604051809103906000f08015801561013d573d6000803e3d6000fd5b509050600061014b84610ea0565b9050610158858284610162565b9250505092915050565b6060600160006101729190612da7565b60008060008060006003905060608060005b8a51811015610c21578a81815181106101a05761019f6134a4565b5b602002602001015192506101b48584611571565b94506101c18685856116bb565b80955081975050506101d38c84611741565b1561025a578b73ffffffffffffffffffffffffffffffffffffffff16637823a2b8846040518263ffffffff1660e01b81526004016102119190613482565b600060405180830381865afa15801561022e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102579190613543565b92505b6102648c846117ec565b156105f3575b60008a73ffffffffffffffffffffffffffffffffffffffff16631f7b6d326040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102db91906135c2565b1180156104bb57508b73ffffffffffffffffffffffffffffffffffffffff1663ae9362518b73ffffffffffffffffffffffffffffffffffffffff16630c308a3b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561034a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036e919061362d565b73ffffffffffffffffffffffffffffffffffffffff166389ea642f6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156103b8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906103e19190613543565b6040518263ffffffff1660e01b81526004016103fd9190613482565b602060405180830381865afa15801561041a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043e91906135c2565b8c73ffffffffffffffffffffffffffffffffffffffff1663ae936251856040518263ffffffff1660e01b81526004016104779190613482565b602060405180830381865afa158015610494573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b891906135c2565b11155b156105e45760018a73ffffffffffffffffffffffffffffffffffffffff1663a4ece52c6040518163ffffffff1660e01b81526004016020604051808303816000875af115801561050f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610533919061362d565b73ffffffffffffffffffffffffffffffffffffffff166389ea642f6040518163ffffffff1660e01b8152600401600060405180830381865afa15801561057d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105a69190613543565b9080600181540180825580915050600190039060005260206000200160009091909190915090805190602001906105de929190612dc8565b5061026a565b6105ee8a84611929565b610c0e565b61063b6040518060400160405280600181526020017f280000000000000000000000000000000000000000000000000000000000000081525084611a3190919063ffffffff16565b1561064f5761064a8a84611929565b610c0d565b6106976040518060400160405280600181526020017f290000000000000000000000000000000000000000000000000000000000000081525084611a3190919063ffffffff16565b15610965575b6107c66040518060400160405280600181526020017f28000000000000000000000000000000000000000000000000000000000000008152508b73ffffffffffffffffffffffffffffffffffffffff16630c308a3b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610721573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610745919061362d565b73ffffffffffffffffffffffffffffffffffffffff166389ea642f6040518163ffffffff1660e01b8152600401600060405180830381865afa15801561078f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906107b89190613543565b611a3190919063ffffffff16565b6108ee5760018a73ffffffffffffffffffffffffffffffffffffffff1663a4ece52c6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610819573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083d919061362d565b73ffffffffffffffffffffffffffffffffffffffff166389ea642f6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610887573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906108b09190613543565b9080600181540180825580915050600190039060005260206000200160009091909190915090805190602001906108e8929190612dc8565b5061069d565b8973ffffffffffffffffffffffffffffffffffffffff1663a4ece52c6040518163ffffffff1660e01b81526004016020604051808303816000875af115801561093b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095f919061362d565b50610c0c565b8273__$2641d0e8ea942d61d4fa904ca538dff49f$__63dba27b1c90916040518263ffffffff1660e01b815260040161099e91906136a4565b602060405180830381865af41580156109bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109df91906136fe565b80156109e9575087155b80156109f3575084155b15610a4b57610a0186611a8a565b6001610a0d8488611c1f565b908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190610a45929190612dc8565b50610c0b565b8273__$2641d0e8ea942d61d4fa904ca538dff49f$__63dba27b1c90916040518263ffffffff1660e01b8152600401610a8491906136a4565b602060405180830381865af4158015610aa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac591906136fe565b8015610acf575087155b8015610ad85750845b15610b225760009450600183908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190610b1c929190612dc8565b50610c0a565b610b6a6040518060400160405280600481526020017f66756e630000000000000000000000000000000000000000000000000000000081525084611a3190919063ffffffff16565b15610b785760019750610c09565b878015610b83575086155b15610ba557610b9483838a8a611d38565b809450819950829a50505050610c08565b878015610baf5750865b15610bca5760009650610bc383838a611dae565b9750610c07565b600183908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190610c05929190612dc8565b505b5b5b5b5b5b5b5b8080610c199061375a565b915050610184565b505b60008973ffffffffffffffffffffffffffffffffffffffff16631f7b6d326040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9491906135c2565b1115610dbe5760018973ffffffffffffffffffffffffffffffffffffffff1663a4ece52c6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610ce9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0d919061362d565b73ffffffffffffffffffffffffffffffffffffffff166389ea642f6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610d57573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610d809190613543565b908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190610db8929190612dc8565b50610c23565b6001805480602002602001604051908101604052809291908181526020016000905b82821015610e8c578382906000526020600020018054610dff906137d2565b80601f0160208091040260200160405190810160405280929190818152602001828054610e2b906137d2565b8015610e785780601f10610e4d57610100808354040283529160200191610e78565b820191906000526020600020905b815481529060010190602001808311610e5b57829003601f168201915b505050505081526020019060010190610de0565b505050509750505050505050509392505050565b606060016000610eb09190612da7565b606060005b610ebe84611e9d565b8110156113015760008473__$2641d0e8ea942d61d4fa904ca538dff49f$__63b45556099091846040518363ffffffff1660e01b8152600401610f02929190613813565b600060405180830381865af4158015610f1f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610f489190613543565b9050610f926040518060400160405280600181526020017f7b0000000000000000000000000000000000000000000000000000000000000081525082611a3190919063ffffffff16565b15610f9d57506112ee565b610fe56040518060400160405280600181526020017f7d0000000000000000000000000000000000000000000000000000000000000081525082611a3190919063ffffffff16565b1561105e57600180600181540180825580915050600190039060005260206000200160006040518060400160405280600381526020017f656e64000000000000000000000000000000000000000000000000000000000081525090919091509080519060200190611057929190612dc8565b50506112ee565b6110a66040518060400160405280600181526020017f200000000000000000000000000000000000000000000000000000000000000081525082611a3190919063ffffffff16565b806110f557506110f46040518060400160405280600181526020017f0a0000000000000000000000000000000000000000000000000000000000000081525082611a3190919063ffffffff16565b5b8061114457506111436040518060400160405280600181526020017f280000000000000000000000000000000000000000000000000000000000000081525082611a3190919063ffffffff16565b5b8061119357506111926040518060400160405280600181526020017f290000000000000000000000000000000000000000000000000000000000000081525082611a3190919063ffffffff16565b5b156111fd5760006111a384611e9d565b11156111f8576001839080600181540180825580915050600190039060005260206000200160009091909190915090805190602001906111e4929190612dc8565b506040518060200160405280600081525092505b611213565b6112108184611ea890919063ffffffff16565b92505b61125b6040518060400160405280600181526020017f280000000000000000000000000000000000000000000000000000000000000081525082611a3190919063ffffffff16565b806112aa57506112a96040518060400160405280600181526020017f290000000000000000000000000000000000000000000000000000000000000081525082611a3190919063ffffffff16565b5b156112ec576001819080600181540180825580915050600190039060005260206000200160009091909190915090805190602001906112ea929190612dc8565b505b505b80806112f99061375a565b915050610eb5565b50600061130d82611e9d565b11156113625760018190806001815401808255809150506001900390600052602060002001600090919091909150908051906020019061134e929190612dc8565b506040518060200160405280600081525090505b6001805480602002602001604051908101604052809291908181526020016000905b828210156114305783829060005260206000200180546113a3906137d2565b80601f01602080910402602001604051908101604052809291908181526020018280546113cf906137d2565b801561141c5780601f106113f15761010080835404028352916020019161141c565b820191906000526020600020905b8154815290600101906020018083116113ff57829003601f168201915b505050505081526020019060010190611384565b50505050915050919050565b606060008060008060605b61145087611e9d565b821015611567578673__$2641d0e8ea942d61d4fa904ca538dff49f$__63b45556099091846040518363ffffffff1660e01b8152600401611492929190613813565b600060405180830381865af41580156114af573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906114d89190613543565b905081925084156114fc576114ef84838984611ed4565b8096508194505050611514565b6115078288836120c9565b8097508195508296505050505b8183111561152457829150611447565b841561153e576001826115379190613843565b9150611447565b6115518187611ea890919063ffffffff16565b95506001826115609190613843565b9150611447565b5050505050919050565b60008290506115be6040518060400160405280600c81526020017f7472616e7366657246726f6d000000000000000000000000000000000000000081525083611a3190919063ffffffff16565b8061160d575061160c6040518060400160405280600f81526020017f7365744c6f63616c55696e74323536000000000000000000000000000000000081525083611a3190919063ffffffff16565b5b8061165c575061165b6040518060400160405280600781526020017f73656e644574680000000000000000000000000000000000000000000000000081525083611a3190919063ffffffff16565b5b806116ab57506116aa6040518060400160405280600881526020017f7472616e7366657200000000000000000000000000000000000000000000000081525083611a3190919063ffffffff16565b5b156116b557600190505b92915050565b6000806003905084915061170d6040518060400160405280600a81526020017f6c6f616452656d6f74650000000000000000000000000000000000000000000081525084611a3190919063ffffffff16565b1561171757600191505b8180156117245750600084115b15611739576001846117369190613899565b90505b935093915050565b60006117e3604051806020016040528060008152508473ffffffffffffffffffffffffffffffffffffffff16637823a2b8856040518263ffffffff1660e01b815260040161178f9190613482565b600060405180830381865afa1580156117ac573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906117d59190613543565b611a3190919063ffffffff16565b15905092915050565b600080600090505b8373ffffffffffffffffffffffffffffffffffffffff16635f390d9b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561183f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061186391906135c2565b81101561191d576118fb8473ffffffffffffffffffffffffffffffffffffffff1663e28d4906836040518263ffffffff1660e01b81526004016118a691906138dc565b600060405180830381865afa1580156118c3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906118ec9190613543565b84611a3190919063ffffffff16565b1561190a576001915050611923565b80806119159061375a565b9150506117f4565b50600090505b92915050565b600060405161193790612e4e565b604051809103906000f080158015611953573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff16637fcaf666836040518263ffffffff1660e01b815260040161198f9190613482565b600060405180830381600087803b1580156119a957600080fd5b505af11580156119bd573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166389b09de7826040518263ffffffff1660e01b81526004016119fa9190613956565b600060405180830381600087803b158015611a1457600080fd5b505af1158015611a28573d6000803e3d6000fd5b50505050505050565b600081604051602001611a4491906139ad565b6040516020818303038152906040528051906020012083604051602001611a6b91906139ad565b6040516020818303038152906040528051906020012014905092915050565b60006001805490501480611ba85750611b966040518060400160405280600781526020017f75696e74323536000000000000000000000000000000000000000000000000008152506001808080549050611ae49190613899565b81548110611af557611af46134a4565b5b906000526020600020018054611b0a906137d2565b80601f0160208091040260200160405190810160405280929190818152602001828054611b36906137d2565b8015611b835780601f10611b5857610100808354040283529160200191611b83565b820191906000526020600020905b815481529060010190602001808311611b6657829003601f168201915b5050505050611a3190919063ffffffff16565b158015611ba7575060001515811515145b5b15611c1c57600180600181540180825580915050600190039060005260206000200160006040518060400160405280600781526020017f75696e743235360000000000000000000000000000000000000000000000000081525090919091509080519060200190611c1a929190612dc8565b505b50565b60608115611c2f57829050611d32565b8273__$2641d0e8ea942d61d4fa904ca538dff49f$__6370121b7190916040518263ffffffff1660e01b8152600401611c6891906136a4565b602060405180830381865af4925050508015611ca257506040513d601f19601f82011682018060405250810190611c9f91906135c2565b60015b611d2c578273__$2641d0e8ea942d61d4fa904ca538dff49f$__63929b2fb990916040518263ffffffff1660e01b8152600401611cdf91906136a4565b600060405180830381865af4158015611cfc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611d259190613543565b9050611d31565b508290505b5b92915050565b6000806060611d856040518060400160405280600481526020017f656e64660000000000000000000000000000000000000000000000000000000081525088611a3190919063ffffffff16565b15611d995760008487925092509250611da4565b846001889250925092505b9450945094915050565b6000611df86040518060400160405280600481526020017f656e64660000000000000000000000000000000000000000000000000000000081525085611a3190919063ffffffff16565b15611e0f57611e0683612304565b60009050611e96565b611e928473__$2641d0e8ea942d61d4fa904ca538dff49f$__6370121b7190916040518263ffffffff1660e01b8152600401611e4b91906136a4565b602060405180830381865af4158015611e68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8c91906135c2565b846123b1565b8190505b9392505050565b600081519050919050565b60608282604051602001611ebd9291906139c4565b604051602081830303815290604052905092915050565b600080600186148015611f2b5750611f2a6040518060400160405280600181526020017f0a0000000000000000000000000000000000000000000000000000000000000081525084611a3190919063ffffffff16565b5b15611f4857600185611f3d9190613843565b6000915091506120c0565b600286148015611f9c5750611f9b6040518060400160405280600181526020017f2a0000000000000000000000000000000000000000000000000000000000000081525084611a3190919063ffffffff16565b5b8015611fba5750611fb9600186611fb39190613843565b85612632565b5b156120b85760008473__$2641d0e8ea942d61d4fa904ca538dff49f$__63b45556099091600189611feb9190613843565b6040518363ffffffff1660e01b8152600401612008929190613813565b600060405180830381865af4158015612025573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061204e9190613543565b90506120986040518060400160405280600181526020017f2f0000000000000000000000000000000000000000000000000000000000000081525082611a3190919063ffffffff16565b156120b6576002866120aa9190613843565b600092509250506120c0565b505b846001915091505b94509492505050565b60008060006120e46001876120de9190613843565b86612632565b156122ef5760008573__$2641d0e8ea942d61d4fa904ca538dff49f$__63b4555609909160018a6121159190613843565b6040518363ffffffff1660e01b8152600401612132929190613813565b600060405180830381865af415801561214f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906121789190613543565b90506121c26040518060400160405280600181526020017f2f0000000000000000000000000000000000000000000000000000000000000081525086611a3190919063ffffffff16565b801561221257506122116040518060400160405280600181526020017f2f0000000000000000000000000000000000000000000000000000000000000081525082611a3190919063ffffffff16565b5b156122345760016002886122269190613843565b6001935093509350506122fb565b61227c6040518060400160405280600181526020017f2f0000000000000000000000000000000000000000000000000000000000000081525086611a3190919063ffffffff16565b80156122cc57506122cb6040518060400160405280600181526020017f2a0000000000000000000000000000000000000000000000000000000000000081525082611a3190919063ffffffff16565b5b156122ed57600280886122df9190613843565b6001935093509350506122fb565b505b60008660009250925092505b93509350939050565b600180600181540180825580915050600190039060005260206000200160006040518060400160405280600481526020017f66756e630000000000000000000000000000000000000000000000000000000081525090919091509080519060200190612371929190612dc8565b506001819080600181540180825580915050600190039060005260206000200160009091909190915090805190602001906123ad929190612dc8565b5050565b60006002836123c091906139e8565b905060008311612405576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123fc90613ab4565b60405180910390fd5b60008167ffffffffffffffff81111561242157612420612f69565b5b60405190808252806020026020018201604052801561245457816020015b606081526020019060019003908161243f5790505b50905081600180549050101561249f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161249690613b46565b60405180910390fd5b6000826001805490506124b29190613899565b905060005b838110156125a257600181836124cd9190613843565b815481106124de576124dd6134a4565b5b9060005260206000200180546124f3906137d2565b80601f016020809104026020016040519081016040528092919081815260200182805461251f906137d2565b801561256c5780601f106125415761010080835404028352916020019161256c565b820191906000526020600020905b81548152906001019060200180831161254f57829003601f168201915b5050505050838281518110612584576125836134a4565b5b6020026020010181905250808061259a9061375a565b9150506124b7565b506125ac836126fc565b60005b825181101561261857612604818483815181106125cf576125ce6134a4565b5b6020026020010151856001856125e59190613843565b815181106125f6576125f56134a4565b5b60200260200101518861274e565b6002816126119190613843565b90506125af565b506126228561280f565b61262b84612304565b5050505050565b60008173__$2641d0e8ea942d61d4fa904ca538dff49f$__63b45556099091856040518363ffffffff1660e01b815260040161266f929190613813565b600060405180830381865af49250505080156126ae57506040513d6000823e3d601f19601f820116820180604052508101906126ab9190613543565b60015b6126f0576126ba613b73565b806308c379a014156126e457506126cf613b95565b806126da57506126e6565b60009150506126f6565b505b3d6000803e3d6000fd5b50600190505b92915050565b60005b8181101561274a57600180548061271957612718613c2b565b5b6001900381819060005260206000200160006127359190612e5b565b905580806127429061375a565b9150506126ff565b5050565b600080600060016002886127629190613c89565b61276c9190613843565b8152602001908152602001600020905083816000019080519060200190612794929190612dc8565b50828160020190805190602001906127ad929190612dc8565b50816127d060016002886127c19190613c89565b6127cb9190613843565b612b12565b6040516020016127e1929190613d06565b604051602081830303815290604052816001019080519060200190612807929190612dc8565b505050505050565b60005b81811015612b0e57600080600060018461282c9190613843565b8152602001908152602001600020604051806060016040529081600082018054612855906137d2565b80601f0160208091040260200160405190810160405280929190818152602001828054612881906137d2565b80156128ce5780601f106128a3576101008083540402835291602001916128ce565b820191906000526020600020905b8154815290600101906020018083116128b157829003601f168201915b505050505081526020016001820180546128e7906137d2565b80601f0160208091040260200160405190810160405280929190818152602001828054612913906137d2565b80156129605780601f1061293557610100808354040283529160200191612960565b820191906000526020600020905b81548152906001019060200180831161294357829003601f168201915b50505050508152602001600282018054612979906137d2565b80601f01602080910402602001604051908101604052809291908181526020018280546129a5906137d2565b80156129f25780601f106129c7576101008083540402835291602001916129f2565b820191906000526020600020905b8154815290600101906020018083116129d557829003601f168201915b5050505050815250509050612a14816000015182604001518360200151612c73565b60405180606001604052806040518060200160405280600081525081526020016040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250815260200160405180602001604052806000815250815250600080600185612a929190613843565b81526020019081526020016000206000820151816000019080519060200190612abc929190612dc8565b506020820151816001019080519060200190612ad9929190612dc8565b506040820151816002019080519060200190612af6929190612dc8565b50905050508080612b069061375a565b915050612812565b5050565b60606000821415612b5a576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612c6e565b600082905060005b60008214612b8c578080612b759061375a565b915050600a82612b859190613c89565b9150612b62565b60008167ffffffffffffffff811115612ba857612ba7612f69565b5b6040519080825280601f01601f191660200182016040528015612bda5781602001600182028036833780820191505090505b5090505b60008514612c6757600182612bf39190613899565b9150600a85612c029190613d35565b6030612c0e9190613843565b60f81b818381518110612c2457612c236134a4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85612c609190613c89565b9450612bde565b8093505050505b919050565b600183908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190612cae929190612dc8565b50600182908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190612cea929190612dc8565b50600180600181540180825580915050600190039060005260206000200160006040518060400160405280600a81526020017f73657455696e743235360000000000000000000000000000000000000000000081525090919091509080519060200190612d58929190612dc8565b50600181908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190612d94929190612dc8565b50505050565b61066d80613d6783390190565b5080546000825590600052602060002090810190612dc59190612e9b565b50565b828054612dd4906137d2565b90600052602060002090601f016020900481019282612df65760008555612e3d565b82601f10612e0f57805160ff1916838001178555612e3d565b82800160010185558215612e3d579182015b82811115612e3c578251825591602001919060010190612e21565b5b509050612e4a9190612ebf565b5090565b610b1a806143d483390190565b508054612e67906137d2565b6000825580601f10612e795750612e98565b601f016020900490600052602060002090810190612e979190612ebf565b5b50565b5b80821115612ebb5760008181612eb29190612e5b565b50600101612e9c565b5090565b5b80821115612ed8576000816000905550600101612ec0565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612f1b82612ef0565b9050919050565b612f2b81612f10565b8114612f3657600080fd5b50565b600081359050612f4881612f22565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612fa182612f58565b810181811067ffffffffffffffff82111715612fc057612fbf612f69565b5b80604052505050565b6000612fd3612edc565b9050612fdf8282612f98565b919050565b600067ffffffffffffffff821115612fff57612ffe612f69565b5b61300882612f58565b9050602081019050919050565b82818337600083830152505050565b600061303761303284612fe4565b612fc9565b90508281526020810184848401111561305357613052612f53565b5b61305e848285613015565b509392505050565b600082601f83011261307b5761307a612f4e565b5b813561308b848260208601613024565b91505092915050565b600080604083850312156130ab576130aa612ee6565b5b60006130b985828601612f39565b925050602083013567ffffffffffffffff8111156130da576130d9612eeb565b5b6130e685828601613066565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561315657808201518184015260208101905061313b565b83811115613165576000848401525b50505050565b60006131768261311c565b6131808185613127565b9350613190818560208601613138565b61319981612f58565b840191505092915050565b60006131b0838361316b565b905092915050565b6000602082019050919050565b60006131d0826130f0565b6131da81856130fb565b9350836020820285016131ec8561310c565b8060005b85811015613228578484038952815161320985826131a4565b9450613214836131b8565b925060208a019950506001810190506131f0565b50829750879550505050505092915050565b6000602082019050818103600083015261325481846131c5565b905092915050565b600067ffffffffffffffff82111561327757613276612f69565b5b602082029050602081019050919050565b600080fd5b60006132a061329b8461325c565b612fc9565b905080838252602082019050602084028301858111156132c3576132c2613288565b5b835b8181101561330a57803567ffffffffffffffff8111156132e8576132e7612f4e565b5b8086016132f58982613066565b855260208501945050506020810190506132c5565b5050509392505050565b600082601f83011261332957613328612f4e565b5b813561333984826020860161328d565b91505092915050565b600061334d82612f10565b9050919050565b61335d81613342565b811461336857600080fd5b50565b60008135905061337a81613354565b92915050565b60008060006060848603121561339957613398612ee6565b5b60006133a786828701612f39565b935050602084013567ffffffffffffffff8111156133c8576133c7612eeb565b5b6133d486828701613314565b92505060406133e58682870161336b565b9150509250925092565b60006020828403121561340557613404612ee6565b5b600082013567ffffffffffffffff81111561342357613422612eeb565b5b61342f84828501613066565b91505092915050565b600082825260208201905092915050565b60006134548261311c565b61345e8185613438565b935061346e818560208601613138565b61347781612f58565b840191505092915050565b6000602082019050818103600083015261349c8184613449565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006134e66134e184612fe4565b612fc9565b90508281526020810184848401111561350257613501612f53565b5b61350d848285613138565b509392505050565b600082601f83011261352a57613529612f4e565b5b815161353a8482602086016134d3565b91505092915050565b60006020828403121561355957613558612ee6565b5b600082015167ffffffffffffffff81111561357757613576612eeb565b5b61358384828501613515565b91505092915050565b6000819050919050565b61359f8161358c565b81146135aa57600080fd5b50565b6000815190506135bc81613596565b92915050565b6000602082840312156135d8576135d7612ee6565b5b60006135e6848285016135ad565b91505092915050565b60006135fa82612f10565b9050919050565b61360a816135ef565b811461361557600080fd5b50565b60008151905061362781613601565b92915050565b60006020828403121561364357613642612ee6565b5b600061365184828501613618565b91505092915050565b600082825260208201905092915050565b60006136768261311c565b613680818561365a565b9350613690818560208601613138565b61369981612f58565b840191505092915050565b600060208201905081810360008301526136be818461366b565b905092915050565b60008115159050919050565b6136db816136c6565b81146136e657600080fd5b50565b6000815190506136f8816136d2565b92915050565b60006020828403121561371457613713612ee6565b5b6000613722848285016136e9565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006137658261358c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156137985761379761372b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806137ea57607f821691505b602082108114156137fe576137fd6137a3565b5b50919050565b61380d8161358c565b82525050565b6000604082019050818103600083015261382d818561366b565b905061383c6020830184613804565b9392505050565b600061384e8261358c565b91506138598361358c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561388e5761388d61372b565b5b828201905092915050565b60006138a48261358c565b91506138af8361358c565b9250828210156138c2576138c161372b565b5b828203905092915050565b6138d68161358c565b82525050565b60006020820190506138f160008301846138cd565b92915050565b6000819050919050565b600061391c61391761391284612ef0565b6138f7565b612ef0565b9050919050565b600061392e82613901565b9050919050565b600061394082613923565b9050919050565b61395081613935565b82525050565b600060208201905061396b6000830184613947565b92915050565b600081905092915050565b60006139878261311c565b6139918185613971565b93506139a1818560208601613138565b80840191505092915050565b60006139b9828461397c565b915081905092915050565b60006139d0828561397c565b91506139dc828461397c565b91508190509392505050565b60006139f38261358c565b91506139fe8361358c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613a3757613a3661372b565b5b828202905092915050565b7f50726570726f636573736f723a20616d6f756e74206f6620706172616d65746560008201527f72732063616e206e6f7420626520300000000000000000000000000000000000602082015250565b6000613a9e602f83613438565b9150613aa982613a42565b604082019050919050565b60006020820190508181036000830152613acd81613a91565b9050919050565b7f50726570726f636573736f723a20696e76616c696420706172616d657465727360008201527f20666f72207468652066756e6374696f6e000000000000000000000000000000602082015250565b6000613b30603183613438565b9150613b3b82613ad4565b604082019050919050565b60006020820190508181036000830152613b5f81613b23565b9050919050565b60008160e01c9050919050565b600060033d1115613b925760046000803e613b8f600051613b66565b90505b90565b600060443d1015613ba557613c28565b613bad612edc565b60043d036004823e80513d602482011167ffffffffffffffff82111715613bd5575050613c28565b808201805167ffffffffffffffff811115613bf35750505050613c28565b80602083010160043d038501811115613c10575050505050613c28565b613c1f82602001850186612f98565b82955050505050505b90565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613c948261358c565b9150613c9f8361358c565b925082613caf57613cae613c5a565b5b828204905092915050565b7f5f00000000000000000000000000000000000000000000000000000000000000600082015250565b6000613cf0600183613971565b9150613cfb82613cba565b600182019050919050565b6000613d12828561397c565b9150613d1d82613ce3565b9150613d29828461397c565b91508190509392505050565b6000613d408261358c565b9150613d4b8361358c565b925082613d5b57613d5a613c5a565b5b82820690509291505056fe608060405234801561001057600080fd5b5061064d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630c308a3b146100675780631f7b6d321461008557806352efea6e146100a357806389b09de7146100ad578063a4ece52c146100c9578063dc9031c4146100e7575b600080fd5b61006f610117565b60405161007c91906103af565b60405180910390f35b61008d610126565b60405161009a91906103e3565b60405180910390f35b6100ab610135565b005b6100c760048036038101906100c29190610453565b610144565b005b6100d16101aa565b6040516100de91906103af565b60405180910390f35b61010160048036038101906100fc91906104ac565b610205565b60405161010e91906103af565b60405180910390f35b6000610121610244565b905090565b60006101306102e6565b905090565b60008061014291906102f2565b565b6000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806101b5610244565b905060008054806101c9576101c86104d9565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590558091505090565b6000818154811061021557600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061024f6102e6565b1161028f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028690610565565b60405180910390fd5b6000600161029b6102e6565b6102a591906105b4565b815481106102b6576102b56105e8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008080549050905090565b50805460008255906000526020600020908101906103109190610313565b50565b5b8082111561032c576000816000905550600101610314565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061037561037061036b84610330565b610350565b610330565b9050919050565b60006103878261035a565b9050919050565b60006103998261037c565b9050919050565b6103a98161038e565b82525050565b60006020820190506103c460008301846103a0565b92915050565b6000819050919050565b6103dd816103ca565b82525050565b60006020820190506103f860008301846103d4565b92915050565b600080fd5b600061040e82610330565b9050919050565b600061042082610403565b9050919050565b61043081610415565b811461043b57600080fd5b50565b60008135905061044d81610427565b92915050565b600060208284031215610469576104686103fe565b5b60006104778482850161043e565b91505092915050565b610489816103ca565b811461049457600080fd5b50565b6000813590506104a681610480565b92915050565b6000602082840312156104c2576104c16103fe565b5b60006104d084828501610497565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600082825260208201905092915050565b7f537461636b3a20737461636b20697320656d7074790000000000000000000000600082015250565b600061054f601583610508565b915061055a82610519565b602082019050919050565b6000602082019050818103600083015261057e81610542565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006105bf826103ca565b91506105ca836103ca565b9250828210156105dd576105dc610585565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212208d855b9828693b1ffd9e395a37ed6af792a42f09caabf66f4b0b44f36f2ddd7764736f6c634300080b0033608060405234801561001057600080fd5b50610afa806100206000396000f3fe608060405234801561001057600080fd5b506004361061006d5760003560e01c806315dae03e1461007257806338cc48311461009057806368895979146100ae5780637fcaf666146100cc57806389ea642f146100e8578063d2282dc514610106578063e30081a014610122575b600080fd5b61007a61013e565b6040516100879190610575565b60405180910390f35b610098610154565b6040516100a591906105d1565b60405180910390f35b6100b66101f1565b6040516100c39190610605565b60405180910390f35b6100e660048036038101906100e1919061077a565b61026f565b005b6100f06102b3565b6040516100fd919061084b565b60405180910390f35b610120600480360381019061011b9190610899565b6103b9565b005b61013c600480360381019061013791906108f2565b6103ed565b005b60008060009054906101000a900460ff16905090565b6000600380811115610169576101686104fe565b5b60008054906101000a900460ff166003811115610189576101886104fe565b5b146101c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c09061096b565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060016003811115610207576102066104fe565b5b60008054906101000a900460ff166003811115610227576102266104fe565b5b14610267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025e906109d7565b60405180910390fd5b600154905090565b806002908051906020019061028592919061045b565b5060026000806101000a81548160ff021916908360038111156102ab576102aa6104fe565b5b021790555050565b6060600260038111156102c9576102c86104fe565b5b60008054906101000a900460ff1660038111156102e9576102e86104fe565b5b14610329576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032090610a43565b60405180910390fd5b6002805461033690610a92565b80601f016020809104026020016040519081016040528092919081815260200182805461036290610a92565b80156103af5780601f10610384576101008083540402835291602001916103af565b820191906000526020600020905b81548152906001019060200180831161039257829003601f168201915b5050505050905090565b8060018190555060016000806101000a81548160ff021916908360038111156103e5576103e46104fe565b5b021790555050565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060036000806101000a81548160ff02191690836003811115610453576104526104fe565b5b021790555050565b82805461046790610a92565b90600052602060002090601f01602090048101928261048957600085556104d0565b82601f106104a257805160ff19168380011785556104d0565b828001600101855582156104d0579182015b828111156104cf5782518255916020019190600101906104b4565b5b5090506104dd91906104e1565b5090565b5b808211156104fa5760008160009055506001016104e2565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811061053e5761053d6104fe565b5b50565b600081905061054f8261052d565b919050565b600061055f82610541565b9050919050565b61056f81610554565b82525050565b600060208201905061058a6000830184610566565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105bb82610590565b9050919050565b6105cb816105b0565b82525050565b60006020820190506105e660008301846105c2565b92915050565b6000819050919050565b6105ff816105ec565b82525050565b600060208201905061061a60008301846105f6565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6106878261063e565b810181811067ffffffffffffffff821117156106a6576106a561064f565b5b80604052505050565b60006106b9610620565b90506106c5828261067e565b919050565b600067ffffffffffffffff8211156106e5576106e461064f565b5b6106ee8261063e565b9050602081019050919050565b82818337600083830152505050565b600061071d610718846106ca565b6106af565b90508281526020810184848401111561073957610738610639565b5b6107448482856106fb565b509392505050565b600082601f83011261076157610760610634565b5b813561077184826020860161070a565b91505092915050565b6000602082840312156107905761078f61062a565b5b600082013567ffffffffffffffff8111156107ae576107ad61062f565b5b6107ba8482850161074c565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156107fd5780820151818401526020810190506107e2565b8381111561080c576000848401525b50505050565b600061081d826107c3565b61082781856107ce565b93506108378185602086016107df565b6108408161063e565b840191505092915050565b600060208201905081810360008301526108658184610812565b905092915050565b610876816105ec565b811461088157600080fd5b50565b6000813590506108938161086d565b92915050565b6000602082840312156108af576108ae61062a565b5b60006108bd84828501610884565b91505092915050565b6108cf816105b0565b81146108da57600080fd5b50565b6000813590506108ec816108c6565b92915050565b6000602082840312156109085761090761062a565b5b6000610916848285016108dd565b91505092915050565b7f537461636b3a20616464726573732074797065206d69736d6174636800000000600082015250565b6000610955601c836107ce565b91506109608261091f565b602082019050919050565b6000602082019050818103600083015261098481610948565b9050919050565b7f537461636b3a2075696e743235362074797065206d69736d6174636800000000600082015250565b60006109c1601c836107ce565b91506109cc8261098b565b602082019050919050565b600060208201905081810360008301526109f0816109b4565b9050919050565b7f537461636b3a20737472696e672074797065206d69736d617463680000000000600082015250565b6000610a2d601b836107ce565b9150610a38826109f7565b602082019050919050565b60006020820190508181036000830152610a5c81610a20565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610aaa57607f821691505b60208210811415610abe57610abd610a63565b5b5091905056fea26469706673582212206f7e44c6c3d5f33dc4119792a63c169b71c195058067670cc10d0e01ede3b25664736f6c634300080b0033a2646970667358221220b54436c3300fa63a5cb5413357883890361b5ed8d579e03929d5dd807497ab1964736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101795760003560e01c80637d4bb2ec116100d9578063dff9ffc411610087578063dff9ffc41461035e578063e4bd0c0714610368578063ea80bd5514610384578063efedfec01461038e578063f71c692a146103aa578063f9d1d3a2146103b4578063ffaeef8d146103e457610179565b80637d4bb2ec146102ba57806394aef8e1146102c4578063b2dced0b146102e2578063be1d1211146102fe578063c35e0ec814610308578063cf7f7ff414610338578063d261d8631461034257610179565b80633635664611610136578063363566461461021657806346b0a4f0146102205780634a6cc8a61461022a5780635141108114610246578063548e07c5146102765780635981f3db1461028057806360fad1ed146102b057610179565b806306a8f6c51461017e578063072fa70b1461019a5780630b91bffc146101a457806316295b1c146101ae5780632d423a6c146101de578063357bf0fb146101fa575b600080fd5b61019860048036038101906101939190611f45565b6103ee565b005b6101a2610405565b005b6101ac610417565b005b6101c860048036038101906101c39190611f85565b610564565b6040516101d59190611fc1565b60405180910390f35b6101f860048036038101906101f39190611fdc565b610576565b005b610214600480360381019061020f919061208c565b61058d565b005b61021e6105d7565b005b6102286105f1565b005b610244600480360381019061023f919061208c565b610603565b005b610260600480360381019061025b9190611f85565b610655565b60405161026d91906120c8565b60405180910390f35b61027e610667565b005b61029a60048036038101906102959190612229565b610681565b6040516102a7919061228b565b60405180910390f35b6102b86106af565b005b6102c26106c1565b005b6102cc6107ea565b6040516102d99190612305565b60405180910390f35b6102fc60048036038101906102f7919061234c565b61080e565b005b610306610825565b005b610322600480360381019061031d9190611f85565b610a2f565b60405161032f919061228b565b60405180910390f35b610340610a41565b005b61035c6004803603810190610357919061238c565b610ab8565b005b610366610b6f565b005b610382600480360381019061037d919061208c565b610b91565b005b61038c610c84565b005b6103a860048036038101906103a39190612414565b610c96565b005b6103b2610cad565b005b6103ce60048036038101906103c99190611f85565b610d24565b6040516103db9190612463565b60405180910390f35b6103ec610d36565b005b6104018183610d5890919063ffffffff16565b5050565b61040d610d5f565b610415610417565b565b6000610421610dc7565b805461042c906124ad565b80601f0160208091040260200160405190810160405280929190818152602001828054610458906124ad565b80156104a55780601f1061047a576101008083540402835291602001916104a5565b820191906000526020600020905b81548152906001019060200180831161048857829003601f168201915b505050505073__$2641d0e8ea942d61d4fa904ca538dff49f$__6370121b7190916040518263ffffffff1660e01b81526004016104e29190612567565b602060405180830381865af41580156104ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610523919061259e565b905060018160001b60405160200161053c92919061268b565b60405160208183030381529060405260019080519060200190610560929190611c96565b5050565b600061056f82610e02565b9050919050565b6105898183610e0d90919063ffffffff16565b5050565b6105cc816040518060400160405280600981526020017f6c6f61644c6f63616c0000000000000000000000000000000000000000000000815250610e14565b6105d4610d5f565b50565b6105df610d5f565b6105e7610d5f565b6105ef610d5f565b565b6105f9610d5f565b6106016106c1565b565b610642816040518060400160405280600a81526020017f6c6f616452656d6f746500000000000000000000000000000000000000000000815250610e14565b61064a610d5f565b610652610ed3565b50565b60006106608261101c565b9050919050565b61066f610d5f565b610677610d5f565b61067f610417565b565b6004818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6106b7610d5f565b6106bf610d5f565b565b600061079b6040518060400160405280600481526020017f7472756500000000000000000000000000000000000000000000000000000000815250610704610dc7565b805461070f906124ad565b80601f016020809104026020016040519081016040528092919081815260200182805461073b906124ad565b80156107885780601f1061075d57610100808354040283529160200191610788565b820191906000526020600020905b81548152906001019060200180831161076b57829003601f168201915b505050505061102790919063ffffffff16565b6107a65760006107a9565b60015b60f81b90506001816040516020016107c2929190612700565b604051602081830303815290604052600190805190602001906107e6929190611c96565b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610821818361108090919063ffffffff16565b5050565b600061082f610dc7565b805461083a906124ad565b80601f0160208091040260200160405190810160405280929190818152602001828054610866906124ad565b80156108b35780601f10610888576101008083540402835291602001916108b3565b820191906000526020600020905b81548152906001019060200180831161089657829003601f168201915b5050505050905060006108c4610dc7565b80546108cf906124ad565b80601f01602080910402602001604051908101604052809291908181526020018280546108fb906124ad565b80156109485780601f1061091d57610100808354040283529160200191610948565b820191906000526020600020905b81548152906001019060200180831161092b57829003601f168201915b505050505090506001805461095c906124ad565b905060048360405161096e9190612764565b9081526020016040518091039020819055506001600060f01b6040516020016109989291906127c8565b604051602081830303815290604052600190805190602001906109bc929190611c96565b50600180546109ca906124ad565b90506004826040516109dc9190612764565b9081526020016040518091039020819055506001600060f01b604051602001610a069291906127c8565b60405160208183030381529060405260019080519060200190610a2a929190611c96565b505050565b6000610a3a82611087565b9050919050565b60018054610a4e906124ad565b90506004610a5a610dc7565b604051610a679190612884565b9081526020016040518091039020819055506001600060f01b604051602001610a919291906127c8565b60405160208183030381529060405260019080519060200190610ab5929190611c96565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630411de8884846040518363ffffffff1660e01b8152600401610b169291906128e5565b6000604051808303816000875af1158015610b35573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b5e9190612a6b565b9050610b6a8382611092565b505050565b610b77610d5f565b610b7f610d5f565b610b87610d5f565b610b8f610417565b565b610c7981600260035481548110610bab57610baa612ab4565b5b906000526020600020018054610bc0906124ad565b80601f0160208091040260200160405190810160405280929190818152602001828054610bec906124ad565b8015610c395780601f10610c0e57610100808354040283529160200191610c39565b820191906000526020600020905b815481529060010190602001808311610c1c57829003601f168201915b50505050506040518060400160405280600781526020017f75696e7432353600000000000000000000000000000000000000000000000000815250611287565b610c81610d5f565b50565b610c8c610d5f565b610c94610417565b565b610ca9818361148090919063ffffffff16565b5050565b60018054610cba906124ad565b90506004610cc6610dc7565b604051610cd39190612884565b9081526020016040518091039020819055506001600060f01b604051602001610cfd9291906127c8565b60405160208183030381529060405260019080519060200190610d21929190611c96565b50565b6000610d2f82611487565b9050919050565b610d3e610d5f565b610d46610d5f565b610d4e610d5f565b610d56610d5f565b565b8082555050565b6001610d69610dc7565b604051602001610d799190612884565b60405160208183030381529060405280519060200120604051602001610da0929190612b30565b60405160208183030381529060405260019080519060200190610dc4929190611c96565b50565b6000600260036000815480929190610dde90612b87565b9190505581548110610df357610df2612ab4565b5b90600052602060002001905090565b600081549050919050565b8082555050565b60018273ffffffffffffffffffffffffffffffffffffffff16635bf3e5d783610e3b610dc7565b6040518363ffffffff1660e01b8152600401610e58929190612c50565b602060405180830381865afa158015610e75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e999190612cb3565b604051602001610eaa929190612700565b60405160208183030381529060405260019080519060200190610ece929190611c96565b505050565b6001610edd610dc7565b8054610ee8906124ad565b80601f0160208091040260200160405190810160405280929190818152602001828054610f14906124ad565b8015610f615780601f10610f3657610100808354040283529160200191610f61565b820191906000526020600020905b815481529060010190602001808311610f4457829003601f168201915b505050505073__$2641d0e8ea942d61d4fa904ca538dff49f$__638e7e34d790916040518263ffffffff1660e01b8152600401610f9e9190612567565b600060405180830381865af4158015610fbb573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610fe49190612d81565b604051602001610ff5929190612e06565b60405160208183030381529060405260019080519060200190611019929190611c96565b50565b600081549050919050565b60008160405160200161103a9190612764565b60405160208183030381529060405280519060200120836040516020016110619190612764565b6040516020818303038152906040528051906020012014905092915050565b8082555050565b600081549050919050565b600160006110a09190611d1c565b600060038190555080600290805190602001906110be929190611d5c565b508173ffffffffffffffffffffffffffffffffffffffff1663f26c917860006040518263ffffffff1660e01b81526004016110f99190612e65565b600060405180830381600087803b15801561111357600080fd5b505af1158015611127573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663138ef1516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611176573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119a9190612ebe565b73ffffffffffffffffffffffffffffffffffffffff166352efea6e6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156111e157600080fd5b505af11580156111f5573d6000803e3d6000fd5b505050505b60028054905060035410156112175761121282611492565b6111fa565b8173ffffffffffffffffffffffffffffffffffffffff1663bcf80c9d60016040518263ffffffff1660e01b81526004016112519190612f7c565b600060405180830381600087803b15801561126b57600080fd5b505af115801561127f573d6000803e3d6000fd5b505050505050565b60016005836040516112999190612764565b908152602001604051809103902060006101000a81548160ff02191690831515021790555060006040518060400160405280600981526020017f6c6f61644c6f63616c0000000000000000000000000000000000000000000000815250905060008360405160200161130b9190612764565b60405160208183030381529060405280519060200120905060008573ffffffffffffffffffffffffffffffffffffffff1663f3f8d4e3846040518263ffffffff1660e01b815260040161135e9190612f9e565b602060405180830381865afa15801561137b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139f9190612cb3565b905060008673ffffffffffffffffffffffffffffffffffffffff16635bf3e5d785876040518363ffffffff1660e01b81526004016113de929190612fc0565b602060405180830381865afa1580156113fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141f9190612cb3565b905081818460405160200161143693929190612ff7565b6040516020818303038152906040526006876040516114559190612764565b90815260200160405180910390209080519060200190611476929190611c96565b5050505050505050565b8082555050565b600081549050919050565b600061149c610dc7565b905060008273ffffffffffffffffffffffffffffffffffffffff1663f3f8d4e3836040518263ffffffff1660e01b81526004016114d99190613034565b602060405180830381865afa1580156114f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151a9190612cb3565b9050600060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415806115df57506115de82805461155b906124ad565b80601f0160208091040260200160405190810160405280929190818152602001828054611587906124ad565b80156115d45780601f106115a9576101008083540402835291602001916115d4565b820191906000526020600020905b8154815290600101906020018083116115b757829003601f168201915b5050505050611c6c565b5b8061161257506005826040516115f59190612884565b908152602001604051809103902060009054906101000a900460ff165b8260405160200161162391906130ee565b60405160208183030381529060405290611673576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166a9190612f9e565b60405180910390fd5b506005826040516116849190612884565b908152602001604051809103902060009054906101000a900460ff16156117005760016006836040516116b79190612884565b90815260200160405180910390206040516020016116d692919061311b565b604051602081830303815290604052600190805190602001906116fa929190611c96565b50611c67565b61179282805461170f906124ad565b80601f016020809104026020016040519081016040528092919081815260200182805461173b906124ad565b80156117885780601f1061175d57610100808354040283529160200191611788565b820191906000526020600020905b81548152906001019060200180831161176b57829003601f168201915b5050505050611c6c565b15611a68576000600180546117a6906124ad565b905090506000600180546117b9906124ad565b80601f01602080910402602001604051908101604052809291908181526020018280546117e5906124ad565b80156118325780601f1061180757610100808354040283529160200191611832565b820191906000526020600020905b81548152906001019060200180831161181557829003601f168201915b505050505073__$54268a2ccf5b28930bb1a8a55944723b0b$__63e0041396909160006004886040516118659190612884565b9081526020016040518091039020546040518463ffffffff1660e01b8152600401611892939291906131a7565b600060405180830381865af41580156118af573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906118d89190612d81565b90506000600180546118e9906124ad565b80601f0160208091040260200160405190810160405280929190818152602001828054611915906124ad565b80156119625780601f1061193757610100808354040283529160200191611962565b820191906000526020600020905b81548152906001019060200180831161194557829003601f168201915b505050505073__$54268a2ccf5b28930bb1a8a55944723b0b$",
  "abi": [
    { "inputs": [], "stateMutability": "nonpayable", "type": "constructor" },
    {
      "anonymous": false,
      "inputs": [{ "indexed": false, "internalType": "bool", "name": "result", "type": "bool" }],
      "name": "ExecRes",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        { "indexed": false, "internalType": "address", "name": "txObj", "type": "address" }
      ],
      "name": "NewConditionalTx",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "asmBalanceOf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asmBool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asmFunc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asmIf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asmIfelse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "contract IContext", "name": "_ctx", "type": "address" }],
      "name": "asmLoadLocal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "contract IContext", "name": "_ctx", "type": "address" }],
      "name": "asmLoadRemote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asmSend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asmSetLocalBool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asmSetLocalUint256",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "contract IContext", "name": "_ctx", "type": "address" }],
      "name": "asmSetUint256",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asmTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asmTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asmTransferFromVar",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asmTransferVar",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asmUint256",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "bytes32", "name": "position", "type": "bytes32" }],
      "name": "getStorageAddress",
      "outputs": [{ "internalType": "address", "name": "data", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "bytes32", "name": "position", "type": "bytes32" }],
      "name": "getStorageBool",
      "outputs": [{ "internalType": "bool", "name": "data", "type": "bool" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "bytes32", "name": "position", "type": "bytes32" }],
      "name": "getStorageBytes32",
      "outputs": [{ "internalType": "bytes32", "name": "data", "type": "bytes32" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "bytes32", "name": "position", "type": "bytes32" }],
      "name": "getStorageUint256",
      "outputs": [{ "internalType": "uint256", "name": "data", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [{ "internalType": "string", "name": "", "type": "string" }],
      "name": "labelPos",
      "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "address", "name": "_ctxAddr", "type": "address" },
        { "internalType": "string", "name": "_codeRaw", "type": "string" }
      ],
      "name": "parse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "preprocessor",
      "outputs": [{ "internalType": "contract Preprocessor", "name": "", "type": "address" }],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "bytes32", "name": "position", "type": "bytes32" },
        { "internalType": "address", "name": "data", "type": "address" }
      ],
      "name": "setStorageAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "bytes32", "name": "position", "type": "bytes32" },
        { "internalType": "bool", "name": "data", "type": "bool" }
      ],
      "name": "setStorageBool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "bytes32", "name": "position", "type": "bytes32" },
        { "internalType": "bytes32", "name": "data", "type": "bytes32" }
      ],
      "name": "setStorageBytes32",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        { "internalType": "bytes32", "name": "position", "type": "bytes32" },
        { "internalType": "uint256", "name": "data", "type": "uint256" }
      ],
      "name": "setStorageUint256",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ]
}
