{"metadata":"{\"compiler\":{\"version\":\"0.8.11\"},\"sources\":{\"contracts/dsl/Parser.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from './interfaces/IERC20.sol';\\nimport { IContext } from './interfaces/IContext.sol';\\nimport { IParser } from './interfaces/IParser.sol';\\nimport { StringUtils } from './libs/StringUtils.sol';\\nimport { ByteUtils } from './libs/ByteUtils.sol';\\nimport { Storage } from './helpers/Storage.sol';\\nimport { Preprocessor } from './Preprocessor.sol';\\n\\n// import 'hardhat/console.sol';\\n\\ncontract Parser is IParser, Storage {\\n    using StringUtils for string;\\n    using ByteUtils for bytes;\\n\\n    Preprocessor public preprocessor;\\n\\n    bytes internal program;\\n    string[] internal cmds;\\n    uint256 internal cmdIdx;\\n\\n    mapping(string => uint256) public labelPos;\\n\\n    constructor() {\\n        preprocessor = new Preprocessor();\\n    }\\n\\n    function parse(IContext _ctx, string memory _codeRaw) external {\\n        string[] memory _code = preprocessor.transform(_ctx, _codeRaw);\\n        parseCode(_ctx, _code);\\n    }\\n\\n    /**\\n     * Asm functions\\n     */\\n\\n    function asmSetLocalBool() public {\\n        parseVariable();\\n        asmBool();\\n    }\\n\\n    // setLocalUint256 VARNAME 12345\\n    function asmSetLocalUint256() public {\\n        parseVariable();\\n        asmUint256();\\n    }\\n\\n    // (uint256 5 + uint256 7) setUint256 VARNAME\\n    function asmSetUint256() public {\\n        parseVariable();\\n    }\\n\\n    function asmLoadLocal(IContext _ctx) public {\\n        parseBranchOf(_ctx, 'loadLocal');\\n        parseVariable();\\n    }\\n\\n    function asmLoadRemote(IContext _ctx) public {\\n        parseBranchOf(_ctx, 'loadRemote');\\n        parseVariable();\\n        parseAddress();\\n    }\\n\\n    function asmBool() public {\\n        bytes1 value = bytes1(nextCmd().equal('true') ? 0x01 : 0x00);\\n        program = bytes.concat(program, value);\\n    }\\n\\n    function asmUint256() public {\\n        uint256 value = nextCmd().toUint256();\\n        program = bytes.concat(program, bytes32(value));\\n    }\\n\\n    function asmSend() public {\\n        parseVariable();\\n        asmUint256();\\n    }\\n\\n    function asmTransfer() public {\\n        parseVariable(); // token address\\n        parseVariable(); // receiver\\n        asmUint256(); // amount\\n    }\\n\\n    function asmTransferVar() public {\\n        parseVariable(); // token address\\n        parseVariable(); // receiver\\n        parseVariable(); // amount\\n    }\\n\\n    function asmTransferFrom() public {\\n        parseVariable(); // token address\\n        parseVariable(); // from\\n        parseVariable(); // to\\n        asmUint256(); // amount\\n    }\\n\\n    function asmTransferFromVar() public {\\n        parseVariable(); // token address\\n        parseVariable(); // from\\n        parseVariable(); // to\\n        parseVariable(); // amount\\n    }\\n\\n    function asmBalanceOf() public {\\n        parseVariable(); // token address\\n        parseVariable(); // user address\\n    }\\n\\n    function asmIfelse() public {\\n        string memory _true = nextCmd(); // \\\"positive\\\" branch name\\n        string memory _false = nextCmd(); // \\\"negative\\\" branch name\\n\\n        labelPos[_true] = program.length; // `positive` branch position\\n        program = bytes.concat(program, bytes2(0)); // placeholder for `positive` branch offset\\n\\n        labelPos[_false] = program.length; // `negative` branch position\\n        program = bytes.concat(program, bytes2(0)); // placeholder for `negative` branch offset\\n    }\\n\\n    function asmIf() public {\\n        labelPos[nextCmd()] = program.length; // `true` branch position\\n        program = bytes.concat(program, bytes2(0)); // placeholder for `true` branch offset\\n    }\\n\\n    function asmFunc() public {\\n        labelPos[nextCmd()] = program.length; // `true` branch position\\n        program = bytes.concat(program, bytes2(0)); // placeholder for `true` branch offset\\n    }\\n\\n    /**\\n     * Internal functions\\n     */\\n\\n    function isLabel(string memory _name) internal view returns (bool) {\\n        return (labelPos[_name] > 0);\\n    }\\n\\n    function parseCode(IContext _ctx, string[] memory code) internal {\\n        delete program;\\n        cmdIdx = 0;\\n        cmds = code;\\n        _ctx.setPc(0);\\n        _ctx.stack().clear();\\n\\n        while (cmdIdx < cmds.length) {\\n            parseOpcodeWithParams(_ctx);\\n        }\\n\\n        // console.logBytes(program);\\n        _ctx.setProgram(program);\\n    }\\n\\n    function parseOpcodeWithParams(IContext _ctx) internal {\\n        string storage cmd = nextCmd();\\n        bytes1 opcode = _ctx.opCodeByName(cmd);\\n        require(\\n            opcode != 0x0 || isLabel(cmd),\\n            string(abi.encodePacked('Parser: \\\"', cmd, '\\\" command is unknown'))\\n        );\\n        if (isLabel(cmd)) {\\n            uint256 _branchLocation = program.length;\\n            bytes memory programBefore = program.slice(0, labelPos[cmd]);\\n            bytes memory programAfter = program.slice(labelPos[cmd] + 2, program.length);\\n            program = bytes.concat(programBefore, bytes2(uint16(_branchLocation)), programAfter);\\n        } else {\\n            program = bytes.concat(program, opcode);\\n\\n            bytes4 _selector = _ctx.asmSelectors(cmd);\\n            if (_selector != 0x0) {\\n                (bool success, ) = address(this).delegatecall(\\n                    abi.encodeWithSelector(_selector, _ctx)\\n                );\\n                require(success, 'Parser: delegatecall to asmSelector failed');\\n            }\\n        }\\n        // if no selector then opcode without params\\n    }\\n\\n    function nextCmd() internal returns (string storage) {\\n        return cmds[cmdIdx++];\\n    }\\n\\n    function parseVariable() internal {\\n        program = bytes.concat(program, bytes4(keccak256(abi.encodePacked(nextCmd()))));\\n    }\\n\\n    function parseBranchOf(IContext _ctx, string memory baseOpName) internal {\\n        program = bytes.concat(program, _ctx.branchCodes(baseOpName, nextCmd()));\\n    }\\n\\n    function parseAddress() internal {\\n        program = bytes.concat(program, nextCmd().fromHex());\\n    }\\n}\\n\"},\"contracts/dsl/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"contracts/dsl/helpers/Stack.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ncontract StackValue {\\n    enum StackType {\\n        // NONE in an OpSpec shows that the op pops or yields nothing\\n        NONE,\\n        // UINT256 in an OpSpec shows that the op pops or yields a uint256\\n        UINT256,\\n        STRING,\\n        ADDRESS\\n    }\\n\\n    StackType private _type;\\n\\n    uint256 private _uint256;\\n    string private _string;\\n    address private _address;\\n\\n    function getUint256() public view returns (uint256) {\\n        require(_type == StackType.UINT256, 'Stack: uint256 type mismatch');\\n        return _uint256;\\n    }\\n\\n    function setUint256(uint256 value) public {\\n        _uint256 = value;\\n        _type = StackType.UINT256;\\n    }\\n\\n    function getString() public view returns (string memory) {\\n        require(_type == StackType.STRING, 'Stack: string type mismatch');\\n        return _string;\\n    }\\n\\n    function setString(string memory value) public {\\n        _string = value;\\n        _type = StackType.STRING;\\n    }\\n\\n    function getAddress() public view returns (address) {\\n        require(_type == StackType.ADDRESS, 'Stack: address type mismatch');\\n        return _address;\\n    }\\n\\n    function setAddress(address _addr) public {\\n        _address = _addr;\\n        _type = StackType.ADDRESS;\\n    }\\n\\n    function getType() public view returns (StackType) {\\n        return _type;\\n    }\\n}\\n\\ncontract Stack {\\n    StackValue[] public stack;\\n\\n    function length() external view returns (uint256) {\\n        return _length();\\n    }\\n\\n    function seeLast() external view returns (StackValue) {\\n        return _seeLast();\\n    }\\n\\n    function push(StackValue data) external {\\n        stack.push(data);\\n    }\\n\\n    function pop() external returns (StackValue) {\\n        StackValue data = _seeLast();\\n        stack.pop();\\n\\n        return data;\\n    }\\n\\n    function clear() external {\\n        delete stack;\\n    }\\n\\n    function _length() internal view returns (uint256) {\\n        return stack.length;\\n    }\\n\\n    function _seeLast() internal view returns (StackValue) {\\n        require(_length() > 0, 'Stack: stack is empty');\\n        return stack[_length() - 1];\\n    }\\n}\\n\"},\"contracts/dsl/interfaces/IContext.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport '../helpers/Stack.sol';\\n\\ninterface IContext {\\n    enum OpcodeLibNames {\\n        ComparatorOpcodes,\\n        LogicalOpcodes,\\n        SetOpcodes,\\n        OtherOpcodes\\n    }\\n\\n    // Variables\\n    function stack() external view returns (Stack);\\n\\n    function program() external view returns (bytes memory);\\n\\n    function pc() external view returns (uint256);\\n\\n    function nextpc() external view returns (uint256);\\n\\n    function appAddress() external view returns (address);\\n\\n    function msgSender() external view returns (address);\\n\\n    function comparatorOpcodes() external view returns (address);\\n\\n    function logicalOpcodes() external view returns (address);\\n\\n    function setOpcodes() external view returns (address);\\n\\n    function otherOpcodes() external view returns (address);\\n\\n    function msgValue() external view returns (uint256);\\n\\n    function opCodeByName(string memory _name) external view returns (bytes1 _opcode);\\n\\n    function selectorByOpcode(bytes1 _opcode) external view returns (bytes4 _selecotor);\\n\\n    function opcodeLibNameByOpcode(bytes1 _opcode) external view returns (OpcodeLibNames _name);\\n\\n    function asmSelectors(string memory _name) external view returns (bytes4 _selecotor);\\n\\n    function opsPriors(string memory _name) external view returns (uint256 _priority);\\n\\n    function operators(uint256 _index) external view returns (string memory _operator);\\n\\n    function branchSelectors(string memory _baseOpName, bytes1 _branchCode)\\n        external\\n        view\\n        returns (bytes4 _selector);\\n\\n    function branchCodes(string memory _baseOpName, string memory _branchName)\\n        external\\n        view\\n        returns (bytes1 _branchCode);\\n\\n    function aliases(string memory _alias) external view returns (string memory _baseCmd);\\n\\n    // Functions\\n\\n    function initOpcodes() external;\\n\\n    function operatorsLen() external view returns (uint256);\\n\\n    function setComparatorOpcodesAddr(address _opcodes) external;\\n\\n    function setLogicalOpcodesAddr(address _opcodes) external;\\n\\n    function setSetOpcodesAddr(address _opcodes) external;\\n\\n    function setOtherOpcodesAddr(address _opcodes) external;\\n\\n    // function addOpcode(\\n    //     string memory _name,\\n    //     bytes1 _opcode,\\n    //     bytes4 _opSelector,\\n    //     bytes4 _asmSelector,\\n    //     OpcodeLibNames _libName\\n    // ) external;\\n\\n    // function addOpcodeForOperator(\\n    //     string memory _name,\\n    //     bytes1 _opcode,\\n    //     bytes4 _opSelector,\\n    //     bytes4 _asmSelector,\\n    //     OpcodeLibNames _libName,\\n    //     uint256 _priority\\n    // ) external;\\n\\n    // function addOpcodeBranch(\\n    //     string memory _baseOpName,\\n    //     string memory _branchName,\\n    //     bytes1 _branchCode,\\n    //     bytes4 _selector\\n    // ) external;\\n\\n    function setProgram(bytes memory _data) external;\\n\\n    function programAt(uint256 _index, uint256 _step) external view returns (bytes memory);\\n\\n    function programSlice(\\n        bytes calldata _payload,\\n        uint256 _index,\\n        uint256 _step\\n    ) external pure returns (bytes memory);\\n\\n    function setPc(uint256 _pc) external;\\n\\n    function setNextPc(uint256 _nextpc) external;\\n\\n    function incPc(uint256 _val) external;\\n\\n    function setAppAddress(address _addr) external;\\n\\n    function setMsgSender(address _msgSender) external;\\n\\n    function setMsgValue(uint256 _msgValue) external;\\n}\\n\"},\"contracts/dsl/libs/StringUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nlibrary StringUtils {\\n    function char(string memory s, uint256 index) public pure returns (string memory) {\\n        require(index < length(s), 'String: index out of range');\\n        bytes memory sBytes = new bytes(1);\\n        sBytes[0] = bytes(s)[index];\\n        return string(sBytes);\\n    }\\n\\n    function equal(string memory s1, string memory s2) internal pure returns (bool) {\\n        return keccak256(abi.encodePacked(s1)) == keccak256(abi.encodePacked(s2));\\n    }\\n\\n    function length(string memory s) internal pure returns (uint256) {\\n        return bytes(s).length;\\n    }\\n\\n    function concat(string memory s1, string memory s2) internal pure returns (string memory) {\\n        // TODO: check collisions in the hash value\\n        // https://docs.soliditylang.org/en/v0.8.13/abi-spec.html#non-standard-packed-mode\\n        return string(abi.encodePacked(s1, s2));\\n    }\\n\\n    // Convert an hexadecimal string (without \\\"0x\\\" prefix) to raw bytes\\n    // TODO: check if the string is empty\\n    function fromHex(string memory s) public pure returns (bytes memory) {\\n        bytes memory ss = bytes(s);\\n        require(ss.length % 2 == 0, 'String: hex lenght not even'); // length must be even\\n        bytes memory r = new bytes(ss.length / 2);\\n        for (uint256 i = 0; i < ss.length / 2; ++i) {\\n            r[i] = bytes1(fromHexChar(ss[2 * i]) * 16 + fromHexChar(ss[2 * i + 1]));\\n        }\\n        return r;\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return '0';\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    // string decimal number to uint256\\n    function toUint256(string memory s) public pure returns (uint256 value) {\\n        bytes memory b = bytes(s);\\n        uint256 tmp;\\n        for (uint256 i = 0; i < b.length; i++) {\\n            tmp = uint8(b[i]);\\n            require(tmp >= 0x30 && tmp <= 0x39, 'String: non-decimal character');\\n            value = value * 10 + (tmp - 0x30); // 0x30 ascii is '0'\\n        }\\n    }\\n\\n    // Convert an hexadecimal character to their value\\n    function fromHexChar(bytes1 c) public pure returns (uint8 result) {\\n        if (c >= bytes1('0') && c <= bytes1('9')) {\\n            result = uint8(c) - uint8(bytes1('0'));\\n        }\\n        if (c >= bytes1('a') && c <= bytes1('f')) {\\n            result = 10 + uint8(c) - uint8(bytes1('a'));\\n        }\\n        if (c >= bytes1('A') && c <= bytes1('F')) {\\n            result = 10 + uint8(c) - uint8(bytes1('A'));\\n        }\\n        // TODO: check that returns 0\\n    }\\n}\\n\"},\"contracts/dsl/Preprocessor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport { IContext } from './interfaces/IContext.sol';\\nimport { Stack, StackValue } from './helpers/Stack.sol';\\nimport { StringUtils } from './libs/StringUtils.sol';\\n\\n// import 'hardhat/console.sol';\\n\\ncontract Preprocessor {\\n    using StringUtils for string;\\n    struct FuncParameter {\\n        string _type;\\n        string nameOfVariable;\\n        string value;\\n    }\\n    mapping(uint256 => FuncParameter) parameters;\\n    string[] internal result;\\n\\n    function transform(IContext _ctx, string memory _program) external returns (string[] memory) {\\n        Stack stack = new Stack();\\n        string[] memory code = split(_program);\\n        return infixToPostfix(_ctx, code, stack);\\n    }\\n\\n    /**\\n     * @dev Searches the comments in the program and removes comment lines\\n     * @param _program is a current program string\\n     * @return _cleanedProgram new string program that contains only clean code without comments\\n     */\\n    function cleanString(string memory _program)\\n        public\\n        pure\\n        returns (string memory _cleanedProgram)\\n    {\\n        bool isCommented;\\n\\n        // searchedSymbolLen is a flag that uses for searching a correct end symbol\\n        uint256 searchedSymbolLen; // 1 - search \\\\n symbol, 2 - search */ symbol\\n        uint256 tempIndex; // uses for checking if the index was changed\\n        uint256 i;\\n        string memory char;\\n\\n        while (i < _program.length()) {\\n            char = _program.char(i);\\n            tempIndex = i;\\n            if (isCommented) {\\n                (tempIndex, isCommented) = _getEndCommentSymbol(\\n                    searchedSymbolLen,\\n                    i,\\n                    _program,\\n                    char\\n                );\\n            } else {\\n                (searchedSymbolLen, tempIndex, isCommented) = _getCommentSymbol(i, _program, char);\\n            }\\n\\n            if (tempIndex > i) {\\n                i = tempIndex;\\n                continue;\\n            }\\n\\n            if (isCommented) {\\n                i += 1;\\n                continue;\\n            }\\n\\n            _cleanedProgram = _cleanedProgram.concat(char);\\n            i += 1;\\n        }\\n    }\\n\\n    function split(string memory _program) public returns (string[] memory) {\\n        delete result;\\n        string memory buffer;\\n\\n        // console.log(\\\"program len: %s\\\", program.length());\\n        for (uint256 i = 0; i < _program.length(); i++) {\\n            string memory char = _program.char(i);\\n\\n            // if-else conditions parsing\\n            if (char.equal('{')) continue;\\n            if (char.equal('}')) {\\n                result.push('end');\\n                continue;\\n            }\\n\\n            // console.log(\\\"char: %s\\\", char);\\n            if (char.equal(' ') || char.equal('\\\\n') || char.equal('(') || char.equal(')')) {\\n                if (buffer.length() > 0) {\\n                    result.push(buffer);\\n                    buffer = '';\\n                }\\n            } else {\\n                buffer = buffer.concat(char);\\n            }\\n\\n            if (char.equal('(') || char.equal(')')) {\\n                result.push(char);\\n            }\\n        }\\n\\n        if (buffer.length() > 0) {\\n            result.push(buffer);\\n            buffer = '';\\n        }\\n\\n        return result;\\n    }\\n\\n    function infixToPostfix(\\n        IContext _ctx,\\n        string[] memory _code,\\n        Stack _stack\\n    ) public returns (string[] memory) {\\n        delete result;\\n        bool isFunc;\\n        bool isName;\\n        bool loadRemoteFlag;\\n        bool directUseUint256;\\n        uint256 loadRemoteVarCount = 3;\\n        string memory chunk;\\n        string memory name;\\n\\n        for (uint256 i = 0; i < _code.length; i++) {\\n            chunk = _code[i];\\n\\n            // returns true if the chunk can use uint256 directly\\n            directUseUint256 = _isDirectUseUint256(directUseUint256, chunk);\\n            // checks and updates if the chunk can use uint256 or it's loadRemote opcode\\n            (loadRemoteFlag, loadRemoteVarCount) = _updateRemoteParams(\\n                loadRemoteFlag,\\n                loadRemoteVarCount,\\n                chunk\\n            );\\n\\n            // Replace alises with base commands\\n            if (_isAlias(_ctx, chunk)) {\\n                chunk = _ctx.aliases(chunk);\\n            }\\n\\n            if (_isOperator(_ctx, chunk)) {\\n                // console.log(\\\"%s is an operator\\\", chunk);\\n                while (\\n                    _stack.length() > 0 &&\\n                    _ctx.opsPriors(chunk) <= _ctx.opsPriors(_stack.seeLast().getString())\\n                ) {\\n                    // console.log(\\\"result push:\\\", _stack.seeLast().getString());\\n                    result.push(_stack.pop().getString());\\n                }\\n                _pushStringToStack(_stack, chunk);\\n            } else if (chunk.equal('(')) {\\n                _pushStringToStack(_stack, chunk);\\n            } else if (chunk.equal(')')) {\\n                while (!_stack.seeLast().getString().equal('(')) {\\n                    // console.log(\\\"result push: %s\\\", _stack.seeLast().getString());\\n                    result.push(_stack.pop().getString());\\n                }\\n                _stack.pop(); // remove '(' that is left\\n            } else if (_mayBeNumber(chunk) && !isFunc && !directUseUint256) {\\n                _updateUINT256param(loadRemoteFlag);\\n                result.push(chunk);\\n            } else if (_mayBeNumber(chunk) && !isFunc && directUseUint256) {\\n                directUseUint256 = false;\\n                result.push(chunk);\\n            } else if (chunk.equal('func')) {\\n                // if the chunk is 'func' then `Functions block` will occur\\n                isFunc = true;\\n            } else if (isFunc && !isName) {\\n                // `Functions block` started\\n                // if was not set the name for a function\\n                (isFunc, isName, name) = _parceFuncMainData(chunk, name, isFunc, isName);\\n            } else if (isFunc && isName) {\\n                // `Functions block` finished\\n                // if it was already set the name for a function\\n                isName = false;\\n                isFunc = _parceFuncParams(chunk, name, isFunc);\\n            } else {\\n                result.push(chunk);\\n            }\\n        }\\n\\n        while (_stack.length() > 0) {\\n            // console.log('result push: %s', _stack.seeLast().getString());\\n            result.push(_stack.pop().getString());\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Pushes additional 'uint256' string to results in case, if there are no\\n     * types provided for uint256 values or\\n     * loadRemote command, is not in the processing or\\n     * the last chunk that was added to results is not 'uint256'\\n     * @param _loadRemoteFlag is used to check if it was started the set of parameters for 'loadRemote' opcode\\n     */\\n    function _updateUINT256param(bool _loadRemoteFlag) internal {\\n        if (\\n            result.length == 0 ||\\n            (!(result[result.length - 1].equal('uint256')) && _loadRemoteFlag == false)\\n        ) {\\n            result.push('uint256');\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks parameters and updates DSL code depending on what\\n     * kind of function was provided.\\n     * This internal function expects 'func' that can be with and without parameters.\\n     * @param _chunk is a current chunk from the DSL string code\\n     * @param _currentName is a current name of function\\n     * @param _isFunc describes if the func opcode was occured\\n     */\\n    function _parceFuncParams(\\n        string memory _chunk,\\n        string memory _currentName,\\n        bool _isFunc\\n    ) internal returns (bool) {\\n        if (_chunk.equal('endf')) {\\n            // if the function without parameters\\n            _pushFuncName(_currentName);\\n            return false;\\n        } else {\\n            // if the function with parameters\\n            _rebuildParameters(_chunk.toUint256(), _currentName);\\n            return _isFunc;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns updated parameters for the `func` opcode processing\\n     * Pushes the command that saves parameter in the smart contract instead\\n     * of the parameters that were provided for parsing.\\n     * The function will store the command like `uint256 7 setUint256 NUMBER_VAR` and\\n     * remove the parameter like `uint256 7`.\\n     * The DSL command will be stored before the function body.\\n     * For the moment it works only with uint256 type.\\n     * @param _chunk is a current chunk from the DSL string code\\n     * @param _currentName is a current name of function\\n     * @param _isFunc describes if the func opcode was occured\\n     * @param _isName describes if the name for the function was already set\\n     * @return isFunc the new state of _isFunc for function processing\\n     * @return isName the new state of _isName for function processing\\n     * @return name the new name of the function\\n     */\\n    function _parceFuncMainData(\\n        string memory _chunk,\\n        string memory _currentName,\\n        bool _isFunc,\\n        bool _isName\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool,\\n            bool,\\n            string memory\\n        )\\n    {\\n        if (_chunk.equal('endf')) {\\n            // finish `Functions block` process\\n            // example: `func NAME <number_of_params> endf`\\n            // updates only for: isFunc => false - end of func opcode\\n            return (false, _isName, _currentName);\\n        } else {\\n            // updates only for:\\n            // isName => true - setting the name of function has occurred\\n            // name => current cunk\\n            return (_isFunc, true, _chunk);\\n        }\\n    }\\n\\n    /**\\n     * @dev Rebuilds parameters to DSL commands in result's list.\\n     * Pushes the command that saves parameter in the smart contract instead\\n     * of the parameters that were provided for parsing.\\n     * The function will store the command like `uint256 7 setUint256 NUMBER_VAR` and\\n     * remove the parameter like `uint256 7`.\\n     * The DSL command will be stored before the function body.\\n     * For the moment it works only with uint256 type.\\n     * @param _paramsCount is an amount of parameters that provided after\\n     * the name of function\\n     * @param _nameOfFunc is a name of function that is used to generate\\n     * the name of variables\\n     */\\n    function _rebuildParameters(uint256 _paramsCount, string memory _nameOfFunc) internal {\\n        /* \\n        `chunks` list needs to store parameters temporarly and rewrite dsl string code\\n\\n        `_paramsCount * 2` includes type and value for the parameter\\n\\n        `indexFirst` is an index where the first parameter was pushed to results\\n\\n        For example:\\n        if the function has 6 input parameters then the indexFirst will be set in\\n        the index that shows, where it was the first parameter was stored before\\n        the 'func', was occurred.\\n        */\\n\\n        uint256 _totalParams = _paramsCount * 2;\\n        require(_paramsCount > 0, 'Preprocessor: amount of parameters can not be 0');\\n        string[] memory chunks = new string[](_totalParams);\\n\\n        require(result.length >= _totalParams, 'Preprocessor: invalid parameters for the function');\\n        uint256 indexFirst = result.length - _totalParams;\\n\\n        // store paramerets that were already pushed to results\\n        for (uint256 j = 0; j < _totalParams; j++) {\\n            chunks[j] = result[indexFirst + j];\\n        }\\n\\n        _cleanCode(_totalParams);\\n\\n        for (uint256 j = 0; j < chunks.length; j += 2) {\\n            _saveParameter(j, chunks[j], chunks[j + 1], _nameOfFunc);\\n        }\\n\\n        _pushParameters(_paramsCount);\\n        _pushFuncName(_nameOfFunc);\\n    }\\n\\n    /**\\n     * @dev Pushes parameters to result's list depend on their type for each value\\n     * @param _count is an amount of parameters provided next to the name of func\\n     */\\n    function _pushParameters(uint256 _count) internal {\\n        for (uint256 j = 0; j < _count; j++) {\\n            FuncParameter memory fp = parameters[j + 1];\\n            _rebuildParameter(fp._type, fp.value, fp.nameOfVariable);\\n            // clear mapping data to prevent collisions with values\\n            parameters[j + 1] = FuncParameter('', '0', '');\\n        }\\n    }\\n\\n    /**\\n     * @dev Saves parameters in mapping checking/using valid type for each value\\n     * @param _index is a current chunk index from temporary chunks\\n     * @param _type is a type of the parameter\\n     * @param _value is a value of the parameter\\n     * @param _nameOfFunc is a name of function that is used to generate\\n     * the name of the current variable\\n     */\\n    function _saveParameter(\\n        uint256 _index,\\n        string memory _type,\\n        string memory _value,\\n        string memory _nameOfFunc\\n    ) internal {\\n        FuncParameter storage fp = parameters[_index / 2 + 1];\\n        fp._type = _type;\\n        fp.value = _value;\\n        fp.nameOfVariable = string(\\n            abi.encodePacked(_nameOfFunc, '_', StringUtils.toString(_index / 2 + 1))\\n        );\\n    }\\n\\n    /**\\n     * @dev Clears useless variables from the DSL code string as\\n     * all needed parameters are already stored in chunks list\\n     * @param _count is an amount of parameters provided next\\n     * to the name of func. As parameters are stored with their types,\\n     * the _count variable was already multiplied to 2\\n     */\\n    function _cleanCode(uint256 _count) internal {\\n        for (uint256 j = 0; j < _count; j++) {\\n            result.pop();\\n        }\\n    }\\n\\n    /**\\n     * @dev Preparing and pushes the DSL command to results.\\n     * The comand will save this parameter and its name in the smart contract.\\n     * For example: `uint256 7 setUint256 NUMBER_VAR`\\n     * For the moment it works only with uint256 types.\\n     * @param _type is a type of the parameter\\n     * @param _value is a value of the parameter\\n     * @param _variableName is a name of variable that was generated before\\n     */\\n    function _rebuildParameter(\\n        string memory _type,\\n        string memory _value,\\n        string memory _variableName\\n    ) internal {\\n        // TODO: '_type' - should be used in the future for other types\\n        result.push(_type);\\n        result.push(_value);\\n        // TODO: setUint256 - update for other types in dependence on '_type'\\n        result.push('setUint256');\\n        result.push(_variableName);\\n    }\\n\\n    /**\\n     * @dev Pushes the func opcode and the name of the function\\n     * @param _name is a current name of the function\\n     */\\n    function _pushFuncName(string memory _name) internal {\\n        result.push('func');\\n        result.push(_name);\\n    }\\n\\n    function _pushStringToStack(Stack stack_, string memory value) internal {\\n        StackValue stackValue = new StackValue();\\n        stackValue.setString(value);\\n        stack_.push(stackValue);\\n    }\\n\\n    function _isOperator(IContext _ctx, string memory op) internal view returns (bool) {\\n        for (uint256 i = 0; i < _ctx.operatorsLen(); i++) {\\n            if (op.equal(_ctx.operators(i))) return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Checks if a string is an alias to a command from DSL\\n     */\\n    function _isAlias(IContext _ctx, string memory _cmd) internal view returns (bool) {\\n        return !_ctx.aliases(_cmd).equal('');\\n    }\\n\\n    /**\\n     * @dev Checks if a symbol is a comment, then increases _index to the next\\n     * no-comment symbol avoiding an additional iteration\\n     * @param _index is a current index of a char that might be changed\\n     * @param _program is a current program string\\n     * @return new index\\n     * @return searchedSymbolLen\\n     * @return isCommeted\\n     */\\n    function _getCommentSymbol(\\n        uint256 _index,\\n        string memory _program,\\n        string memory char\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            bool\\n        )\\n    {\\n        if (_canGetSymbol(_index + 1, _program)) {\\n            string memory nextChar = _program.char(_index + 1);\\n            if (char.equal('/') && nextChar.equal('/')) {\\n                return (1, _index + 2, true);\\n            } else if (char.equal('/') && nextChar.equal('*')) {\\n                return (2, _index + 2, true);\\n            }\\n        }\\n        return (0, _index, false);\\n    }\\n\\n    /**\\n     * @dev Checks if a symbol is an end symbol of a comment, then increases _index to the next\\n     * no-comment symbol avoiding an additional iteration\\n     * @param _i is a current index of a char that might be changed\\n     * @param _ssl is a searched symbol len that might be 0, 1, 2\\n     * @param _p is a current program string\\n     * @return index is a new index of a char\\n     * @return isCommeted\\n     */\\n    function _getEndCommentSymbol(\\n        uint256 _ssl,\\n        uint256 _i,\\n        string memory _p,\\n        string memory char\\n    ) internal pure returns (uint256, bool) {\\n        if (_ssl == 1 && char.equal('\\\\n')) {\\n            return (_i + 1, false);\\n        } else if (_ssl == 2 && char.equal('*') && _canGetSymbol(_i + 1, _p)) {\\n            string memory nextChar = _p.char(_i + 1);\\n            if (nextChar.equal('/')) {\\n                return (_i + 2, false);\\n            }\\n        }\\n        return (_i, true);\\n    }\\n\\n    /**\\n     * @dev Checks if it is possible to get next char from a _program\\n     * @param _index is a current index of a char\\n     * @param _program is a current program string\\n     * @return true if program has the next symbol, otherwise is false\\n     */\\n    function _canGetSymbol(uint256 _index, string memory _program) internal pure returns (bool) {\\n        try _program.char(_index) {\\n            return true;\\n        } catch Error(string memory) {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev If the string starts with a number, so we assume that it's a number.\\n     * @param _value is a current chunk\\n     * @return isNumber that is true if the string starts with a number, otherwise is false\\n     */\\n    function _mayBeNumber(string memory _value) internal pure returns (bool isNumber) {\\n        bytes1 _firstByte = bytes(_value)[0];\\n        if (uint8(_firstByte) >= 48 && uint8(_firstByte) <= 57) {\\n            isNumber = true;\\n        }\\n    }\\n\\n    /**\\n     * @dev This function is used to check if 'transferFrom', 'setLocalUint256',\\n     * 'sendEth' and 'transfer' functions(opcodes) won't use 'uint256' opcode during code\\n     * execution directly. So it needs to be sure that executed code won't mess up\\n     * parameters for the simple number and a number that be used for these functions.\\n     * @param _directUseUint256 set by default from the outer function. Allows to keep current state of a contract\\n     * @param _chunk is a current chunk from the outer function\\n     * @return _isDirect is true if a chunk is matched one from the opcode list, otherwise is false\\n     */\\n    function _isDirectUseUint256(bool _directUseUint256, string memory _chunk)\\n        internal\\n        pure\\n        returns (bool _isDirect)\\n    {\\n        _isDirect = _directUseUint256;\\n        if (\\n            _chunk.equal('transferFrom') ||\\n            _chunk.equal('setLocalUint256') ||\\n            _chunk.equal('sendEth') ||\\n            _chunk.equal('transfer')\\n        ) {\\n            _isDirect = true;\\n        }\\n    }\\n\\n    /**\\n     * @dev As a 'loadRemote' opcode has 4 parameters and two of them are\\n     * numbers it is important to be sure that executed code under 'loadRemote'\\n     * won't mess parameters with the simple uint256 numbers.\\n     * @param _loadRemoteFlag is used to check if it was started the set of parameters for 'loadRemote' opcode\\n     * @param _loadRemoteVarCount is used to check if it was finished the set of parameters for 'loadRemote' opcode\\n     * @param _chunk is a current chunk from the outer function\\n     * @return _flag is an updated or current value of _loadRemoteFlag\\n     * @return _count is an updated or current value of _loadRemoteVarCount\\n     */\\n    function _updateRemoteParams(\\n        bool _loadRemoteFlag,\\n        uint256 _loadRemoteVarCount,\\n        string memory _chunk\\n    ) internal pure returns (bool _flag, uint256 _count) {\\n        _count = 3;\\n        _flag = _loadRemoteFlag;\\n\\n        if (_chunk.equal('loadRemote')) {\\n            _flag = true;\\n        }\\n\\n        if (_flag && _loadRemoteVarCount > 0) {\\n            _count = _loadRemoteVarCount - 1;\\n        }\\n        return (_flag, _count);\\n    }\\n}\\n\"},\"contracts/dsl/interfaces/IParser.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport { IContext } from './IContext.sol';\\nimport { Preprocessor } from '../Preprocessor.sol';\\n\\ninterface IParser {\\n    // Variables\\n\\n    function preprocessor() external returns (Preprocessor);\\n\\n    event ExecRes(bool result);\\n    event NewConditionalTx(address txObj);\\n\\n    // Functions\\n\\n    function parse(IContext _ctx, string memory _codeRaw) external;\\n\\n    function asmSetLocalBool() external;\\n\\n    function asmSetLocalUint256() external;\\n\\n    function asmSetUint256() external;\\n\\n    function asmLoadLocal(IContext _ctx) external;\\n\\n    function asmLoadRemote(IContext _ctx) external;\\n\\n    function asmBool() external;\\n\\n    function asmUint256() external;\\n\\n    function asmSend() external;\\n\\n    function asmTransfer() external;\\n\\n    function asmTransferVar() external;\\n\\n    function asmTransferFrom() external;\\n\\n    function asmBalanceOf() external;\\n\\n    function asmTransferFromVar() external;\\n\\n    function asmIfelse() external;\\n\\n    function asmIf() external;\\n\\n    function asmFunc() external;\\n}\\n\"},\"contracts/dsl/libs/ByteUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nlibrary ByteUtils {\\n    function slice(\\n        bytes calldata _data,\\n        uint256 _start,\\n        uint256 _end\\n    ) public pure returns (bytes memory) {\\n        require(_start < _end, \\\"ByteUtils: 'end' index must be greater than 'start'\\\");\\n        require(_end <= _data.length, \\\"ByteUtils: 'end' is greater than the length of the array\\\");\\n        return _data[_start:_end];\\n    }\\n}\\n\"},\"contracts/dsl/interfaces/IStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IStorage {\\n    function getStorageBool(bytes32 position) external view returns (bool data);\\n\\n    function getStorageAddress(bytes32 position) external view returns (address data);\\n\\n    function getStorageBytes32(bytes32 position) external view returns (bytes32 data);\\n\\n    function getStorageUint256(bytes32 position) external view returns (uint256 data);\\n}\\n\"},\"contracts/dsl/libs/UnstructuredStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary UnstructuredStorage {\\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function setStorageBool(bytes32 position, bool data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageAddress(bytes32 position, address data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageUint256(bytes32 position, uint256 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n}\\n\"},\"contracts/dsl/helpers/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport { IStorage } from '../interfaces/IStorage.sol';\\nimport { UnstructuredStorage } from '../libs/UnstructuredStorage.sol';\\n\\n// TODO: make a library\\ncontract Storage is IStorage {\\n    using UnstructuredStorage for bytes32;\\n\\n    function getStorageBool(bytes32 position) public view override returns (bool data) {\\n        return position.getStorageBool();\\n    }\\n\\n    function getStorageAddress(bytes32 position) public view override returns (address data) {\\n        return position.getStorageAddress();\\n    }\\n\\n    function getStorageBytes32(bytes32 position) public view override returns (bytes32 data) {\\n        return position.getStorageBytes32();\\n    }\\n\\n    function getStorageUint256(bytes32 position) public view override returns (uint256 data) {\\n        return position.getStorageUint256();\\n    }\\n\\n    function setStorageBool(bytes32 position, bool data) public {\\n        position.setStorageBool(data);\\n    }\\n\\n    function setStorageAddress(bytes32 position, address data) public {\\n        position.setStorageAddress(data);\\n    }\\n\\n    function setStorageBytes32(bytes32 position, bytes32 data) public {\\n        position.setStorageBytes32(data);\\n    }\\n\\n    function setStorageUint256(bytes32 position, uint256 data) public {\\n        position.setStorageUint256(data);\\n    }\\n}\\n\"}}}","address":"0xB0d6afBF9448c99fCAb26CFE75DA56142802b871","bytecode":"0x608060405234801561001057600080fd5b5060405161001d9061005f565b604051809103906000f080158015610039573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b039290921691909117905561006d565b6135d58062001d0f83390190565b611c92806200007d6000396000f3fe608060405234801561001057600080fd5b50600436106101795760003560e01c80637d4bb2ec116100d9578063d261d86311610087578063d261d863146102be578063dff9ffc4146102d1578063ea80bd5514610192578063efedfec0146101c8578063f71c692a146102b6578063f9d1d3a2146102d9578063ffaeef8d146102e757600080fd5b80637d4bb2ec146102655780638d3ff47c1461026d57806394aef8e114610275578063b2dced0b146102a0578063be1d1211146102ae578063c35e0ec8146101a2578063cf7f7ff4146102b657600080fd5b8063363566461161013657806336356646146101e957806346b0a4f0146101f15780634a6cc8a6146101f9578063514110811461020c578063548e07c51461022a5780635981f3db1461023257806360fad1ed1461025d57600080fd5b806306a8f6c51461017e578063072fa70b146101925780630b91bffc1461019a57806316295b1c146101a25780632d423a6c146101c8578063357bf0fb146101d6575b600080fd5b61019061018c366004611492565b9055565b005b6101906102f3565b610190610305565b6101b56101b03660046114c7565b61044a565b6040519081526020015b60405180910390f35b61019061018c3660046114e0565b6101906101e4366004611517565b61045a565b610190610490565b6101906104a8565b610190610207366004611517565b6104b8565b61021a6101b03660046114c7565b60405190151581526020016101bf565b6101906104f4565b6101b5610240366004611600565b805160208183018101805160048252928201919093012091525481565b610190610498565b6101906104fc565b6101906104a0565b600054610288906001600160a01b031681565b6040516001600160a01b0390911681526020016101bf565b61019061018c36600461163d565b6101906105e4565b6101906107e2565b6101906102cc366004611662565b610850565b6101906108d5565b6102886101b03660046114c7565b6101906108dd565b5050565b6102fb6108e1565b610303610305565b565b600061030f610922565b805461031a906116b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610346906116b2565b80156103935780601f1061036857610100808354040283529160200191610393565b820191906000526020600020905b81548152906001019060200180831161037657829003601f168201915b50506040516370121b7160e01b815273__$2641d0e8ea942d61d4fa904ca538dff49f$__946370121b7194506103ce93509150600401611745565b602060405180830381865af41580156103eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040f9190611758565b6040519091506104269060019083906020016117e0565b604051602081830303815290604052600190805190602001906102ef929190611349565b6000610454825490565b92915050565b61048581604051806040016040528060098152602001681b1bd859131bd8d85b60ba1b81525061095a565b61048d6108e1565b50565b6104986108e1565b6104a06108e1565b6103036108e1565b6104b06108e1565b6103036104fc565b6104e4816040518060400160405280600a8152602001696c6f616452656d6f746560b01b81525061095a565b6104ec6108e1565b61048d6109e3565b6102f36108e1565b60006105bd604051806040016040528060048152602001637472756560e01b815250610526610922565b8054610531906116b2565b80601f016020809104026020016040519081016040528092919081815260200182805461055d906116b2565b80156105aa5780601f1061057f576101008083540402835291602001916105aa565b820191906000526020600020905b81548152906001019060200180831161058d57829003601f168201915b5050505050610b0290919063ffffffff16565b6105c85760006105cb565b60015b60f81b90506001816040516020016104269291906117f9565b60006105ee610922565b80546105f9906116b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610625906116b2565b80156106725780601f1061064757610100808354040283529160200191610672565b820191906000526020600020905b81548152906001019060200180831161065557829003601f168201915b505050505090506000610683610922565b805461068e906116b2565b80601f01602080910402602001604051908101604052809291908181526020018280546106ba906116b2565b80156107075780601f106106dc57610100808354040283529160200191610707565b820191906000526020600020905b8154815290600101906020018083116106ea57829003601f168201915b505050505090506001805461071b906116b2565b905060048360405161072d919061181e565b9081526040516020918190038201812092909255610751916001916000910161183a565b60405160208183030381529060405260019080519060200190610775929190611349565b5060018054610783906116b2565b9050600482604051610795919061181e565b90815260405160209181900382018120929092556107b9916001916000910161183a565b604051602081830303815290604052600190805190602001906107dd929190611349565b505050565b600180546107ef906116b2565b905060046107fb610922565b604051610808919061185f565b908152604051602091819003820181209290925561082c916001916000910161183a565b6040516020818303038152906040526001908051906020019061048d929190611349565b6000805460405162823bd160e31b81526001600160a01b0390911690630411de8890610882908690869060040161186b565b6000604051808303816000875af11580156108a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108c991908101906118bf565b90506107dd8382610b5b565b6104f46108e1565b6104905b60016108eb610922565b6040516020016108fb919061185f565b6040516020818303038152906040528051906020012060405160200161082c929190611997565b600380546000916002919083610937836119d2565b919050558154811061094b5761094b6119ed565b90600052602060002001905090565b6001826001600160a01b0316635bf3e5d783610974610922565b6040518363ffffffff1660e01b8152600401610991929190611a7a565b602060405180830381865afa1580156109ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d29190611aa8565b6040516020016107b99291906117f9565b60016109ed610922565b80546109f8906116b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610a24906116b2565b8015610a715780601f10610a4657610100808354040283529160200191610a71565b820191906000526020600020905b815481529060010190602001808311610a5457829003601f168201915b5050604051638e7e34d760e01b815273__$2641d0e8ea942d61d4fa904ca538dff49f$__94638e7e34d79450610aac93509150600401611745565b600060405180830381865af4158015610ac9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610af19190810190611ad2565b60405160200161082c929190611b1b565b600081604051602001610b15919061181e565b6040516020818303038152906040528051906020012083604051602001610b3c919061181e565b6040516020818303038152906040528051906020012014905092915050565b610b67600160006113cd565b60006003558051610b7f906002906020840190611407565b50604051631e4d922f60e31b8152600060048201526001600160a01b0383169063f26c917890602401600060405180830381600087803b158015610bc257600080fd5b505af1158015610bd6573d6000803e3d6000fd5b50505050816001600160a01b031663138ef1516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3c9190611b40565b6001600160a01b03166352efea6e6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c7657600080fd5b505af1158015610c8a573d6000803e3d6000fd5b505050505b6002546003541015610ca957610ca482610d0c565b610c8f565b60405163bcf80c9d60e01b81526001600160a01b0383169063bcf80c9d90610cd690600190600401611b5d565b600060405180830381600087803b158015610cf057600080fd5b505af1158015610d04573d6000803e3d6000fd5b505050505050565b6000610d16610922565b90506000826001600160a01b031663f3f8d4e3836040518263ffffffff1660e01b8152600401610d469190611b5d565b602060405180830381865afa158015610d63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d879190611aa8565b90506001600160f81b03198116151580610e2e5750610e2e828054610dab906116b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610dd7906116b2565b8015610e245780601f10610df957610100808354040283529160200191610e24565b820191906000526020600020905b815481529060010190602001808311610e0757829003601f168201915b505050505061131f565b82604051602001610e3f9190611b70565b60405160208183030381529060405290610e755760405162461bcd60e51b8152600401610e6c9190611745565b60405180910390fd5b50610e85828054610dab906116b2565b1561115e57600060018054610e99906116b2565b90509050600060018054610eac906116b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610ed8906116b2565b8015610f255780601f10610efa57610100808354040283529160200191610f25565b820191906000526020600020905b815481529060010190602001808311610f0857829003601f168201915b505050505073__$54268a2ccf5b28930bb1a8a55944723b0b$__63e004139690916000600488604051610f58919061185f565b908152604051908190036020018120546001600160e01b031960e086901b168252610f87939291600401611bb2565b600060405180830381865af4158015610fa4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fcc9190810190611ad2565b9050600060018054610fdd906116b2565b80601f0160208091040260200160405190810160405280929190818152602001828054611009906116b2565b80156110565780601f1061102b57610100808354040283529160200191611056565b820191906000526020600020905b81548152906001019060200180831161103957829003601f168201915b505050505073__$54268a2ccf5b28930bb1a8a55944723b0b$$2641d0e8ea942d61d4fa904ca538dff49f$__9063b455560990610bd490889086906004016129d5565b600060405180830381865af4158015610bf1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c1991908101906128b8565b9050610c47604051806040016040528060018152602001607b60f81b8152508261143b90919063ffffffff16565b15610c525750610e57565b6040805180820190915260018152607d60f81b6020820152610c7590829061143b565b15610cc95760018054808201825560009190915260408051808201909152600380825262195b9960ea1b6020909201918252610cc292600080516020613560833981519152019190612483565b5050610e57565b6040805180820190915260018152600160fd1b6020820152610cec90829061143b565b80610d1557506040805180820190915260018152600560f91b6020820152610d1590829061143b565b80610d3e57506040805180820190915260018152600560fb1b6020820152610d3e90829061143b565b80610d6757506040805180820190915260018152602960f81b6020820152610d6790829061143b565b15610dc5576000610d76845190565b1115610dc0576001805480820182556000919091528351610dac9160008051602061356083398151915201906020860190612483565b506040518060200160405280600081525092505b610dd2565b610dcf8382611763565b92505b6040805180820190915260018152600560fb1b6020820152610df590829061143b565b80610e1e57506040805180820190915260018152602960f81b6020820152610e1e90829061143b565b15610e55576001805480820182556000919091528151610e539160008051602061356083398151915201906020840190612483565b505b505b80610e6181612985565b915050610b8f565b506000610e74825190565b1115610ebc576001805480820182556000919091528151610eaa9160008051602061356083398151915201906020840190612483565b50506040805160208101909152600081525b6001805480602002602001604051908101604052809291908181526020016000905b82821015610f8a578382906000526020600020018054610efd906129a0565b80601f0160208091040260200160405190810160405280929190818152602001828054610f29906129a0565b8015610f765780601f10610f4b57610100808354040283529160200191610f76565b820191906000526020600020905b815481529060010190602001808311610f5957829003601f168201915b505050505081526020019060010190610ede565b50505050915050919050565b606060008060008060605b865182101561109a5760405163b455560960e01b815273__$2641d0e8ea942d61d4fa904ca538dff49f$__9063b455560990610fe3908a9086906004016129d5565b600060405180830381865af4158015611000573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261102891908101906128b8565b905081925084156110485761103f8483898461178f565b9550925061105b565b61105382888361190f565b965090945092505b8183111561106b57829150610fa1565b84156110835761107c6001836129f7565b9150610fa1565b61108d8682611763565b955061107c6001836129f7565b5050505050919050565b60408051808201909152600c81526b7472616e7366657246726f6d60a01b602082015282906110d490839061143b565b8061110b575060408051808201909152600f81526e39b2ba2637b1b0b62ab4b73a191a9b60891b602082015261110b90839061143b565b8061113a57506040805180820190915260078152660e6cadcc88ae8d60cb1b602082015261113a90839061143b565b8061116a57506040805180820190915260088152673a3930b739b332b960c11b602082015261116a90839061143b565b1561010c5750600192915050565b60408051808201909152600a8152696c6f616452656d6f746560b01b602082015283906003906111a990849061143b565b156111b357600191505b8180156111c05750600084115b156111d3576111d0600185612a0f565b90505b935093915050565b6040805160208101825260008082529151630f04745760e31b815261123791906001600160a01b03861690637823a2b89061121a90879060040161288f565b600060405180830381865afa158015610630573d6000803e3d6000fd5b159392505050565b6000805b836001600160a01b0316635f390d9b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611281573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a59190612939565b81101561134557604051637146a48360e11b815260048101829052611324906001600160a01b0386169063e28d490690602401600060405180830381865afa1580156112f5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261131d91908101906128b8565b849061143b565b1561133357600191505061010c565b8061133d81612985565b915050611243565b5060009392505050565b600060405161135d90612507565b604051809103906000f080158015611379573d6000803e3d6000fd5b50604051633fe57b3360e11b81529091506001600160a01b03821690637fcaf666906113a990859060040161288f565b600060405180830381600087803b1580156113c357600080fd5b505af11580156113d7573d6000803e3d6000fd5b50506040516389b09de760e01b81526001600160a01b038481166004830152861692506389b09de79150602401600060405180830381600087803b15801561141e57600080fd5b505af1158015611432573d6000803e3d6000fd5b50505050505050565b60008160405160200161144e9190612a26565b60405160208183030381529060405280519060200120836040516020016114759190612a26565b6040516020818303038152906040528051906020012014905092915050565b600080826000815181106114aa576114aa6128a2565b01602001516001600160f81b031981169150603060f89190911c108015906114d75750603960f882901c11155b156114e157600191505b50919050565b60015415806115e257506115d7604051806040016040528060078152602001663ab4b73a191a9b60c91b81525060018080805490506115269190612a0f565b81548110611536576115366128a2565b90600052602060002001805461154b906129a0565b80601f0160208091040260200160405190810160405280929190818152602001828054611577906129a0565b80156115c45780601f10611599576101008083540402835291602001916115c4565b820191906000526020600020905b8154815290600101906020018083116115a757829003601f168201915b505050505061143b90919063ffffffff16565b1580156115e2575080155b1561163557600180548082018255600091909152604080518082019091526007808252663ab4b73a191a9b60c91b602090920191825261163392600080516020613560833981519152019190612483565b505b50565b600080606061166c6040518060400160405280600481526020016332b7323360e11b8152508861143b90919063ffffffff16565b1561167f57506000915082905084611689565b5083915060019050855b9450945094915050565b60006116c46040518060400160405280600481526020016332b7323360e11b8152508561143b90919063ffffffff16565b156116da576116d283611aa1565b506000610b75565b6040516370121b7160e01b815261175c9073__$2641d0e8ea942d61d4fa904ca538dff49f$__906370121b719061171590889060040161288f565b602060405180830381865af4158015611732573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117569190612939565b84611b1b565b5080610b75565b60608282604051602001611778929190612a42565b604051602081830303815290604052905092915050565b6000808560011480156117c057506040805180820190915260018152600560f91b60208201526117c090849061143b565b156117db576117d08560016129f7565b600091509150611906565b85600214801561180957506040805180820190915260018152601560f91b602082015261180990849061143b565b8015611824575061182461181e8660016129f7565b85611ddd565b156118ff57600073__$2641d0e8ea942d61d4fa904ca538dff49f$__63b4555609866118518960016129f7565b6040518363ffffffff1660e01b815260040161186e9291906129d5565b600060405180830381865af415801561188b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118b391908101906128b8565b90506118e1604051806040016040528060018152602001602f60f81b8152508261143b90919063ffffffff16565b156118fd576118f18660026129f7565b60009250925050611906565b505b5083905060015b94509492505050565b600080806119276119218760016129f7565b86611ddd565b15611a8e57600073__$2641d0e8ea942d61d4fa904ca538dff49f$__63b4555609876119548a60016129f7565b6040518363ffffffff1660e01b81526004016119719291906129d5565b600060405180830381865af415801561198e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119b691908101906128b8565b90506119e4604051806040016040528060018152602001602f60f81b8152508661143b90919063ffffffff16565b8015611a0e57506040805180820190915260018152602f60f81b6020820152611a0e90829061143b565b15611a2e576001611a208860026129f7565b600193509350935050611a98565b6040805180820190915260018152602f60f81b6020820152611a5190869061143b565b8015611a7b57506040805180820190915260018152601560f91b6020820152611a7b90829061143b565b15611a8c576002611a2088826129f7565b505b5060009150849050815b93509350939050565b6001805480820182556000919091526040805180820190915260048082526366756e6360e01b6020909201918252611aea92600080516020613560833981519152019190612483565b5060018054808201825560009190915281516116339160008051602061356083398151915201906020840190612483565b6000611b28836002612a71565b905060008311611b975760405162461bcd60e51b815260206004820152602f60248201527f50726570726f636573736f723a20616d6f756e74206f6620706172616d65746560448201526e072732063616e206e6f74206265203608c1b60648201526084015b60405180910390fd5b6000816001600160401b03811115611bb157611bb1612595565b604051908082528060200260200182016040528015611be457816020015b6060815260200190600190039081611bcf5790505b50600154909150821115611c545760405162461bcd60e51b815260206004820152603160248201527f50726570726f636573736f723a20696e76616c696420706172616d6574657273604482015270103337b9103a343290333ab731ba34b7b760791b6064820152608401611b8e565b600154600090611c65908490612a0f565b905060005b83811015611d51576001611c7e82846129f7565b81548110611c8e57611c8e6128a2565b906000526020600020018054611ca3906129a0565b80601f0160208091040260200160405190810160405280929190818152602001828054611ccf906129a0565b8015611d1c5780601f10611cf157610100808354040283529160200191611d1c565b820191906000526020600020905b815481529060010190602001808311611cff57829003601f168201915b5050505050838281518110611d3357611d336128a2565b60200260200101819052508080611d4990612985565b915050611c6a565b50611d5b83611ea3565b60005b8251811015611dc357611db181848381518110611d7d57611d7d6128a2565b602002602001015185846001611d9391906129f7565b81518110611da357611da36128a2565b602002602001015188611eef565b611dbc6002826129f7565b9050611d5e565b50611dcd85611fa3565b611dd684611aa1565b5050505050565b60405163b455560960e01b815260009073__$2641d0e8ea942d61d4fa904ca538dff49f$","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106101795760003560e01c80637d4bb2ec116100d9578063d261d86311610087578063d261d863146102be578063dff9ffc4146102d1578063ea80bd5514610192578063efedfec0146101c8578063f71c692a146102b6578063f9d1d3a2146102d9578063ffaeef8d146102e757600080fd5b80637d4bb2ec146102655780638d3ff47c1461026d57806394aef8e114610275578063b2dced0b146102a0578063be1d1211146102ae578063c35e0ec8146101a2578063cf7f7ff4146102b657600080fd5b8063363566461161013657806336356646146101e957806346b0a4f0146101f15780634a6cc8a6146101f9578063514110811461020c578063548e07c51461022a5780635981f3db1461023257806360fad1ed1461025d57600080fd5b806306a8f6c51461017e578063072fa70b146101925780630b91bffc1461019a57806316295b1c146101a25780632d423a6c146101c8578063357bf0fb146101d6575b600080fd5b61019061018c366004611492565b9055565b005b6101906102f3565b610190610305565b6101b56101b03660046114c7565b61044a565b6040519081526020015b60405180910390f35b61019061018c3660046114e0565b6101906101e4366004611517565b61045a565b610190610490565b6101906104a8565b610190610207366004611517565b6104b8565b61021a6101b03660046114c7565b60405190151581526020016101bf565b6101906104f4565b6101b5610240366004611600565b805160208183018101805160048252928201919093012091525481565b610190610498565b6101906104fc565b6101906104a0565b600054610288906001600160a01b031681565b6040516001600160a01b0390911681526020016101bf565b61019061018c36600461163d565b6101906105e4565b6101906107e2565b6101906102cc366004611662565b610850565b6101906108d5565b6102886101b03660046114c7565b6101906108dd565b5050565b6102fb6108e1565b610303610305565b565b600061030f610922565b805461031a906116b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610346906116b2565b80156103935780601f1061036857610100808354040283529160200191610393565b820191906000526020600020905b81548152906001019060200180831161037657829003601f168201915b50506040516370121b7160e01b815273__$2641d0e8ea942d61d4fa904ca538dff49f$__946370121b7194506103ce93509150600401611745565b602060405180830381865af41580156103eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040f9190611758565b6040519091506104269060019083906020016117e0565b604051602081830303815290604052600190805190602001906102ef929190611349565b6000610454825490565b92915050565b61048581604051806040016040528060098152602001681b1bd859131bd8d85b60ba1b81525061095a565b61048d6108e1565b50565b6104986108e1565b6104a06108e1565b6103036108e1565b6104b06108e1565b6103036104fc565b6104e4816040518060400160405280600a8152602001696c6f616452656d6f746560b01b81525061095a565b6104ec6108e1565b61048d6109e3565b6102f36108e1565b60006105bd604051806040016040528060048152602001637472756560e01b815250610526610922565b8054610531906116b2565b80601f016020809104026020016040519081016040528092919081815260200182805461055d906116b2565b80156105aa5780601f1061057f576101008083540402835291602001916105aa565b820191906000526020600020905b81548152906001019060200180831161058d57829003601f168201915b5050505050610b0290919063ffffffff16565b6105c85760006105cb565b60015b60f81b90506001816040516020016104269291906117f9565b60006105ee610922565b80546105f9906116b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610625906116b2565b80156106725780601f1061064757610100808354040283529160200191610672565b820191906000526020600020905b81548152906001019060200180831161065557829003601f168201915b505050505090506000610683610922565b805461068e906116b2565b80601f01602080910402602001604051908101604052809291908181526020018280546106ba906116b2565b80156107075780601f106106dc57610100808354040283529160200191610707565b820191906000526020600020905b8154815290600101906020018083116106ea57829003601f168201915b505050505090506001805461071b906116b2565b905060048360405161072d919061181e565b9081526040516020918190038201812092909255610751916001916000910161183a565b60405160208183030381529060405260019080519060200190610775929190611349565b5060018054610783906116b2565b9050600482604051610795919061181e565b90815260405160209181900382018120929092556107b9916001916000910161183a565b604051602081830303815290604052600190805190602001906107dd929190611349565b505050565b600180546107ef906116b2565b905060046107fb610922565b604051610808919061185f565b908152604051602091819003820181209290925561082c916001916000910161183a565b6040516020818303038152906040526001908051906020019061048d929190611349565b6000805460405162823bd160e31b81526001600160a01b0390911690630411de8890610882908690869060040161186b565b6000604051808303816000875af11580156108a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108c991908101906118bf565b90506107dd8382610b5b565b6104f46108e1565b6104905b60016108eb610922565b6040516020016108fb919061185f565b6040516020818303038152906040528051906020012060405160200161082c929190611997565b600380546000916002919083610937836119d2565b919050558154811061094b5761094b6119ed565b90600052602060002001905090565b6001826001600160a01b0316635bf3e5d783610974610922565b6040518363ffffffff1660e01b8152600401610991929190611a7a565b602060405180830381865afa1580156109ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d29190611aa8565b6040516020016107b99291906117f9565b60016109ed610922565b80546109f8906116b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610a24906116b2565b8015610a715780601f10610a4657610100808354040283529160200191610a71565b820191906000526020600020905b815481529060010190602001808311610a5457829003601f168201915b5050604051638e7e34d760e01b815273__$2641d0e8ea942d61d4fa904ca538dff49f$__94638e7e34d79450610aac93509150600401611745565b600060405180830381865af4158015610ac9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610af19190810190611ad2565b60405160200161082c929190611b1b565b600081604051602001610b15919061181e565b6040516020818303038152906040528051906020012083604051602001610b3c919061181e565b6040516020818303038152906040528051906020012014905092915050565b610b67600160006113cd565b60006003558051610b7f906002906020840190611407565b50604051631e4d922f60e31b8152600060048201526001600160a01b0383169063f26c917890602401600060405180830381600087803b158015610bc257600080fd5b505af1158015610bd6573d6000803e3d6000fd5b50505050816001600160a01b031663138ef1516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3c9190611b40565b6001600160a01b03166352efea6e6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c7657600080fd5b505af1158015610c8a573d6000803e3d6000fd5b505050505b6002546003541015610ca957610ca482610d0c565b610c8f565b60405163bcf80c9d60e01b81526001600160a01b0383169063bcf80c9d90610cd690600190600401611b5d565b600060405180830381600087803b158015610cf057600080fd5b505af1158015610d04573d6000803e3d6000fd5b505050505050565b6000610d16610922565b90506000826001600160a01b031663f3f8d4e3836040518263ffffffff1660e01b8152600401610d469190611b5d565b602060405180830381865afa158015610d63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d879190611aa8565b90506001600160f81b03198116151580610e2e5750610e2e828054610dab906116b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610dd7906116b2565b8015610e245780601f10610df957610100808354040283529160200191610e24565b820191906000526020600020905b815481529060010190602001808311610e0757829003601f168201915b505050505061131f565b82604051602001610e3f9190611b70565b60405160208183030381529060405290610e755760405162461bcd60e51b8152600401610e6c9190611745565b60405180910390fd5b50610e85828054610dab906116b2565b1561115e57600060018054610e99906116b2565b90509050600060018054610eac906116b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610ed8906116b2565b8015610f255780601f10610efa57610100808354040283529160200191610f25565b820191906000526020600020905b815481529060010190602001808311610f0857829003601f168201915b505050505073__$54268a2ccf5b28930bb1a8a55944723b0b$__63e004139690916000600488604051610f58919061185f565b908152604051908190036020018120546001600160e01b031960e086901b168252610f87939291600401611bb2565b600060405180830381865af4158015610fa4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fcc9190810190611ad2565b9050600060018054610fdd906116b2565b80601f0160208091040260200160405190810160405280929190818152602001828054611009906116b2565b80156110565780601f1061102b57610100808354040283529160200191611056565b820191906000526020600020905b81548152906001019060200180831161103957829003601f168201915b505050505073__$54268a2ccf5b28930bb1a8a55944723b0b$__63e00413969091600488604051611087919061185f565b90815260200160405180910390205460026110a29190611bd7565b600180546110af906116b2565b6040516001600160e01b031960e087901b1681526110d294939250600401611bb2565b600060405180830381865af41580156110ef573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111179190810190611ad2565b9050818360f01b8260405160200161113193929190611bef565b60405160208183030381529060405260019080519060200190611155929190611349565b50505050505050565b6001816040516020016111729291906117f9565b60405160208183030381529060405260019080519060200190611196929190611349565b50604051633cb9ceff60e01b81526000906001600160a01b03851690633cb9ceff906111c6908690600401611b5d565b602060405180830381865afa1580156111e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112079190611c32565b90506001600160e01b0319811615611319576040516001600160a01b03851660248201526000903090839060440160408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611273919061181e565b600060405180830381855af49150503d80600081146112ae576040519150601f19603f3d011682016040523d82523d6000602084013e6112b3565b606091505b50509050806113175760405162461bcd60e51b815260206004820152602a60248201527f5061727365723a2064656c656761746563616c6c20746f2061736d53656c65636044820152691d1bdc8819985a5b195960b21b6064820152608401610e6c565b505b50505050565b600080600483604051611332919061181e565b908152602001604051809103902054119050919050565b828054611355906116b2565b90600052602060002090601f01602090048101928261137757600085556113bd565b82601f1061139057805160ff19168380011785556113bd565b828001600101855582156113bd579182015b828111156113bd5782518255916020019190600101906113a2565b506113c9929150611460565b5090565b5080546113d9906116b2565b6000825580601f106113e9575050565b601f01602090049060005260206000209081019061048d9190611460565b828054828255906000526020600020908101928215611454579160200282015b828111156114545782518051611444918491602090910190611349565b5091602001919060010190611427565b506113c9929150611475565b5b808211156113c95760008155600101611461565b808211156113c957600061148982826113cd565b50600101611475565b600080604083850312156114a557600080fd5b82359150602083013580151581146114bc57600080fd5b809150509250929050565b6000602082840312156114d957600080fd5b5035919050565b600080604083850312156114f357600080fd5b50508035926020909101359150565b6001600160a01b038116811461048d57600080fd5b60006020828403121561152957600080fd5b813561153481611502565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561157a5761157a61153b565b604052919050565b600067ffffffffffffffff82111561159c5761159c61153b565b50601f01601f191660200190565b600082601f8301126115bb57600080fd5b81356115ce6115c982611582565b611551565b8181528460208386010111156115e357600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561161257600080fd5b813567ffffffffffffffff81111561162957600080fd5b611635848285016115aa565b949350505050565b6000806040838503121561165057600080fd5b8235915060208301356114bc81611502565b6000806040838503121561167557600080fd5b823561168081611502565b9150602083013567ffffffffffffffff81111561169c57600080fd5b6116a8858286016115aa565b9150509250929050565b600181811c908216806116c657607f821691505b602082108114156116e757634e487b7160e01b600052602260045260246000fd5b50919050565b60005b838110156117085781810151838201526020016116f0565b838111156113195750506000910152565b600081518084526117318160208601602086016116ed565b601f01601f19169290920160200192915050565b6020815260006115346020830184611719565b60006020828403121561176a57600080fd5b5051919050565b6000815461177e816116b2565b6001828116801561179657600181146117a7576117d6565b60ff198416875282870194506117d6565b8560005260208060002060005b858110156117cd5781548a8201529084019082016117b4565b50505082870194505b5050505092915050565b60006117ec8285611771565b9283525050602001919050565b60006118058285611771565b6001600160f81b03199390931683525050600101919050565b600082516118308184602087016116ed565b9190910192915050565b60006118468285611771565b6001600160f01b03199390931683525050600201919050565b60006115348284611771565b6001600160a01b038316815260406020820181905260009061163590830184611719565b600061189d6115c984611582565b90508281528383830111156118b157600080fd5b6115348360208301846116ed565b600060208083850312156118d257600080fd5b825167ffffffffffffffff808211156118ea57600080fd5b818501915085601f8301126118fe57600080fd5b8151818111156119105761191061153b565b8060051b61191f858201611551565b918252838101850191858101908984111561193957600080fd5b86860192505b8383101561198a578251858111156119575760008081fd5b8601603f81018b136119695760008081fd5b61197a8b898301516040840161188f565b835250918601919086019061193f565b9998505050505050505050565b60006119a38285611771565b6001600160e01b03199390931683525050600401919050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156119e6576119e66119bc565b5060010190565b634e487b7160e01b600052603260045260246000fd5b60008154611a10816116b2565b808552602060018381168015611a2d5760018114611a4157611a6f565b60ff19851688840152604088019550611a6f565b866000528260002060005b85811015611a675781548a8201860152908301908401611a4c565b890184019650505b505050505092915050565b604081526000611a8d6040830185611719565b8281036020840152611a9f8185611a03565b95945050505050565b600060208284031215611aba57600080fd5b81516001600160f81b03198116811461153457600080fd5b600060208284031215611ae457600080fd5b815167ffffffffffffffff811115611afb57600080fd5b8201601f81018413611b0c57600080fd5b6116358482516020840161188f565b6000611b278285611771565b8351611b378183602088016116ed565b01949350505050565b600060208284031215611b5257600080fd5b815161153481611502565b6020815260006115346020830184611a03565b682830b939b2b91d101160b91b81526000611b8e6009830184611771565b73111031b7b6b6b0b7321034b9903ab735b737bbb760611b81526014019392505050565b606081526000611bc56060830186611719565b60208301949094525060400152919050565b60008219821115611bea57611bea6119bc565b500190565b60008451611c018184602089016116ed565b6001600160f01b031985169083019081528351611c258160028401602088016116ed565b0160020195945050505050565b600060208284031215611c4457600080fd5b81516001600160e01b03198116811461153457600080fdfea264697066735822122060ab4ca696ffe512170b375127ce89314532c54e94e03cbd7d8e4b6f192e457664736f6c634300080b0033","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bool","name":"result","type":"bool"}],"name":"ExecRes","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"txObj","type":"address"}],"name":"NewConditionalTx","type":"event"},{"inputs":[],"name":"asmBalanceOf","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"asmBool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"asmFunc","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"asmIf","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"asmIfelse","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IContext","name":"_ctx","type":"address"}],"name":"asmLoadLocal","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IContext","name":"_ctx","type":"address"}],"name":"asmLoadRemote","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"asmSend","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"asmSetLocalBool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"asmSetLocalUint256","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"asmSetUint256","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"asmTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"asmTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"asmTransferFromVar","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"asmTransferVar","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"asmUint256","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"position","type":"bytes32"}],"name":"getStorageAddress","outputs":[{"internalType":"address","name":"data","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"position","type":"bytes32"}],"name":"getStorageBool","outputs":[{"internalType":"bool","name":"data","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"position","type":"bytes32"}],"name":"getStorageBytes32","outputs":[{"internalType":"bytes32","name":"data","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"position","type":"bytes32"}],"name":"getStorageUint256","outputs":[{"internalType":"uint256","name":"data","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"","type":"string"}],"name":"labelPos","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract IContext","name":"_ctx","type":"address"},{"internalType":"string","name":"_codeRaw","type":"string"}],"name":"parse","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"preprocessor","outputs":[{"internalType":"contract Preprocessor","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"position","type":"bytes32"},{"internalType":"address","name":"data","type":"address"}],"name":"setStorageAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"position","type":"bytes32"},{"internalType":"bool","name":"data","type":"bool"}],"name":"setStorageBool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"position","type":"bytes32"},{"internalType":"bytes32","name":"data","type":"bytes32"}],"name":"setStorageBytes32","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"position","type":"bytes32"},{"internalType":"uint256","name":"data","type":"uint256"}],"name":"setStorageUint256","outputs":[],"stateMutability":"nonpayable","type":"function"}]}