{"metadata":"{\"compiler\":{\"version\":\"0.8.11\"},\"sources\":{\"contracts/dsl/ContextFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport { Context } from './Context.sol';\\n\\ncontract ContextFactory {\\n    address[] public deployedContexts;\\n    event NewContext(address context);\\n\\n    function deployContext() external returns (address _contextAddr) {\\n        Context _context = new Context();\\n        _contextAddr = address(_context);\\n        deployedContexts.push(_contextAddr);\\n        emit NewContext(_contextAddr);\\n    }\\n\\n    function getDeployedContextsLen() external view returns (uint256) {\\n        return deployedContexts.length;\\n    }\\n}\\n\"},\"contracts/dsl/helpers/Stack.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ncontract StackValue {\\n    // TODO: get rid of non-uint256 types\\n    enum StackType {\\n        // NONE in an OpSpec shows that the op pops or yields nothing\\n        NONE,\\n        // UINT256 in an OpSpec shows that the op pops or yields a uint256\\n        UINT256,\\n        STRING,\\n        ADDRESS\\n    }\\n\\n    StackType private _type;\\n\\n    uint256 private _uint256;\\n    string private _string;\\n    address private _address;\\n\\n    function getUint256() public view returns (uint256) {\\n        require(_type == StackType.UINT256, 'Stack: uint256 type mismatch');\\n        return _uint256;\\n    }\\n\\n    function setUint256(uint256 value) public {\\n        _uint256 = value;\\n        _type = StackType.UINT256;\\n    }\\n\\n    function getString() public view returns (string memory) {\\n        require(_type == StackType.STRING, 'Stack: string type mismatch');\\n        return _string;\\n    }\\n\\n    function setString(string memory value) public {\\n        _string = value;\\n        _type = StackType.STRING;\\n    }\\n\\n    function getAddress() public view returns (address) {\\n        require(_type == StackType.ADDRESS, 'Stack: address type mismatch');\\n        return _address;\\n    }\\n\\n    function setAddress(address _addr) public {\\n        _address = _addr;\\n        _type = StackType.ADDRESS;\\n    }\\n\\n    function getType() public view returns (StackType) {\\n        return _type;\\n    }\\n}\\n\\ncontract Stack {\\n    StackValue[] public stack;\\n\\n    function length() external view returns (uint256) {\\n        return _length();\\n    }\\n\\n    function seeLast() external view returns (StackValue) {\\n        return _seeLast();\\n    }\\n\\n    function push(StackValue data) external {\\n        stack.push(data);\\n    }\\n\\n    function pop() external returns (StackValue) {\\n        StackValue data = _seeLast();\\n        stack.pop();\\n\\n        return data;\\n    }\\n\\n    function clear() external {\\n        delete stack;\\n    }\\n\\n    function _length() internal view returns (uint256) {\\n        return stack.length;\\n    }\\n\\n    function _seeLast() internal view returns (StackValue) {\\n        require(_length() > 0, 'Stack: stack is empty');\\n        return stack[_length() - 1];\\n    }\\n}\\n\"},\"contracts/dsl/interfaces/IContext.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport '../helpers/Stack.sol';\\n\\ninterface IContext {\\n    enum OpcodeLibNames {\\n        ComparisonOpcodes,\\n        BranchingOpcodes,\\n        LogicalOpcodes,\\n        OtherOpcodes\\n    }\\n\\n    // Variables\\n    function stack() external view returns (Stack);\\n\\n    function program() external view returns (bytes memory);\\n\\n    function pc() external view returns (uint256);\\n\\n    function nextpc() external view returns (uint256);\\n\\n    function appAddress() external view returns (address);\\n\\n    function msgSender() external view returns (address);\\n\\n    function comparisonOpcodes() external view returns (address);\\n\\n    function branchingOpcodes() external view returns (address);\\n\\n    function logicalOpcodes() external view returns (address);\\n\\n    function otherOpcodes() external view returns (address);\\n\\n    function msgValue() external view returns (uint256);\\n\\n    function opCodeByName(string memory _name) external view returns (bytes1 _opcode);\\n\\n    function selectorByOpcode(bytes1 _opcode) external view returns (bytes4 _selecotor);\\n\\n    function opcodeLibNameByOpcode(bytes1 _opcode) external view returns (OpcodeLibNames _name);\\n\\n    function asmSelectors(string memory _name) external view returns (bytes4 _selecotor);\\n\\n    function opsPriors(string memory _name) external view returns (uint256 _priority);\\n\\n    function operators(uint256 _index) external view returns (string memory _operator);\\n\\n    function branchSelectors(string memory _baseOpName, bytes1 _branchCode)\\n        external\\n        view\\n        returns (bytes4 _selector);\\n\\n    function branchCodes(string memory _baseOpName, string memory _branchName)\\n        external\\n        view\\n        returns (bytes1 _branchCode);\\n\\n    function aliases(string memory _alias) external view returns (string memory _baseCmd);\\n\\n    // Functions\\n\\n    function initOpcodes() external;\\n\\n    function operatorsLen() external view returns (uint256);\\n\\n    function setComparisonOpcodesAddr(address _opcodes) external;\\n\\n    function setBranchingOpcodesAddr(address _opcodes) external;\\n\\n    function setLogicalOpcodesAddr(address _opcodes) external;\\n\\n    function setOtherOpcodesAddr(address _opcodes) external;\\n\\n    function setProgram(bytes memory _data) external;\\n\\n    function programAt(uint256 _index, uint256 _step) external view returns (bytes memory);\\n\\n    function programSlice(\\n        bytes calldata _payload,\\n        uint256 _index,\\n        uint256 _step\\n    ) external view returns (bytes memory);\\n\\n    function setPc(uint256 _pc) external;\\n\\n    function setNextPc(uint256 _nextpc) external;\\n\\n    function incPc(uint256 _val) external;\\n\\n    function setAppAddress(address _addr) external;\\n\\n    function setMsgSender(address _msgSender) external;\\n\\n    function setMsgValue(uint256 _msgValue) external;\\n}\\n\"},\"contracts/dsl/libs/StringUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n// import 'hardhat/console.sol';\\n\\nlibrary StringUtils {\\n    function char(string memory s, uint256 index) public pure returns (string memory) {\\n        require(index < length(s), 'String: index out of range');\\n        bytes memory sBytes = new bytes(1);\\n        sBytes[0] = bytes(s)[index];\\n        return string(sBytes);\\n    }\\n\\n    function equal(string memory s1, string memory s2) internal pure returns (bool) {\\n        return keccak256(abi.encodePacked(s1)) == keccak256(abi.encodePacked(s2));\\n    }\\n\\n    function length(string memory s) internal pure returns (uint256) {\\n        return bytes(s).length;\\n    }\\n\\n    function concat(string memory s1, string memory s2) internal pure returns (string memory) {\\n        return string(abi.encodePacked(s1, s2));\\n    }\\n\\n    // Convert an hexadecimal string (without \\\"0x\\\" prefix) to raw bytes\\n    function fromHex(string memory s) public pure returns (bytes memory) {\\n        bytes memory ss = bytes(s);\\n        require(ss.length % 2 == 0, 'String: hex lenght not even'); // length must be even\\n        bytes memory r = new bytes(ss.length / 2);\\n        for (uint256 i = 0; i < ss.length / 2; ++i) {\\n            r[i] = bytes1(fromHexChar(ss[2 * i]) * 16 + fromHexChar(ss[2 * i + 1]));\\n        }\\n        return r;\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return '0';\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    // string decimal number to uint256\\n    function toUint256(string memory s) public pure returns (uint256 value) {\\n        bytes memory b = bytes(s);\\n        uint256 tmp;\\n        for (uint256 i = 0; i < b.length; i++) {\\n            tmp = uint8(b[i]);\\n            require(tmp >= 0x30 && tmp <= 0x39, 'String: non-decimal character');\\n            value = value * 10 + (tmp - 0x30); // 0x30 ascii is '0'\\n        }\\n    }\\n\\n    // string decimal number with e symbol (1e18) to uint256 (in wei)\\n    function getWei(string memory _s) public pure returns (string memory result) {\\n        bool isFound; // was `e` symbol found\\n        uint256 tmp;\\n        bytes memory b = bytes(_s);\\n        string memory base;\\n        string memory decimals;\\n\\n        for (uint256 i = 0; i < b.length; i++) {\\n            tmp = uint8(b[i]);\\n            if (tmp >= 0x30 && tmp <= 0x39) {\\n                if (!isFound) {\\n                    base = concat(base, string(abi.encodePacked(b[i])));\\n                } else {\\n                    decimals = concat(decimals, string(abi.encodePacked(b[i])));\\n                }\\n            } else if (tmp == 0x65 && !isFound) {\\n                require(!equal(base, ''), 'StringUtils: base was not provided');\\n                isFound = true;\\n            } else if (tmp != 0x65 || isFound) {\\n                // use only one `e` sympol between values without spaces; example: 1e18 or 456e10\\n                revert('StringUtils: invalid format');\\n            }\\n        }\\n\\n        require(!equal(decimals, ''), 'StringUtils: decimals were not provided');\\n        result = toString(toUint256(base) * (10**toUint256(decimals)));\\n    }\\n\\n    /**\\n     * @dev If the string starts with a number, so we assume that it's a number.\\n     * @param _value is a current chunk\\n     * @return isNumber that is true if the string starts with a number, otherwise is false\\n     */\\n    function mayBeNumber(string memory _value) public pure returns (bool isNumber) {\\n        bytes1 _firstByte = bytes(_value)[0];\\n        if (uint8(_firstByte) >= 48 && uint8(_firstByte) <= 57) {\\n            isNumber = true;\\n        }\\n    }\\n\\n    // Convert an hexadecimal character to their value\\n    function fromHexChar(bytes1 c) public pure returns (uint8 result) {\\n        if (c >= bytes1('0') && c <= bytes1('9')) {\\n            result = uint8(c) - uint8(bytes1('0'));\\n        }\\n        if (c >= bytes1('a') && c <= bytes1('f')) {\\n            result = 10 + uint8(c) - uint8(bytes1('a'));\\n        }\\n        if (c >= bytes1('A') && c <= bytes1('F')) {\\n            result = 10 + uint8(c) - uint8(bytes1('A'));\\n        }\\n    }\\n}\\n\"},\"contracts/dsl/Preprocessor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport { IContext } from './interfaces/IContext.sol';\\nimport { Stack, StackValue } from './helpers/Stack.sol';\\nimport { StringUtils } from './libs/StringUtils.sol';\\n\\n// import 'hardhat/console.sol';\\n\\n/**\\n * @dev Preprocessor of DSL code\\n *\\n * One of the core contracts of the project. It can remove comments that were\\n * created by user in the DSL code string. It transforms the users DSL code string\\n * to the list of commands that can be used in a Parser contract.\\n *\\n * DSL code in postfix notation as\\n * user's string code -> Preprocessor -> each command is separated in the commands list\\n */\\ncontract Preprocessor {\\n    using StringUtils for string;\\n    // uses for storing data for DSL functions\\n    struct FuncParameter {\\n        // the type of variable that provides for the function\\n        string _type;\\n        // the name of variable that will be generated in denedce on the function name\\n        string nameOfVariable;\\n        // the value for provided variable\\n        string value;\\n    }\\n    mapping(uint256 => FuncParameter) parameters;\\n    string[] internal result; // stores the list of commands after infixToPostfix transformation\\n\\n    /**\\n     * @dev The main function that transforms the user's DSL code string to the list of commands.\\n     *\\n     * Example:\\n     * The user's DSL code string is\\n     * ```\\n     * uint256 6 setUint256 A\\n     * ```\\n     * The end result after executing a `transform()` function is\\n     * ```\\n     * ['uint256', '6', 'setUint256', 'A']\\n     * ```\\n     *\\n     * @param _ctxAddr is a context contract address\\n     * @param _program is a user's DSL code string\\n     * @return the list of commands that storing `result`\\n     */\\n    function transform(address _ctxAddr, string memory _program)\\n        external\\n        returns (string[] memory)\\n    {\\n        Stack stack = new Stack();\\n        string[] memory code = split(_program);\\n        return infixToPostfix(_ctxAddr, code, stack);\\n    }\\n\\n    /**\\n     * @dev Searches the comments in the program and removes comment lines\\n     * Example:\\n     * The user's DSL code string is\\n     * ```\\n     *  bool true\\n     *  // uint256 2 * uint256 5\\n     * ```\\n     * The end result after executing a `cleanString()` function is\\n     * ```\\n     * bool true\\n     * ```\\n     * @param _program is a current program string\\n     * @return _cleanedProgram new string program that contains only clean code without comments\\n     */\\n    function cleanString(string memory _program)\\n        public\\n        pure\\n        returns (string memory _cleanedProgram)\\n    {\\n        bool isCommented;\\n\\n        // searchedSymbolLen is a flag that uses for searching a correct end symbol\\n        uint256 searchedSymbolLen; // 1 - search \\\\n symbol, 2 - search */ symbol\\n        uint256 tempIndex; // uses for checking if the index was changed\\n        uint256 i;\\n        string memory char;\\n\\n        while (i < _program.length()) {\\n            char = _program.char(i);\\n            tempIndex = i;\\n            if (isCommented) {\\n                (tempIndex, isCommented) = _getEndCommentSymbol(\\n                    searchedSymbolLen,\\n                    i,\\n                    _program,\\n                    char\\n                );\\n            } else {\\n                (searchedSymbolLen, tempIndex, isCommented) = _getCommentSymbol(i, _program, char);\\n            }\\n\\n            if (tempIndex > i) {\\n                i = tempIndex;\\n                continue;\\n            }\\n\\n            if (isCommented) {\\n                i += 1;\\n                continue;\\n            }\\n\\n            _cleanedProgram = _cleanedProgram.concat(char);\\n            i += 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Splits the user's DSL code string to the list of commands\\n     * avoiding several symbols:\\n     * - removes additional and useless symbols as ' ', `\\\\\\\\n`\\n     * - defines and adding help 'end' symbol for the ifelse condition\\n     * - defines and cleans the code from `{` and `}` symbols\\n     *\\n     * Example:\\n     * The user's DSL code string is\\n     * ```\\n     * (loadLocal uint256 TIMESTAMP >    loadLocal uint256 INIT)\\n     * ```\\n     * The end result after executing a `split()` function is\\n     * ```\\n     * ['loadLocal', 'uint256', 'TIMESTAMP', '>', 'loadLocal', 'uint256', 'INIT']\\n     * ```\\n     *\\n     * @param _program is a user's DSL code string\\n     * @return the list of commands that storing in `result`\\n     */\\n    function split(string memory _program) public returns (string[] memory) {\\n        delete result;\\n        string memory buffer;\\n\\n        for (uint256 i = 0; i < _program.length(); i++) {\\n            string memory char = _program.char(i);\\n\\n            // if-else conditions parsing\\n            if (char.equal('{')) continue;\\n            if (char.equal('}')) {\\n                result.push('end');\\n                continue;\\n            }\\n\\n            if (char.equal(' ') || char.equal('\\\\n') || char.equal('(') || char.equal(')')) {\\n                if (buffer.length() > 0) {\\n                    result.push(buffer);\\n                    buffer = '';\\n                }\\n            } else {\\n                buffer = buffer.concat(char);\\n            }\\n\\n            if (char.equal('(') || char.equal(')')) {\\n                result.push(char);\\n            }\\n        }\\n\\n        if (buffer.length() > 0) {\\n            result.push(buffer);\\n            buffer = '';\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Rebuild and transforms the user's DSL commands (can be prepared by\\n     * the `split()` function) to the list of commands.\\n     *\\n     * Example:\\n     * The user's DSL command contains\\n     * ```\\n     * ['1', '+', '2']\\n     * ```\\n     * The result after executing a `infixToPostfix()` function is\\n     * ```\\n     * ['uint256', '1', 'uint256', '2', '+']\\n     * ```\\n     *\\n     * @param _ctxAddr is a context contract address\\n     * @param _code is a DSL command list\\n     * @return _stack uses for getting and storing temporary data to\\n     * rebuild the list of commands\\n     */\\n    function infixToPostfix(\\n        address _ctxAddr,\\n        string[] memory _code,\\n        Stack _stack\\n    ) public returns (string[] memory) {\\n        delete result;\\n        bool isFunc;\\n        bool isName;\\n        bool loadRemoteFlag;\\n        bool directUseUint256;\\n        uint256 loadRemoteVarCount = 3;\\n        string memory chunk;\\n        string memory name;\\n\\n        for (uint256 i = 0; i < _code.length; i++) {\\n            chunk = _code[i];\\n\\n            // returns true if the chunk can use uint256 directly\\n            directUseUint256 = _isDirectUseUint256(directUseUint256, chunk);\\n            // checks and updates if the chunk can use uint256 or it's loadRemote opcode\\n            (loadRemoteFlag, loadRemoteVarCount) = _updateRemoteParams(\\n                loadRemoteFlag,\\n                loadRemoteVarCount,\\n                chunk\\n            );\\n\\n            // Replace alises with base commands\\n            if (_isAlias(_ctxAddr, chunk)) {\\n                chunk = IContext(_ctxAddr).aliases(chunk);\\n            }\\n\\n            if (_isOperator(_ctxAddr, chunk)) {\\n                while (\\n                    _stack.length() > 0 &&\\n                    IContext(_ctxAddr).opsPriors(chunk) <=\\n                    IContext(_ctxAddr).opsPriors(_stack.seeLast().getString())\\n                ) {\\n                    result.push(_stack.pop().getString());\\n                }\\n                _pushStringToStack(_stack, chunk);\\n            } else if (chunk.equal('(')) {\\n                _pushStringToStack(_stack, chunk);\\n            } else if (chunk.equal(')')) {\\n                while (!_stack.seeLast().getString().equal('(')) {\\n                    result.push(_stack.pop().getString());\\n                }\\n                _stack.pop(); // remove '(' that is left\\n            } else if (chunk.mayBeNumber() && !isFunc && !directUseUint256) {\\n                _updateUINT256param(loadRemoteFlag);\\n                result.push(_parseNumber(chunk, loadRemoteFlag));\\n            } else if (chunk.mayBeNumber() && !isFunc && directUseUint256) {\\n                directUseUint256 = false;\\n                result.push(chunk);\\n            } else if (chunk.equal('func')) {\\n                // if the chunk is 'func' then `Functions block` will occur\\n                isFunc = true;\\n            } else if (isFunc && !isName) {\\n                // `Functions block` started\\n                // if was not set the name for a function\\n                (isFunc, isName, name) = _parceFuncMainData(chunk, name, isFunc, isName);\\n            } else if (isFunc && isName) {\\n                // `Functions block` finished\\n                // if it was already set the name for a function\\n                isName = false;\\n                isFunc = _parceFuncParams(chunk, name, isFunc);\\n            } else {\\n                result.push(chunk);\\n            }\\n        }\\n\\n        while (_stack.length() > 0) {\\n            result.push(_stack.pop().getString());\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev As the string of values can be simple and complex for DSL this function returns a number in\\n     * Wei regardless of what type of number parameter was provided by the user.\\n     * For example:\\n     * `uint256 1000000` - simple\\n     * `uint256 1e6 - complex`\\n     * @param _chunk provided number by the user\\n     * @param _loadRemoteFlag is used to check if it was started the set of parameters for 'loadRemote' opcode\\n     * @return updatedChunk amount in Wei of provided _chunk value\\n     */\\n    function _parseNumber(string memory _chunk, bool _loadRemoteFlag)\\n        internal\\n        view\\n        returns (string memory updatedChunk)\\n    {\\n        if (_loadRemoteFlag) return _chunk;\\n\\n        try _chunk.toUint256() {\\n            updatedChunk = _chunk;\\n        } catch {\\n            updatedChunk = _chunk.getWei();\\n        }\\n    }\\n\\n    /**\\n     * @dev Pushes additional 'uint256' string to results in case, if there are no\\n     * types provided for uint256 values or\\n     * loadRemote command, is not in the processing or\\n     * the last chunk that was added to results is not 'uint256'\\n     * @param _loadRemoteFlag is used to check if it was started the set of parameters for 'loadRemote' opcode\\n     */\\n    function _updateUINT256param(bool _loadRemoteFlag) internal {\\n        if (\\n            result.length == 0 ||\\n            (!(result[result.length - 1].equal('uint256')) && _loadRemoteFlag == false)\\n        ) {\\n            result.push('uint256');\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks parameters and updates DSL code depending on what\\n     * kind of function was provided.\\n     * This internal function expects 'func' that can be with and without parameters.\\n     * @param _chunk is a current chunk from the DSL string code\\n     * @param _currentName is a current name of function\\n     * @param _isFunc describes if the func opcode was occured\\n     */\\n    function _parceFuncParams(\\n        string memory _chunk,\\n        string memory _currentName,\\n        bool _isFunc\\n    ) internal returns (bool) {\\n        if (_chunk.equal('endf')) {\\n            // if the function without parameters\\n            _pushFuncName(_currentName);\\n            return false;\\n        } else {\\n            // if the function with parameters\\n            _rebuildParameters(_chunk.toUint256(), _currentName);\\n            return _isFunc;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns updated parameters for the `func` opcode processing\\n     * Pushes the command that saves parameter in the smart contract instead\\n     * of the parameters that were provided for parsing.\\n     * The function will store the command like `uint256 7 setUint256 NUMBER_VAR` and\\n     * remove the parameter like `uint256 7`.\\n     * The DSL command will be stored before the function body.\\n     * For the moment it works only with uint256 type.\\n     * @param _chunk is a current chunk from the DSL string code\\n     * @param _currentName is a current name of function\\n     * @param _isFunc describes if the func opcode was occured\\n     * @param _isName describes if the name for the function was already set\\n     * @return isFunc the new state of _isFunc for function processing\\n     * @return isName the new state of _isName for function processing\\n     * @return name the new name of the function\\n     */\\n    function _parceFuncMainData(\\n        string memory _chunk,\\n        string memory _currentName,\\n        bool _isFunc,\\n        bool _isName\\n    )\\n        internal\\n        pure\\n        returns (\\n            bool,\\n            bool,\\n            string memory\\n        )\\n    {\\n        if (_chunk.equal('endf')) {\\n            // finish `Functions block` process\\n            // example: `func NAME <number_of_params> endf`\\n            // updates only for: isFunc => false - end of func opcode\\n            return (false, _isName, _currentName);\\n        } else {\\n            // updates only for:\\n            // isName => true - setting the name of function has occurred\\n            // name => current cunk\\n            return (_isFunc, true, _chunk);\\n        }\\n    }\\n\\n    /**\\n     * @dev Rebuilds parameters to DSL commands in result's list.\\n     * Pushes the command that saves parameter in the smart contract instead\\n     * of the parameters that were provided for parsing.\\n     * The function will store the command like `uint256 7 setUint256 NUMBER_VAR` and\\n     * remove the parameter like `uint256 7`.\\n     * The DSL command will be stored before the function body.\\n     * For the moment it works only with uint256 type.\\n     * @param _paramsCount is an amount of parameters that provided after\\n     * the name of function\\n     * @param _nameOfFunc is a name of function that is used to generate\\n     * the name of variables\\n     */\\n    function _rebuildParameters(uint256 _paramsCount, string memory _nameOfFunc) internal {\\n        /* \\n        `chunks` list needs to store parameters temporarly and rewrite dsl string code\\n\\n        `_paramsCount * 2` includes type and value for the parameter\\n\\n        `indexFirst` is an index where the first parameter was pushed to results\\n\\n        For example:\\n        if the function has 6 input parameters then the indexFirst will be set in\\n        the index that shows, where it was the first parameter was stored before\\n        the 'func', was occurred.\\n        */\\n\\n        uint256 _totalParams = _paramsCount * 2;\\n        require(_paramsCount > 0, 'Preprocessor: amount of parameters can not be 0');\\n        string[] memory chunks = new string[](_totalParams);\\n\\n        require(result.length >= _totalParams, 'Preprocessor: invalid parameters for the function');\\n        uint256 indexFirst = result.length - _totalParams;\\n\\n        // store paramerets that were already pushed to results\\n        for (uint256 j = 0; j < _totalParams; j++) {\\n            chunks[j] = result[indexFirst + j];\\n        }\\n\\n        _cleanCode(_totalParams);\\n\\n        for (uint256 j = 0; j < chunks.length; j += 2) {\\n            _saveParameter(j, chunks[j], chunks[j + 1], _nameOfFunc);\\n        }\\n\\n        _pushParameters(_paramsCount);\\n        _pushFuncName(_nameOfFunc);\\n    }\\n\\n    /**\\n     * @dev Pushes parameters to result's list depend on their type for each value\\n     * @param _count is an amount of parameters provided next to the name of func\\n     */\\n    function _pushParameters(uint256 _count) internal {\\n        for (uint256 j = 0; j < _count; j++) {\\n            FuncParameter memory fp = parameters[j + 1];\\n            _rebuildParameter(fp._type, fp.value, fp.nameOfVariable);\\n            // clear mapping data to prevent collisions with values\\n            parameters[j + 1] = FuncParameter('', '0', '');\\n        }\\n    }\\n\\n    /**\\n     * @dev Saves parameters in mapping checking/using valid type for each value\\n     * @param _index is a current chunk index from temporary chunks\\n     * @param _type is a type of the parameter\\n     * @param _value is a value of the parameter\\n     * @param _nameOfFunc is a name of function that is used to generate\\n     * the name of the current variable\\n     */\\n    function _saveParameter(\\n        uint256 _index,\\n        string memory _type,\\n        string memory _value,\\n        string memory _nameOfFunc\\n    ) internal {\\n        FuncParameter storage fp = parameters[_index / 2 + 1];\\n        fp._type = _type;\\n        fp.value = _value;\\n        fp.nameOfVariable = string(\\n            abi.encodePacked(_nameOfFunc, '_', StringUtils.toString(_index / 2 + 1))\\n        );\\n    }\\n\\n    /**\\n     * @dev Clears useless variables from the DSL code string as\\n     * all needed parameters are already stored in chunks list\\n     * @param _count is an amount of parameters provided next\\n     * to the name of func. As parameters are stored with their types,\\n     * the _count variable was already multiplied to 2\\n     */\\n    function _cleanCode(uint256 _count) internal {\\n        for (uint256 j = 0; j < _count; j++) {\\n            result.pop();\\n        }\\n    }\\n\\n    /**\\n     * @dev Preparing and pushes the DSL command to results.\\n     * The comand will save this parameter and its name in the smart contract.\\n     * For example: `uint256 7 setUint256 NUMBER_VAR`\\n     * For the moment it works only with uint256 types.\\n     * @param _type is a type of the parameter\\n     * @param _value is a value of the parameter\\n     * @param _variableName is a name of variable that was generated before\\n     */\\n    function _rebuildParameter(\\n        string memory _type,\\n        string memory _value,\\n        string memory _variableName\\n    ) internal {\\n        result.push(_type);\\n        result.push(_value);\\n        // TODO: setUint256 - update for other types in dependence on '_type'\\n        // TODO: create mapping (_type => `setUint256`)\\n        result.push('setUint256');\\n        result.push(_variableName);\\n    }\\n\\n    /**\\n     * @dev Pushes the func opcode and the name of the function\\n     * @param _name is a current name of the function\\n     */\\n    function _pushFuncName(string memory _name) internal {\\n        result.push('func');\\n        result.push(_name);\\n    }\\n\\n    function _pushStringToStack(Stack stack_, string memory value) internal {\\n        StackValue stackValue = new StackValue();\\n        stackValue.setString(value);\\n        stack_.push(stackValue);\\n    }\\n\\n    function _isOperator(address _ctxAddr, string memory op) internal view returns (bool) {\\n        for (uint256 i = 0; i < IContext(_ctxAddr).operatorsLen(); i++) {\\n            if (op.equal(IContext(_ctxAddr).operators(i))) return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Checks if a string is an alias to a command from DSL\\n     */\\n    function _isAlias(address _ctxAddr, string memory _cmd) internal view returns (bool) {\\n        return !IContext(_ctxAddr).aliases(_cmd).equal('');\\n    }\\n\\n    /**\\n     * @dev Checks if a symbol is a comment, then increases _index to the next\\n     * no-comment symbol avoiding an additional iteration\\n     * @param _index is a current index of a char that might be changed\\n     * @param _program is a current program string\\n     * @return new index\\n     * @return searchedSymbolLen\\n     * @return isCommeted\\n     */\\n    function _getCommentSymbol(\\n        uint256 _index,\\n        string memory _program,\\n        string memory char\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            bool\\n        )\\n    {\\n        if (_canGetSymbol(_index + 1, _program)) {\\n            string memory nextChar = _program.char(_index + 1);\\n            if (char.equal('/') && nextChar.equal('/')) {\\n                return (1, _index + 2, true);\\n            } else if (char.equal('/') && nextChar.equal('*')) {\\n                return (2, _index + 2, true);\\n            }\\n        }\\n        return (0, _index, false);\\n    }\\n\\n    /**\\n     * @dev Checks if a symbol is an end symbol of a comment, then increases _index to the next\\n     * no-comment symbol avoiding an additional iteration\\n     * @param _i is a current index of a char that might be changed\\n     * @param _ssl is a searched symbol len that might be 0, 1, 2\\n     * @param _p is a current program string\\n     * @return index is a new index of a char\\n     * @return isCommeted\\n     */\\n    function _getEndCommentSymbol(\\n        uint256 _ssl,\\n        uint256 _i,\\n        string memory _p,\\n        string memory char\\n    ) internal pure returns (uint256, bool) {\\n        if (_ssl == 1 && char.equal('\\\\n')) {\\n            return (_i + 1, false);\\n        } else if (_ssl == 2 && char.equal('*') && _canGetSymbol(_i + 1, _p)) {\\n            string memory nextChar = _p.char(_i + 1);\\n            if (nextChar.equal('/')) {\\n                return (_i + 2, false);\\n            }\\n        }\\n        return (_i, true);\\n    }\\n\\n    /**\\n     * @dev Checks if it is possible to get next char from a _program\\n     * @param _index is a current index of a char\\n     * @param _program is a current program string\\n     * @return true if program has the next symbol, otherwise is false\\n     */\\n    function _canGetSymbol(uint256 _index, string memory _program) internal pure returns (bool) {\\n        try _program.char(_index) {\\n            return true;\\n        } catch Error(string memory) {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev This function is used to check if 'transferFrom', 'setLocalUint256',\\n     * 'sendEth' and 'transfer' functions(opcodes) won't use 'uint256' opcode during code\\n     * execution directly. So it needs to be sure that executed code won't mess up\\n     * parameters for the simple number and a number that be used for these functions.\\n     * @param _directUseUint256 set by default from the outer function. Allows to keep current state of a contract\\n     * @param _chunk is a current chunk from the outer function\\n     * @return _isDirect is true if a chunk is matched one from the opcode list, otherwise is false\\n     */\\n    function _isDirectUseUint256(bool _directUseUint256, string memory _chunk)\\n        internal\\n        pure\\n        returns (bool _isDirect)\\n    {\\n        _isDirect = _directUseUint256;\\n        if (\\n            _chunk.equal('transferFrom') ||\\n            _chunk.equal('setLocalUint256') ||\\n            _chunk.equal('sendEth') ||\\n            _chunk.equal('transfer')\\n        ) {\\n            _isDirect = true;\\n        }\\n    }\\n\\n    /**\\n     * @dev As a 'loadRemote' opcode has 4 parameters and two of them are\\n     * numbers it is important to be sure that executed code under 'loadRemote'\\n     * won't mess parameters with the simple uint256 numbers.\\n     * @param _loadRemoteFlag is used to check if it was started the set of parameters for 'loadRemote' opcode\\n     * @param _loadRemoteVarCount is used to check if it was finished the set of parameters for 'loadRemote' opcode\\n     * @param _chunk is a current chunk from the outer function\\n     * @return _flag is an updated or current value of _loadRemoteFlag\\n     * @return _count is an updated or current value of _loadRemoteVarCount\\n     */\\n    function _updateRemoteParams(\\n        bool _loadRemoteFlag,\\n        uint256 _loadRemoteVarCount,\\n        string memory _chunk\\n    ) internal pure returns (bool _flag, uint256 _count) {\\n        _count = 3;\\n        _flag = _loadRemoteFlag;\\n\\n        if (_chunk.equal('loadRemote')) {\\n            _flag = true;\\n        }\\n\\n        if (_flag && _loadRemoteVarCount > 0) {\\n            _count = _loadRemoteVarCount - 1;\\n        }\\n        return (_flag, _count);\\n    }\\n}\\n\"},\"contracts/dsl/interfaces/IParser.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport { IContext } from './IContext.sol';\\nimport { Preprocessor } from '../Preprocessor.sol';\\n\\ninterface IParser {\\n    // Variables\\n\\n    function preprocessor() external returns (Preprocessor);\\n\\n    event ExecRes(bool result);\\n    event NewConditionalTx(address txObj);\\n\\n    // Functions\\n\\n    function parse(address _ctxAddr, string memory _codeRaw) external;\\n\\n    function asmSetLocalBool() external;\\n\\n    function asmSetLocalUint256() external;\\n\\n    function asmSetUint256(IContext _ctx) external;\\n\\n    function asmLoadLocal(IContext _ctx) external;\\n\\n    function asmLoadRemote(IContext _ctx) external;\\n\\n    function asmBool() external;\\n\\n    function asmUint256() external;\\n\\n    function asmSend() external;\\n\\n    function asmTransfer() external;\\n\\n    function asmTransferVar() external;\\n\\n    function asmTransferFrom() external;\\n\\n    function asmBalanceOf() external;\\n\\n    function asmTransferFromVar() external;\\n\\n    function asmIfelse() external;\\n\\n    function asmIf() external;\\n\\n    function asmFunc() external;\\n}\\n\"},\"contracts/dsl/interfaces/IStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IStorage {\\n    function getStorageBool(bytes32 position) external view returns (bool data);\\n\\n    function getStorageAddress(bytes32 position) external view returns (address data);\\n\\n    function getStorageBytes32(bytes32 position) external view returns (bytes32 data);\\n\\n    function getStorageUint256(bytes32 position) external view returns (uint256 data);\\n}\\n\"},\"contracts/dsl/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"contracts/dsl/libs/UnstructuredStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary UnstructuredStorage {\\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly {\\n            data := sload(position)\\n        }\\n    }\\n\\n    function setStorageBool(bytes32 position, bool data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageAddress(bytes32 position, address data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n\\n    function setStorageUint256(bytes32 position, uint256 data) internal {\\n        assembly {\\n            sstore(position, data)\\n        }\\n    }\\n}\\n\"},\"contracts/dsl/libs/opcodes/OpcodeHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport { IContext } from '../../interfaces/IContext.sol';\\nimport { IStorage } from '../../interfaces/IStorage.sol';\\nimport { IERC20 } from '../../interfaces/IERC20.sol';\\nimport { StringUtils } from '../StringUtils.sol';\\nimport { UnstructuredStorage } from '../UnstructuredStorage.sol';\\nimport { OpcodeHelpers } from './OpcodeHelpers.sol';\\nimport { StackValue } from '../../helpers/Stack.sol';\\n\\n// import 'hardhat/console.sol';\\n\\n/**\\n * @title Opcode helper functions\\n * @notice Opcode helper functions that are used in other opcode libraries\\n * @dev Opcode libraries are: ComparisonOpcodes, BranchingOpcodes, LogicalOpcodes, and OtherOpcodes\\n */\\nlibrary OpcodeHelpers {\\n    using UnstructuredStorage for bytes32;\\n    using StringUtils for string;\\n\\n    function putToStack(IContext _ctx, uint256 _value) public {\\n        StackValue resultValue = new StackValue();\\n        resultValue.setUint256(_value);\\n        _ctx.stack().push(resultValue);\\n    }\\n\\n    function nextBytes(IContext _ctx, uint256 size) public returns (bytes memory out) {\\n        out = _ctx.programAt(_ctx.pc(), size);\\n        _ctx.incPc(size);\\n    }\\n\\n    function nextBytes1(IContext _ctx) public returns (bytes1) {\\n        return nextBytes(_ctx, 1)[0];\\n    }\\n\\n    function nextBranchSelector(IContext _ctx, string memory baseOpName) public returns (bytes4) {\\n        bytes1 branchCode = nextBytes1(_ctx);\\n        return _ctx.branchSelectors(baseOpName, branchCode);\\n    }\\n\\n    function mustCall(address addr, bytes memory data) public {\\n        (bool success, ) = addr.delegatecall(data);\\n        require(success, 'Opcodes: mustCall call not success');\\n    }\\n\\n    function getNextBytes(IContext _ctx, uint256 _bytesNum) public returns (bytes32 varNameB32) {\\n        bytes memory varName = nextBytes(_ctx, _bytesNum);\\n\\n        // Convert bytes to bytes32\\n        assembly {\\n            varNameB32 := mload(add(varName, 0x20))\\n        }\\n    }\\n}\\n\"},\"contracts/dsl/libs/opcodes/ComparisonOpcodes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport { IContext } from '../../interfaces/IContext.sol';\\nimport { IStorage } from '../../interfaces/IStorage.sol';\\nimport { IERC20 } from '../../interfaces/IERC20.sol';\\nimport { StringUtils } from '../StringUtils.sol';\\nimport { UnstructuredStorage } from '../UnstructuredStorage.sol';\\nimport { OpcodeHelpers } from './OpcodeHelpers.sol';\\nimport { StackValue } from '../../helpers/Stack.sol';\\n\\n// import 'hardhat/console.sol';\\n\\n/**\\n * @title Comparator operator opcodes\\n * @notice Opcodes for comparator operators such as >, <, =, !, etc.\\n */\\nlibrary ComparisonOpcodes {\\n    using UnstructuredStorage for bytes32;\\n    using StringUtils for string;\\n\\n    /**\\n     * @dev Compares two values in the stack. Put 1 to the stack if they are equal.\\n     */\\n    function opEq(IContext _ctx) public {\\n        StackValue last = _ctx.stack().pop();\\n        StackValue prev = _ctx.stack().pop();\\n\\n        require(last.getType() == prev.getType(), 'Opcodes: type mismatch');\\n        require(last.getType() == StackValue.StackType.UINT256, 'Opcodes: bad type');\\n\\n        bool result = last.getUint256() == prev.getUint256();\\n\\n        OpcodeHelpers.putToStack(_ctx, result ? 1 : 0);\\n    }\\n\\n    /**\\n     * @dev Compares two values in the stack. Put 1 to the stack if they are not equal.\\n     */\\n    function opNotEq(IContext _ctx) public {\\n        StackValue last = _ctx.stack().pop();\\n        StackValue prev = _ctx.stack().pop();\\n\\n        require(last.getType() == prev.getType(), 'Opcodes: type mismatch');\\n        require(last.getType() == StackValue.StackType.UINT256, 'Opcodes: bad type');\\n\\n        bool result = last.getUint256() != prev.getUint256();\\n\\n        OpcodeHelpers.putToStack(_ctx, result ? 1 : 0);\\n    }\\n\\n    /**\\n     * @dev Compares two values in the stack. Put 1 to the stack if value1 < value2\\n     */\\n    function opLt(IContext _ctx) public {\\n        StackValue last = _ctx.stack().pop();\\n        StackValue prev = _ctx.stack().pop();\\n\\n        require(last.getType() == prev.getType(), 'Opcodes: type mismatch');\\n        require(last.getType() == StackValue.StackType.UINT256, 'Opcodes: bad type');\\n\\n        bool result = prev.getUint256() < last.getUint256();\\n\\n        OpcodeHelpers.putToStack(_ctx, result ? 1 : 0);\\n    }\\n\\n    /**\\n     * @dev Compares two values in the stack. Put 1 to the stack if value1 > value2\\n     */\\n    function opGt(IContext _ctx) public {\\n        opSwap(_ctx);\\n        opLt(_ctx);\\n    }\\n\\n    /**\\n     * @dev Compares two values in the stack. Put 1 to the stack if value1 <= value2\\n     */\\n    function opLe(IContext _ctx) public {\\n        opGt(_ctx);\\n        opNot(_ctx);\\n    }\\n\\n    /**\\n     * @dev Compares two values in the stack. Put 1 to the stack if value1 >= value2\\n     */\\n    function opGe(IContext _ctx) public {\\n        opLt(_ctx);\\n        opNot(_ctx);\\n    }\\n\\n    /**\\n     * @dev Revert last value in the stack\\n     */\\n    function opNot(IContext _ctx) public {\\n        StackValue last = _ctx.stack().pop();\\n\\n        require(last.getType() == StackValue.StackType.UINT256, 'Opcodes: bad type');\\n\\n        bool result = last.getUint256() == 0;\\n\\n        OpcodeHelpers.putToStack(_ctx, result ? 1 : 0);\\n    }\\n\\n    /**\\n     * @dev Swaps two last element in the stack\\n     */\\n    function opSwap(IContext _ctx) public {\\n        StackValue last = _ctx.stack().pop();\\n        StackValue prev = _ctx.stack().pop();\\n        _ctx.stack().push(last);\\n        _ctx.stack().push(prev);\\n    }\\n}\\n\"},\"contracts/dsl/libs/opcodes/BranchingOpcodes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport { IContext } from '../../interfaces/IContext.sol';\\nimport { IStorage } from '../../interfaces/IStorage.sol';\\nimport { IERC20 } from '../../interfaces/IERC20.sol';\\nimport { StringUtils } from '../StringUtils.sol';\\nimport { UnstructuredStorage } from '../UnstructuredStorage.sol';\\nimport { OpcodeHelpers } from './OpcodeHelpers.sol';\\nimport { StackValue } from '../../helpers/Stack.sol';\\n\\n// import 'hardhat/console.sol';\\n\\n/**\\n * @title Logical operator opcodes\\n * @notice Opcodes for logical operators such as if/esle, switch/case\\n */\\nlibrary BranchingOpcodes {\\n    using UnstructuredStorage for bytes32;\\n    using StringUtils for string;\\n\\n    function opIfelse(IContext _ctx) public {\\n        if (_ctx.stack().length() == 0) {\\n            OpcodeHelpers.putToStack(_ctx, 0); // for if-else condition to work all the time\\n        }\\n\\n        StackValue last = _getLast(_ctx);\\n        require(last.getType() == StackValue.StackType.UINT256, 'Opcodes: bad type in the stack');\\n\\n        uint16 _posTrueBranch = getUint16(_ctx);\\n        uint16 _posFalseBranch = getUint16(_ctx);\\n\\n        _ctx.setNextPc(_ctx.pc());\\n        _ctx.setPc(last.getUint256() > 0 ? _posTrueBranch : _posFalseBranch);\\n    }\\n\\n    function opIf(IContext _ctx) public {\\n        if (_ctx.stack().length() == 0) {\\n            OpcodeHelpers.putToStack(_ctx, 0); // for if condition to work all the time\\n        }\\n\\n        StackValue last = _getLast(_ctx);\\n        require(last.getType() == StackValue.StackType.UINT256, 'Opcodes: bad type in the stack');\\n\\n        uint16 _posTrueBranch = getUint16(_ctx);\\n\\n        if (last.getUint256() != 0) {\\n            _ctx.setNextPc(_ctx.pc());\\n            _ctx.setPc(_posTrueBranch);\\n        } else {\\n            _ctx.setNextPc(_ctx.program().length);\\n        }\\n    }\\n\\n    function opFunc(IContext _ctx) public {\\n        if (_ctx.stack().length() == 0) {\\n            OpcodeHelpers.putToStack(_ctx, 0);\\n        }\\n\\n        StackValue last = _getLast(_ctx);\\n        require(last.getType() == StackValue.StackType.UINT256, 'Opcodes: bad type in the stack');\\n\\n        uint16 _reference = getUint16(_ctx);\\n\\n        _ctx.setNextPc(_ctx.pc());\\n        _ctx.setPc(_reference);\\n    }\\n\\n    function _getLast(IContext _ctx) public returns (StackValue) {\\n        return _ctx.stack().pop();\\n    }\\n\\n    function opEnd(IContext _ctx) public {\\n        _ctx.setPc(_ctx.nextpc());\\n        _ctx.setNextPc(_ctx.program().length);\\n    }\\n\\n    function getUint16(IContext _ctx) public returns (uint16) {\\n        bytes memory data = OpcodeHelpers.nextBytes(_ctx, 2);\\n\\n        // Convert bytes to bytes8\\n        bytes2 result;\\n        assembly {\\n            result := mload(add(data, 0x20))\\n        }\\n\\n        return uint16(result);\\n    }\\n}\\n\"},\"contracts/dsl/libs/opcodes/LogicalOpcodes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport { IContext } from '../../interfaces/IContext.sol';\\nimport { IStorage } from '../../interfaces/IStorage.sol';\\nimport { IERC20 } from '../../interfaces/IERC20.sol';\\nimport { StringUtils } from '../StringUtils.sol';\\nimport { UnstructuredStorage } from '../UnstructuredStorage.sol';\\nimport { OpcodeHelpers } from './OpcodeHelpers.sol';\\nimport { StackValue } from '../../helpers/Stack.sol';\\n\\n// import 'hardhat/console.sol';\\n\\n/**\\n * @title Set operator opcodes\\n * @notice Opcodes for set operators such as AND, OR, XOR\\n */\\nlibrary LogicalOpcodes {\\n    using UnstructuredStorage for bytes32;\\n    using StringUtils for string;\\n\\n    /**\\n     * @dev Compares two values in the stack. Put 1 if both of them are 1, put\\n     *      0 otherwise\\n     */\\n    function opAnd(IContext _ctx) public {\\n        StackValue last = _ctx.stack().pop();\\n        StackValue prev = _ctx.stack().pop();\\n\\n        require(last.getType() == prev.getType(), 'Opcodes: type mismatch');\\n        require(last.getType() == StackValue.StackType.UINT256, 'Opcodes: bad type');\\n\\n        bool result = (prev.getUint256() > 0) && (last.getUint256() > 0);\\n\\n        OpcodeHelpers.putToStack(_ctx, result ? 1 : 0);\\n    }\\n\\n    /**\\n     * @dev Compares two values in the stack. Put 1 if either one of them is 1,\\n     *      put 0 otherwise\\n     */\\n    function opOr(IContext _ctx) public {\\n        StackValue last = _ctx.stack().pop();\\n        StackValue prev = _ctx.stack().pop();\\n\\n        require(last.getType() == prev.getType(), 'Opcodes: type mismatch');\\n        require(last.getType() == StackValue.StackType.UINT256, 'Opcodes: bad type');\\n\\n        bool result = (prev.getUint256() > 0) || (last.getUint256() > 0);\\n\\n        OpcodeHelpers.putToStack(_ctx, result ? 1 : 0);\\n    }\\n\\n    function opXor(IContext _ctx) public {\\n        StackValue last = _ctx.stack().pop();\\n        StackValue prev = _ctx.stack().pop();\\n\\n        require(last.getType() == prev.getType(), 'Opcodes: type mismatch');\\n        require(last.getType() == StackValue.StackType.UINT256, 'Opcodes: bad type');\\n\\n        bool result = ((prev.getUint256() > 0) && (last.getUint256() == 0)) ||\\n            ((prev.getUint256() == 0) && (last.getUint256() > 0));\\n\\n        OpcodeHelpers.putToStack(_ctx, result ? 1 : 0);\\n    }\\n\\n    function opAdd(IContext _ctx) public {\\n        StackValue last = _ctx.stack().pop();\\n        StackValue prev = _ctx.stack().pop();\\n\\n        require(last.getType() == prev.getType(), 'Opcodes: type mismatch');\\n        require(last.getType() == StackValue.StackType.UINT256, 'Opcodes: bad type');\\n\\n        uint256 result = prev.getUint256() + last.getUint256();\\n\\n        OpcodeHelpers.putToStack(_ctx, result);\\n    }\\n\\n    function opSub(IContext _ctx) public {\\n        StackValue last = _ctx.stack().pop();\\n        StackValue prev = _ctx.stack().pop();\\n\\n        require(last.getType() == prev.getType(), 'Opcodes: type mismatch');\\n        require(last.getType() == StackValue.StackType.UINT256, 'Opcodes: bad type');\\n\\n        uint256 result = prev.getUint256() - last.getUint256();\\n\\n        OpcodeHelpers.putToStack(_ctx, result);\\n    }\\n\\n    function opMul(IContext _ctx) public {\\n        StackValue last = _ctx.stack().pop();\\n        StackValue prev = _ctx.stack().pop();\\n\\n        require(last.getType() == prev.getType(), 'Opcodes: type mismatch');\\n        require(last.getType() == StackValue.StackType.UINT256, 'Opcodes: bad type');\\n\\n        uint256 result = prev.getUint256() * last.getUint256();\\n\\n        OpcodeHelpers.putToStack(_ctx, result);\\n    }\\n\\n    // Note: integer division. Example: 5 / 2 = 2\\n    function opDiv(IContext _ctx) public {\\n        StackValue last = _ctx.stack().pop();\\n        StackValue prev = _ctx.stack().pop();\\n\\n        require(last.getType() == prev.getType(), 'Opcodes: type mismatch');\\n        require(last.getType() == StackValue.StackType.UINT256, 'Opcodes: bad type');\\n\\n        uint256 result = prev.getUint256() / last.getUint256();\\n\\n        OpcodeHelpers.putToStack(_ctx, result);\\n    }\\n}\\n\"},\"contracts/dsl/libs/opcodes/OtherOpcodes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport { IContext } from '../../interfaces/IContext.sol';\\nimport { IStorage } from '../../interfaces/IStorage.sol';\\nimport { IERC20 } from '../../interfaces/IERC20.sol';\\nimport { StringUtils } from '../StringUtils.sol';\\nimport { UnstructuredStorage } from '../UnstructuredStorage.sol';\\nimport { OpcodeHelpers } from './OpcodeHelpers.sol';\\nimport { StackValue } from '../../helpers/Stack.sol';\\n\\n// import 'hardhat/console.sol';\\n\\nlibrary OtherOpcodes {\\n    using UnstructuredStorage for bytes32;\\n    using StringUtils for string;\\n\\n    function opLoadLocalAny(IContext _ctx) public {\\n        address libAddr = _ctx.otherOpcodes();\\n        bytes4 selector = OpcodeHelpers.nextBranchSelector(_ctx, 'loadLocal');\\n        OpcodeHelpers.mustCall(libAddr, abi.encodeWithSelector(selector, _ctx));\\n    }\\n\\n    function opLoadRemoteAny(IContext _ctx) public {\\n        address libAddr = _ctx.otherOpcodes();\\n        bytes4 selector = OpcodeHelpers.nextBranchSelector(_ctx, 'loadRemote');\\n        OpcodeHelpers.mustCall(libAddr, abi.encodeWithSelector(selector, _ctx));\\n    }\\n\\n    function opBlockNumber(IContext _ctx) public {\\n        OpcodeHelpers.putToStack(_ctx, block.number);\\n    }\\n\\n    function opBlockTimestamp(IContext _ctx) public {\\n        // console.log('block.timestamp', block.timestamp);\\n        OpcodeHelpers.putToStack(_ctx, block.timestamp);\\n    }\\n\\n    function opBlockChainId(IContext _ctx) public {\\n        OpcodeHelpers.putToStack(_ctx, block.chainid);\\n    }\\n\\n    function opMsgSender(IContext _ctx) public {\\n        OpcodeHelpers.putToStack(_ctx, uint256(uint160(_ctx.msgSender())));\\n    }\\n\\n    function opMsgValue(IContext _ctx) public {\\n        OpcodeHelpers.putToStack(_ctx, uint256(uint160(_ctx.msgValue())));\\n    }\\n\\n    function opSetLocalBool(IContext _ctx) public {\\n        bytes32 _varNameB32 = OpcodeHelpers.getNextBytes(_ctx, 4);\\n\\n        bytes memory data = OpcodeHelpers.nextBytes(_ctx, 1);\\n        bool _boolVal = uint8(data[0]) == 1;\\n\\n        // Set local variable by it's hex\\n        (bool success, ) = _ctx.appAddress().call(\\n            abi.encodeWithSignature('setStorageBool(bytes32,bool)', _varNameB32, _boolVal)\\n        );\\n        require(success, 'Opcodes: opSetLocal call not success');\\n        OpcodeHelpers.putToStack(_ctx, 1);\\n    }\\n\\n    function opSetLocalUint256(IContext _ctx) public {\\n        bytes32 _varNameB32 = OpcodeHelpers.getNextBytes(_ctx, 4);\\n\\n        bytes memory data = OpcodeHelpers.nextBytes(_ctx, 32);\\n        uint256 _val = uint256(bytes32(data));\\n\\n        // Set local variable by it's hex\\n        (bool success, ) = _ctx.appAddress().call(\\n            abi.encodeWithSignature('setStorageUint256(bytes32,uint256)', _varNameB32, _val)\\n        );\\n        require(success, 'Opcodes: opSetLocal call not success');\\n        OpcodeHelpers.putToStack(_ctx, 1);\\n    }\\n\\n    function opSetUint256(IContext _ctx) public {\\n        bytes32 _varNameB32 = OpcodeHelpers.getNextBytes(_ctx, 4);\\n\\n        StackValue _last = _ctx.stack().pop();\\n        require(_last.getType() == StackValue.StackType.UINT256, 'Opcodes: bad type');\\n        uint256 _val = _last.getUint256();\\n\\n        // Set local variable by it's hex\\n        (bool success, ) = _ctx.appAddress().call(\\n            abi.encodeWithSignature('setStorageUint256(bytes32,uint256)', _varNameB32, _val)\\n        );\\n        require(success, 'Opcodes: opSetLocal call not success');\\n\\n        OpcodeHelpers.putToStack(_ctx, 1);\\n    }\\n\\n    function opLoadLocalUint256(IContext _ctx) public {\\n        opLoadLocal(_ctx, 'getStorageUint256(bytes32)');\\n    }\\n\\n    function opLoadLocalBytes32(IContext _ctx) public {\\n        opLoadLocal(_ctx, 'getStorageBytes32(bytes32)');\\n    }\\n\\n    function opLoadLocalBool(IContext _ctx) public {\\n        opLoadLocal(_ctx, 'getStorageBool(bytes32)');\\n    }\\n\\n    function opLoadLocalAddress(IContext _ctx) public {\\n        opLoadLocal(_ctx, 'getStorageAddress(bytes32)');\\n    }\\n\\n    function opLoadRemoteUint256(IContext _ctx) public {\\n        opLoadRemote(_ctx, 'getStorageUint256(bytes32)');\\n    }\\n\\n    function opLoadRemoteBytes32(IContext _ctx) public {\\n        opLoadRemote(_ctx, 'getStorageBytes32(bytes32)');\\n    }\\n\\n    function opLoadRemoteBool(IContext _ctx) public {\\n        opLoadRemote(_ctx, 'getStorageBool(bytes32)');\\n    }\\n\\n    function opLoadRemoteAddress(IContext _ctx) public {\\n        opLoadRemote(_ctx, 'getStorageAddress(bytes32)');\\n    }\\n\\n    function opBool(IContext _ctx) public {\\n        bytes memory data = OpcodeHelpers.nextBytes(_ctx, 1);\\n        OpcodeHelpers.putToStack(_ctx, uint256(uint8(data[0])));\\n    }\\n\\n    function opUint256(IContext _ctx) public {\\n        OpcodeHelpers.putToStack(_ctx, opUint256Get(_ctx));\\n    }\\n\\n    function opSendEth(IContext _ctx) public {\\n        address payable recipient = payable(\\n            address(uint160(uint256(opLoadLocalGet(_ctx, 'getStorageAddress(bytes32)'))))\\n        );\\n        uint256 amount = opUint256Get(_ctx);\\n        recipient.transfer(amount);\\n        OpcodeHelpers.putToStack(_ctx, 1);\\n    }\\n\\n    function opTransfer(IContext _ctx) public {\\n        // console.log('opTransfer');\\n        address payable token = payable(\\n            address(uint160(uint256(opLoadLocalGet(_ctx, 'getStorageAddress(bytes32)'))))\\n        );\\n        // console.log('token', token);\\n        address payable recipient = payable(\\n            address(uint160(uint256(opLoadLocalGet(_ctx, 'getStorageAddress(bytes32)'))))\\n        );\\n        // console.log('recipient', recipient);\\n        uint256 amount = opUint256Get(_ctx);\\n        IERC20(token).transfer(recipient, amount);\\n        OpcodeHelpers.putToStack(_ctx, 1);\\n    }\\n\\n    function opTransferVar(IContext _ctx) public {\\n        // console.log('opTransfer');\\n        address payable token = payable(\\n            address(uint160(uint256(opLoadLocalGet(_ctx, 'getStorageAddress(bytes32)'))))\\n        );\\n        // console.log('token', token);\\n        address payable recipient = payable(\\n            address(uint160(uint256(opLoadLocalGet(_ctx, 'getStorageAddress(bytes32)'))))\\n        );\\n        // console.log('recipient', recipient);\\n        uint256 amount = uint256(opLoadLocalGet(_ctx, 'getStorageUint256(bytes32)'));\\n        // console.log('balance contract before', IERC20(token).balanceOf(address(this)));\\n        // console.log('balance recipient before', IERC20(token).balanceOf(recipient));\\n        // console.log('amount', amount);\\n        IERC20(token).transfer(recipient, amount);\\n        // console.log('balance contract after', IERC20(token).balanceOf(address(this)));\\n        // console.log('balance recipient after', IERC20(token).balanceOf(recipient));\\n        OpcodeHelpers.putToStack(_ctx, 1);\\n    }\\n\\n    function opTransferFrom(IContext _ctx) public {\\n        // console.log('opTransferFrom');\\n        address payable token = payable(\\n            address(uint160(uint256(opLoadLocalGet(_ctx, 'getStorageAddress(bytes32)'))))\\n        );\\n        address payable from = payable(\\n            address(uint160(uint256(opLoadLocalGet(_ctx, 'getStorageAddress(bytes32)'))))\\n        );\\n        address payable to = payable(\\n            address(uint160(uint256(opLoadLocalGet(_ctx, 'getStorageAddress(bytes32)'))))\\n        );\\n        uint256 amount = opUint256Get(_ctx);\\n        // console.log('token', token);\\n        // console.log('from', from);\\n        // console.log('to', to);\\n        IERC20(token).transferFrom(from, to, amount);\\n        OpcodeHelpers.putToStack(_ctx, 1);\\n    }\\n\\n    function opBalanceOf(IContext _ctx) public {\\n        address payable token = payable(\\n            address(uint160(uint256(opLoadLocalGet(_ctx, 'getStorageAddress(bytes32)'))))\\n        );\\n        address payable user = payable(\\n            address(uint160(uint256(opLoadLocalGet(_ctx, 'getStorageAddress(bytes32)'))))\\n        );\\n        uint256 balance = IERC20(token).balanceOf(user);\\n        // console.log('balanceOf', balance);\\n        OpcodeHelpers.putToStack(_ctx, balance);\\n    }\\n\\n    function opTransferFromVar(IContext _ctx) public {\\n        address payable token = payable(\\n            address(uint160(uint256(opLoadLocalGet(_ctx, 'getStorageAddress(bytes32)'))))\\n        );\\n        address payable from = payable(\\n            address(uint160(uint256(opLoadLocalGet(_ctx, 'getStorageAddress(bytes32)'))))\\n        );\\n        address payable to = payable(\\n            address(uint160(uint256(opLoadLocalGet(_ctx, 'getStorageAddress(bytes32)'))))\\n        );\\n        uint256 amount = uint256(opLoadLocalGet(_ctx, 'getStorageUint256(bytes32)'));\\n        // console.log('token', token);\\n        // console.log('from', from);\\n        // console.log('to', to);\\n        // console.log('amount', amount);\\n        IERC20(token).transferFrom(from, to, amount);\\n        OpcodeHelpers.putToStack(_ctx, 1);\\n    }\\n\\n    function opUint256Get(IContext _ctx) public returns (uint256) {\\n        bytes memory data = OpcodeHelpers.nextBytes(_ctx, 32);\\n\\n        // Convert bytes to bytes32\\n        bytes32 result;\\n        assembly {\\n            result := mload(add(data, 0x20))\\n        }\\n\\n        return uint256(result);\\n    }\\n\\n    function opLoadLocalGet(IContext _ctx, string memory funcSignature)\\n        public\\n        returns (bytes32 result)\\n    {\\n        bytes32 varNameB32 = OpcodeHelpers.getNextBytes(_ctx, 4);\\n\\n        // Load local variable by it's hex\\n        (bool success, bytes memory data) = _ctx.appAddress().call(\\n            abi.encodeWithSignature(funcSignature, varNameB32)\\n        );\\n        require(success, 'Opcodes: opLoadLocal call not success');\\n\\n        // Convert bytes to bytes32\\n        assembly {\\n            result := mload(add(data, 0x20))\\n        }\\n    }\\n\\n    function opAddressGet(IContext _ctx) public returns (address) {\\n        bytes memory contractAddrBytes = OpcodeHelpers.nextBytes(_ctx, 20);\\n\\n        // Convert bytes to bytes32\\n        bytes32 contractAddrB32;\\n        assembly {\\n            contractAddrB32 := mload(add(contractAddrBytes, 0x20))\\n        }\\n        /**\\n         * Shift bytes to the left so that\\n         * 0xe7f1725e7734ce288f8367e1bb143e90bb3f0512000000000000000000000000\\n         * transforms into\\n         * 0x000000000000000000000000e7f1725e7734ce288f8367e1bb143e90bb3f0512\\n         * This is needed to later conversion from bytes32 to address\\n         */\\n        contractAddrB32 >>= 96;\\n\\n        return address(uint160(uint256(contractAddrB32)));\\n    }\\n\\n    function opLoadLocal(IContext _ctx, string memory funcSignature) public {\\n        bytes32 result = opLoadLocalGet(_ctx, funcSignature);\\n        // console.log('load local', uint256(result));\\n        OpcodeHelpers.putToStack(_ctx, uint256(result));\\n    }\\n\\n    function opLoadRemote(IContext _ctx, string memory funcSignature) public {\\n        bytes memory varName = OpcodeHelpers.nextBytes(_ctx, 4);\\n        bytes memory contractAddrBytes = OpcodeHelpers.nextBytes(_ctx, 20);\\n\\n        // Convert bytes to bytes32\\n        bytes32 varNameB32;\\n        bytes32 contractAddrB32;\\n        assembly {\\n            varNameB32 := mload(add(varName, 0x20))\\n            contractAddrB32 := mload(add(contractAddrBytes, 0x20))\\n        }\\n        /**\\n         * Shift bytes to the left so that\\n         * 0xe7f1725e7734ce288f8367e1bb143e90bb3f0512000000000000000000000000\\n         * transforms into\\n         * 0x000000000000000000000000e7f1725e7734ce288f8367e1bb143e90bb3f0512\\n         * This is needed to later conversion from bytes32 to address\\n         */\\n        contractAddrB32 >>= 96;\\n\\n        address contractAddr = address(uint160(uint256(contractAddrB32)));\\n\\n        // Load local value by it's hex\\n        (bool success, bytes memory data) = contractAddr.call(\\n            abi.encodeWithSignature(funcSignature, varNameB32)\\n        );\\n        require(success, 'Opcodes: opLoadRemote call not success');\\n\\n        // Convert bytes to bytes32\\n        bytes32 result;\\n        assembly {\\n            result := mload(add(data, 0x20))\\n        }\\n\\n        OpcodeHelpers.putToStack(_ctx, uint256(result));\\n    }\\n}\\n\"},\"contracts/dsl/Context.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport { IContext } from './interfaces/IContext.sol';\\nimport { IParser } from './interfaces/IParser.sol';\\nimport { Stack } from './helpers/Stack.sol';\\nimport { ComparisonOpcodes } from './libs/opcodes/ComparisonOpcodes.sol';\\nimport { BranchingOpcodes } from './libs/opcodes/BranchingOpcodes.sol';\\nimport { LogicalOpcodes } from './libs/opcodes/LogicalOpcodes.sol';\\nimport { OtherOpcodes } from './libs/opcodes/OtherOpcodes.sol';\\n\\n// import 'hardhat/console.sol';\\n\\n/**\\n * @dev Preprocessor of DSL code\\n *\\n * One of the core contracts of the project. It contains opcodes and aliases for commands.\\n * It provides additional information about program state and point counter (pc).\\n * Each of command that is provided by the Parser contract is processed in the Context contract.\\n *\\n * TODO:\\n * 1. may be wise to split Context into:\\n *      contract A (holds opCodeByName, selectorByOpcode, and asmSelectors)\\n *      contract B (holds particular state variables: stack, program, pc, appAddress, msgSender)\\n * 2. addOpcode => should be internal `_addOpcode` and have a separated protected function\\n *   (addOpcode) that has public or external modifier\\n */\\ncontract Context is IContext {\\n    // stack is used by Opcode libraries like `libs/opcodes/*`\\n    // to store and analyze values and removing after usage\\n    Stack public stack;\\n    bytes public program; // the bytecode of a program that is provided by Parser (will be removed)\\n    uint256 public pc; // point counter shows what the part of command are in proccess now\\n    uint256 public nextpc;\\n    address public appAddress;\\n    address public msgSender;\\n    address public comparisonOpcodes; // an address for ComparisonOpcodes library, can be changed\\n    address public branchingOpcodes; // an address for BranchingOpcodes library, can be changed\\n    address public logicalOpcodes; // an address for LogicalOpcodes library (AND, OR, XOR), can be changed\\n    address public otherOpcodes; // an address for OtherOpcodes library, can be changed\\n    uint256 public msgValue;\\n\\n    mapping(string => bytes1) public opCodeByName; // name => opcode (hex)\\n    mapping(bytes1 => bytes4) public selectorByOpcode; // opcode (hex) => selector (hex)\\n\\n    // emun OpcodeLibNames {...} from IContext\\n    // Depending on the hex value, it will take the proper\\n    // library from the OpcodeLibNames enum check the library for each opcode\\n    // where the opcode adds to the Context contract\\n    mapping(bytes1 => OpcodeLibNames) public opcodeLibNameByOpcode;\\n\\n    // if the command is complex and uses `asm functions` then it will store\\n    // the selector of the usage function from the Parser for that opcode.\\n    // Each opcode that was added to the context should contain the selector otherwise\\n    // it should be set by 0x0\\n    mapping(string => bytes4) public asmSelectors; // command => selector\\n    mapping(string => uint256) public opsPriors; // stores the priority for operators\\n    string[] public operators;\\n\\n    // baseOpName -> branchCode -> selector\\n    mapping(string => mapping(bytes1 => bytes4)) public branchSelectors;\\n\\n    // baseOpName -> branchName -> branchCode\\n    mapping(string => mapping(string => bytes1)) public branchCodes;\\n\\n    // alias -> base command\\n    mapping(string => string) public aliases;\\n\\n    modifier nonZeroAddress(address _addr) {\\n        require(_addr != address(0), 'Context: address is zero');\\n        _;\\n    }\\n\\n    constructor() {\\n        stack = new Stack();\\n    }\\n\\n    function initOpcodes() external {\\n        // Opcodes for operators\\n        _addOpcodeForOperator(\\n            '==',\\n            0x01,\\n            ComparisonOpcodes.opEq.selector,\\n            0x0,\\n            OpcodeLibNames.ComparisonOpcodes,\\n            1\\n        );\\n        _addOpcodeForOperator(\\n            '!=',\\n            0x14,\\n            ComparisonOpcodes.opNotEq.selector,\\n            0x0,\\n            OpcodeLibNames.ComparisonOpcodes,\\n            1\\n        );\\n        _addOpcodeForOperator(\\n            '<',\\n            0x03,\\n            ComparisonOpcodes.opLt.selector,\\n            0x0,\\n            OpcodeLibNames.ComparisonOpcodes,\\n            1\\n        );\\n        _addOpcodeForOperator(\\n            '>',\\n            0x04,\\n            ComparisonOpcodes.opGt.selector,\\n            0x0,\\n            OpcodeLibNames.ComparisonOpcodes,\\n            1\\n        );\\n        _addOpcodeForOperator(\\n            '<=',\\n            0x06,\\n            ComparisonOpcodes.opLe.selector,\\n            0x0,\\n            OpcodeLibNames.ComparisonOpcodes,\\n            1\\n        );\\n        _addOpcodeForOperator(\\n            '>=',\\n            0x07,\\n            ComparisonOpcodes.opGe.selector,\\n            0x0,\\n            OpcodeLibNames.ComparisonOpcodes,\\n            1\\n        );\\n        _addOpcodeForOperator(\\n            'swap',\\n            0x05,\\n            ComparisonOpcodes.opSwap.selector,\\n            0x0,\\n            OpcodeLibNames.ComparisonOpcodes,\\n            3\\n        );\\n        _addOpcodeForOperator(\\n            '!',\\n            0x02,\\n            ComparisonOpcodes.opNot.selector,\\n            0x0,\\n            OpcodeLibNames.ComparisonOpcodes,\\n            4\\n        );\\n\\n        _addOpcodeForOperator(\\n            'and',\\n            0x12,\\n            LogicalOpcodes.opAnd.selector,\\n            0x0,\\n            OpcodeLibNames.LogicalOpcodes,\\n            3\\n        );\\n        _addOpcodeForOperator(\\n            'xor',\\n            0x11,\\n            LogicalOpcodes.opXor.selector,\\n            0x0,\\n            OpcodeLibNames.LogicalOpcodes,\\n            2\\n        );\\n        _addOpcodeForOperator(\\n            'or',\\n            0x13,\\n            LogicalOpcodes.opOr.selector,\\n            0x0,\\n            OpcodeLibNames.LogicalOpcodes,\\n            2\\n        );\\n\\n        _addOpcodeForOperator(\\n            '+',\\n            0x26,\\n            LogicalOpcodes.opAdd.selector,\\n            0x0,\\n            OpcodeLibNames.LogicalOpcodes,\\n            2\\n        );\\n        _addOpcodeForOperator(\\n            '-',\\n            0x27,\\n            LogicalOpcodes.opSub.selector,\\n            0x0,\\n            OpcodeLibNames.LogicalOpcodes,\\n            2\\n        );\\n        _addOpcodeForOperator(\\n            '*',\\n            0x28,\\n            LogicalOpcodes.opMul.selector,\\n            0x0,\\n            OpcodeLibNames.LogicalOpcodes,\\n            3\\n        );\\n        _addOpcodeForOperator(\\n            '/',\\n            0x29,\\n            LogicalOpcodes.opDiv.selector,\\n            0x0,\\n            OpcodeLibNames.LogicalOpcodes,\\n            3\\n        );\\n\\n        // Branching\\n        addOpcode(\\n            'ifelse',\\n            0x23,\\n            BranchingOpcodes.opIfelse.selector,\\n            IParser.asmIfelse.selector,\\n            OpcodeLibNames.BranchingOpcodes\\n        );\\n        addOpcode(\\n            'if',\\n            0x25,\\n            BranchingOpcodes.opIf.selector,\\n            IParser.asmIf.selector,\\n            OpcodeLibNames.BranchingOpcodes\\n        );\\n        addOpcode(\\n            'end',\\n            0x24,\\n            BranchingOpcodes.opEnd.selector,\\n            0x0,\\n            OpcodeLibNames.BranchingOpcodes\\n        );\\n        // 'branch' tag gets replaced with 'end' tag. So this is just another name of the 'end' tag\\n        addOpcode(\\n            'branch',\\n            0x2f,\\n            BranchingOpcodes.opEnd.selector,\\n            0x0,\\n            OpcodeLibNames.BranchingOpcodes\\n        );\\n\\n        // Simple Opcodes\\n        addOpcode(\\n            'blockNumber',\\n            0x15,\\n            OtherOpcodes.opBlockNumber.selector,\\n            0x0,\\n            OpcodeLibNames.OtherOpcodes\\n        );\\n        addOpcode(\\n            'TIME',\\n            0x16,\\n            OtherOpcodes.opBlockTimestamp.selector,\\n            0x0,\\n            OpcodeLibNames.OtherOpcodes\\n        );\\n        addOpcode(\\n            'blockChainId',\\n            0x17,\\n            OtherOpcodes.opBlockChainId.selector,\\n            0x0,\\n            OpcodeLibNames.OtherOpcodes\\n        );\\n        addOpcode(\\n            'bool',\\n            0x18,\\n            OtherOpcodes.opBool.selector,\\n            IParser.asmBool.selector,\\n            OpcodeLibNames.OtherOpcodes\\n        );\\n        addOpcode(\\n            'uint256',\\n            0x1a,\\n            OtherOpcodes.opUint256.selector,\\n            IParser.asmUint256.selector,\\n            OpcodeLibNames.OtherOpcodes\\n        );\\n        addOpcode(\\n            'msgSender',\\n            0x1d,\\n            OtherOpcodes.opMsgSender.selector,\\n            0x0,\\n            OpcodeLibNames.OtherOpcodes\\n        );\\n        addOpcode(\\n            'sendEth',\\n            0x1e,\\n            OtherOpcodes.opSendEth.selector,\\n            IParser.asmSend.selector,\\n            OpcodeLibNames.OtherOpcodes\\n        );\\n        addOpcode(\\n            'transfer',\\n            0x1f,\\n            OtherOpcodes.opTransfer.selector,\\n            IParser.asmTransfer.selector,\\n            OpcodeLibNames.OtherOpcodes\\n        );\\n        addOpcode(\\n            'transferVar',\\n            0x2c,\\n            OtherOpcodes.opTransferVar.selector,\\n            IParser.asmTransferVar.selector,\\n            OpcodeLibNames.OtherOpcodes\\n        );\\n        addOpcode(\\n            'transferFrom',\\n            0x20,\\n            OtherOpcodes.opTransferFrom.selector,\\n            IParser.asmTransferFrom.selector,\\n            OpcodeLibNames.OtherOpcodes\\n        );\\n        addOpcode(\\n            'transferFromVar',\\n            0x2a,\\n            OtherOpcodes.opTransferFromVar.selector,\\n            IParser.asmTransferFromVar.selector,\\n            OpcodeLibNames.OtherOpcodes\\n        );\\n        addOpcode(\\n            'setLocalBool',\\n            0x21,\\n            OtherOpcodes.opSetLocalBool.selector,\\n            IParser.asmSetLocalBool.selector,\\n            OpcodeLibNames.OtherOpcodes\\n        );\\n        // TODO: as we can use setUint256 for setting variables, why do we need setLocalUint256?\\n        // TODO: remove `setLocalUint256` and check that it doesn't influence the system\\n        addOpcode(\\n            'setLocalUint256',\\n            0x2d,\\n            OtherOpcodes.opSetLocalUint256.selector,\\n            IParser.asmSetLocalUint256.selector,\\n            OpcodeLibNames.OtherOpcodes\\n        );\\n        addOpcode(\\n            'setUint256',\\n            0x2e,\\n            OtherOpcodes.opSetUint256.selector,\\n            IParser.asmSetUint256.selector,\\n            OpcodeLibNames.OtherOpcodes\\n        );\\n        addOpcode(\\n            'msgValue',\\n            0x22,\\n            OtherOpcodes.opMsgValue.selector,\\n            0x0,\\n            OpcodeLibNames.OtherOpcodes\\n        );\\n        addOpcode(\\n            'balanceOf',\\n            0x2b,\\n            OtherOpcodes.opBalanceOf.selector,\\n            IParser.asmBalanceOf.selector,\\n            OpcodeLibNames.OtherOpcodes\\n        );\\n        addOpcode(\\n            'func',\\n            0x30,\\n            BranchingOpcodes.opFunc.selector,\\n            IParser.asmFunc.selector,\\n            OpcodeLibNames.BranchingOpcodes\\n        );\\n\\n        // Complex Opcodes with sub Opcodes (branches)\\n\\n        /*\\n            Types usage examples of loadLocal and loadRemote commands:\\n                loadLocal uint256 NUMBER_STORED_VALUE\\n                loadRemote bool ADDRESS_STORED_VALUE 9A676e781A523b5d0C0e43731313A708CB607508\\n\\n            Where `*_STORED_VALUE` parameters can be set by using `setLocalBool`, `setLocalUint256`\\n            or `setUint256` opcodes\\n        */\\n        string memory name = 'loadLocal';\\n        addOpcode(\\n            name,\\n            0x1b,\\n            OtherOpcodes.opLoadLocalAny.selector,\\n            IParser.asmLoadLocal.selector,\\n            OpcodeLibNames.OtherOpcodes\\n        );\\n        _addOpcodeBranch(name, 'uint256', 0x01, OtherOpcodes.opLoadLocalUint256.selector);\\n        _addOpcodeBranch(name, 'bool', 0x02, OtherOpcodes.opLoadLocalBool.selector);\\n        _addOpcodeBranch(name, 'address', 0x03, OtherOpcodes.opLoadLocalAddress.selector);\\n        _addOpcodeBranch(name, 'bytes32', 0x04, OtherOpcodes.opLoadLocalBytes32.selector);\\n\\n        name = 'loadRemote';\\n        addOpcode(\\n            name,\\n            0x1c,\\n            OtherOpcodes.opLoadRemoteAny.selector,\\n            IParser.asmLoadRemote.selector,\\n            OpcodeLibNames.OtherOpcodes\\n        );\\n        _addOpcodeBranch(name, 'uint256', 0x01, OtherOpcodes.opLoadRemoteUint256.selector);\\n        _addOpcodeBranch(name, 'bool', 0x02, OtherOpcodes.opLoadRemoteBool.selector);\\n        _addOpcodeBranch(name, 'address', 0x03, OtherOpcodes.opLoadRemoteAddress.selector);\\n        _addOpcodeBranch(name, 'bytes32', 0x04, OtherOpcodes.opLoadRemoteBytes32.selector);\\n\\n        // Aliases\\n\\n        /*\\n            As the blockTimestamp is the current opcode the user can use TIME alias to\\n            simplify the DSL code string.\\n            Example of the base command:\\n                `blockTimestamp < loadLocal uint256 FUND_INVESTMENT_DATE`\\n            Example of the alias of the base command:\\n                `TIME < loadLocal uint256 FUND_INVESTMENT_DATE`\\n        */\\n        _addAlias('TIME', 'blockTimestamp');\\n    }\\n\\n    /**\\n     * @dev Returns the amount of stored operators\\n     */\\n    function operatorsLen() external view returns (uint256) {\\n        return operators.length;\\n    }\\n\\n    /**\\n     * @dev Sets the new address of the ComparisonOpcodes library\\n     * @param _comparisonOpcodes is the new address of the library\\n     */\\n    function setComparisonOpcodesAddr(address _comparisonOpcodes) public {\\n        comparisonOpcodes = _comparisonOpcodes;\\n    }\\n\\n    /**\\n     * @dev Sets the new address of the BranchingOpcodes library\\n     * @param _branchingOpcodes is the new address of the library\\n     */\\n    function setBranchingOpcodesAddr(address _branchingOpcodes) public {\\n        branchingOpcodes = _branchingOpcodes;\\n    }\\n\\n    /**\\n     * @dev Sets the new address of the LogicalOpcodes library\\n     * @param _logicalOpcodes is the new address of the library\\n     */\\n    function setLogicalOpcodesAddr(address _logicalOpcodes) public {\\n        logicalOpcodes = _logicalOpcodes;\\n    }\\n\\n    /**\\n     * @dev Sets the new address of the OtherOpcodes library\\n     * @param _otherOpcodes is the new address of the library\\n     */\\n    function setOtherOpcodesAddr(address _otherOpcodes) public {\\n        otherOpcodes = _otherOpcodes;\\n    }\\n\\n    /**\\n     * @dev Adds the opcode for the DSL command\\n     * @param _name is the name of the command\\n     * @param _opcode is the opcode of the command\\n     * @param _opSelector is the selector of the function for this opcode\\n       from onle of library in `contracts/libs/opcodes/*`\\n     * @param _asmSelector is the selector of the function from the Parser for that opcode\\n     * @param _libName is the name of library that is used fot the opcode\\n     */\\n    function addOpcode(\\n        string memory _name,\\n        bytes1 _opcode,\\n        bytes4 _opSelector,\\n        bytes4 _asmSelector,\\n        OpcodeLibNames _libName\\n    ) public {\\n        require(_opSelector != bytes4(0), 'Context: empty opcode selector');\\n        require(\\n            opCodeByName[_name] == bytes1(0) && selectorByOpcode[_opcode] == bytes4(0),\\n            'Context: duplicate opcode name or code'\\n        );\\n        opCodeByName[_name] = _opcode;\\n        selectorByOpcode[_opcode] = _opSelector;\\n        opcodeLibNameByOpcode[_opcode] = _libName;\\n        asmSelectors[_name] = _asmSelector;\\n    }\\n\\n    /**\\n     * @dev ATTENTION! Works only during development! Will be removed.\\n     * Sets the final version of the program.\\n     *\\n     * @param _data is the bytecode of the full program\\n     */\\n    function setProgram(bytes memory _data) public {\\n        program = _data;\\n        setPc(0);\\n    }\\n\\n    /**\\n     * @dev Returns the slice of the current program using the index and the step values\\n     *\\n     * @param _index is a last byte of the slice\\n     * @param _step is the step of the slice\\n     * @return the slice of stored bytecode in the `program` variable\\n     */\\n    function programAt(uint256 _index, uint256 _step) public view returns (bytes memory) {\\n        bytes memory data = program;\\n        return this.programSlice(data, _index, _step);\\n    }\\n\\n    /**\\n     * @dev Returns the slice of the program using a step value\\n     *\\n     * @param _payload is bytecode of program that will be sliced\\n     * @param _index is a last byte of the slice\\n     * @param _step is the step of the slice\\n     * @return the slice of provided _payload bytecode\\n     */\\n    function programSlice(\\n        bytes calldata _payload,\\n        uint256 _index,\\n        uint256 _step\\n    ) public pure returns (bytes memory) {\\n        require(_payload.length > _index, 'Context: slicing out of range');\\n        return _payload[_index:_index + _step];\\n    }\\n\\n    /**\\n     * @dev Sets the current point counter for the program\\n     *\\n     * @param _pc is the new value of the pc\\n     */\\n    function setPc(uint256 _pc) public {\\n        pc = _pc;\\n    }\\n\\n    /**\\n     * @dev Sets the next point counter for the program\\n     *\\n     * @param _nextpc is the new value of the nextpc\\n     */\\n    function setNextPc(uint256 _nextpc) public {\\n        nextpc = _nextpc;\\n    }\\n\\n    /**\\n     * @dev Increases the current point counter with the provided value and saves the sum\\n     *\\n     * @param _val is the new value that is used for summing it and the current pc value\\n     */\\n    function incPc(uint256 _val) public {\\n        pc += _val;\\n    }\\n\\n    /**\\n     * @dev Sets/Updates application Address by the provided value\\n     *\\n     * @param _addr is the new application Address, can not be a zero address\\n     */\\n    function setAppAddress(address _addr) public nonZeroAddress(_addr) {\\n        appAddress = _addr;\\n    }\\n\\n    /**\\n     * @dev Sets/Updates msgSender by the provided value\\n     *\\n     * @param _msgSender is the new msgSender\\n     */\\n    function setMsgSender(address _msgSender) public nonZeroAddress(_msgSender) {\\n        msgSender = _msgSender;\\n    }\\n\\n    /**\\n     * @dev Sets/Updates msgValue by the provided value\\n     *\\n     * @param _msgValue is the new msgValue\\n     */\\n    function setMsgValue(uint256 _msgValue) public {\\n        msgValue = _msgValue;\\n    }\\n\\n    /**\\n     * @dev Adds the opcode for the operator\\n     * @param _name is the name of the operator\\n     * @param _opcode is the opcode of the operator\\n     * @param _opSelector is the selector of the function for this operator\\n       from onle of library in `contracts/libs/opcodes/*`\\n     * @param _asmSelector is the selector of the function from the Parser for this operator\\n     * @param _libName is the name of library that is used fot the operator\\n     * @param _priority is the priority for the opcode\\n     */\\n    function _addOpcodeForOperator(\\n        string memory _name,\\n        bytes1 _opcode,\\n        bytes4 _opSelector,\\n        bytes4 _asmSelector,\\n        OpcodeLibNames _libName,\\n        uint256 _priority\\n    ) internal {\\n        addOpcode(_name, _opcode, _opSelector, _asmSelector, _libName);\\n        _addOperator(_name, _priority);\\n    }\\n\\n    /**\\n     * @dev As branched (complex) DSL commands have their own name, types and values the\\n     * _addOpcodeBranch provides adding opcodes using additional internal branch opcodes.\\n     * @param _baseOpName is the name of the command\\n     * @param _branchName is the type for the value\\n     * @param _branchCode is the code for the certain name and its type\\n     * @param _selector is the selector of the function from the Parser for this command\\n     */\\n    function _addOpcodeBranch(\\n        string memory _baseOpName,\\n        string memory _branchName,\\n        bytes1 _branchCode,\\n        bytes4 _selector\\n    ) internal {\\n        require(_selector != bytes4(0), 'Context: empty opcode selector');\\n        require(\\n            branchSelectors[_baseOpName][_branchCode] == bytes4(0) &&\\n                branchCodes[_baseOpName][_branchName] == bytes1(0),\\n            'Context: duplicate opcode branch'\\n        );\\n        branchSelectors[_baseOpName][_branchCode] = _selector;\\n        branchCodes[_baseOpName][_branchName] = _branchCode;\\n    }\\n\\n    /**\\n     * @dev Adds the operator by its priority\\n     * Note: bigger number => bigger priority\\n     *\\n     * @param _op is the name of the operator\\n     * @param _priority is the priority of the operator\\n     */\\n    function _addOperator(string memory _op, uint256 _priority) internal {\\n        opsPriors[_op] = _priority;\\n        operators.push(_op);\\n    }\\n\\n    /**\\n     * @dev Adds an alias to the already existing DSL command\\n     *\\n     * @param _baseCmd is the name of the command\\n     * @param _alias is the alias command name for the base command\\n     */\\n    function _addAlias(string memory _baseCmd, string memory _alias) internal {\\n        aliases[_alias] = _baseCmd;\\n    }\\n}\\n\"}}}","address":"0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0","bytecode":"0x608060405234801561001057600080fd5b5061404c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806388bc267f146100465780638f26709714610064578063a715a15414610082575b600080fd5b61004e6100b2565b60405161005b919061021a565b60405180910390f35b61006c610181565b604051610079919061024e565b60405180910390f35b61009c6004803603810190610097919061029a565b61018d565b6040516100a9919061021a565b60405180910390f35b6000806040516100c1906101cc565b604051809103906000f0801580156100dd573d6000803e3d6000fd5b5090508091506000829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f7407cac6a69682f4e98288f0fcc3db4b5472565d66fbed36b8fd46360790527b82604051610175919061021a565b60405180910390a15090565b60008080549050905090565b6000818154811061019d57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b613d4f806102c883390190565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610204826101d9565b9050919050565b610214816101f9565b82525050565b600060208201905061022f600083018461020b565b92915050565b6000819050919050565b61024881610235565b82525050565b6000602082019050610263600083018461023f565b92915050565b600080fd5b61027781610235565b811461028257600080fd5b50565b6000813590506102948161026e565b92915050565b6000602082840312156102b0576102af610269565b5b60006102be84828501610285565b9150509291505056fe60806040523480156200001157600080fd5b50604051620000209062000083565b604051809103906000f0801580156200003d573d6000803e3d6000fd5b506000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000091565b61066d80620036e283390190565b61364180620000a16000396000f3fe608060405234801561001057600080fd5b50600436106101dc5760003560e01c8063ae93625111610105578063d7b69e3b1161009d578063d7b69e3b14610587578063ddf363d7146105a3578063dea75ba2146105c1578063df568cda146105df578063e28d4906146105fb578063e69919ae1461062b578063e72132d714610649578063f26c917814610667578063f3f8d4e314610683576101dc565b8063ae93625114610449578063b0757f8f14610479578063b7ce9b99146104a9578063bcf80c9d146104c5578063bddb783d146104e1578063c498148e146104ff578063c860ebc61461052f578063cdbeeec41461054d578063d737d0c714610569576101dc565b80635bf3e5d7116101785780635bf3e5d71461031f5780635f390d9b1461034f5780637823a2b81461036d57806393cbbbfc1461039d5780639f6f63a0146103b9578063a55b09ff146103d7578063a62c4a5e146103f3578063a62fb6861461040f578063adfd49cf1461042b576101dc565b8063138ef151146101e15780631c5cf2e5146101ff5780632941a5d61461020957806337df3a36146102395780633be6822d146102695780633cb9ceff1461028557806346972dbe146102b55780634afd51ea146102d3578063592e9831146102ef575b600080fd5b6101e96106b3565b6040516101f69190612802565b60405180910390f35b6102076106d7565b005b610223600480360381019061021e9190612867565b61162c565b6040516102309190612940565b60405180910390f35b610253600480360381019061024e91906129ba565b611749565b6040516102609190612a22565b60405180910390f35b610283600480360381019061027e9190612a7b565b611769565b005b61029f600480360381019061029a9190612bdd565b6117ad565b6040516102ac9190612a22565b60405180910390f35b6102bd6117e3565b6040516102ca9190612c35565b60405180910390f35b6102ed60048036038101906102e89190612c50565b611809565b005b610309600480360381019061030491906129ba565b611813565b6040516103169190612cf4565b60405180910390f35b61033960048036038101906103349190612d0f565b611833565b6040516103469190612d96565b60405180910390f35b61035761188e565b6040516103649190612dc0565b60405180910390f35b61038760048036038101906103829190612bdd565b61189b565b6040516103949190612e30565b60405180910390f35b6103b760048036038101906103b29190612ea3565b611951565b005b6103c1611ca6565b6040516103ce9190612c35565b60405180910390f35b6103f160048036038101906103ec9190612c50565b611ccc565b005b61040d60048036038101906104089190612a7b565b611ce8565b005b61042960048036038101906104249190612a7b565b611d2c565b005b610433611d70565b6040516104409190612c35565b60405180910390f35b610463600480360381019061045e9190612bdd565b611d96565b6040516104709190612dc0565b60405180910390f35b610493600480360381019061048e9190612f3a565b611dc4565b6040516104a09190612a22565b60405180910390f35b6104c360048036038101906104be9190612a7b565b611e09565b005b6104df60048036038101906104da9190613037565b611ebf565b005b6104e9611ee3565b6040516104f69190612c35565b60405180910390f35b610519600480360381019061051491906130e0565b611f09565b6040516105269190612940565b60405180910390f35b610537611fba565b6040516105449190612940565b60405180910390f35b61056760048036038101906105629190612c50565b612048565b005b610571612052565b60405161057e9190612c35565b60405180910390f35b6105a1600480360381019061059c9190612a7b565b612078565b005b6105ab61212e565b6040516105b89190612dc0565b60405180910390f35b6105c9612134565b6040516105d69190612dc0565b60405180910390f35b6105f960048036038101906105f49190612a7b565b61213a565b005b61061560048036038101906106109190612c50565b61217e565b6040516106229190612e30565b60405180910390f35b61063361222a565b6040516106409190612dc0565b60405180910390f35b610651612230565b60405161065e9190612c35565b60405180910390f35b610681600480360381019061067c9190612c50565b612256565b005b61069d60048036038101906106989190612bdd565b612260565b6040516106aa9190612d96565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61072b6040518060400160405280600281526020017f3d3d000000000000000000000000000000000000000000000000000000000000815250600160f81b63a862eb3a60e01b600060e01b60006001612296565b61077f6040518060400160405280600281526020017f213d000000000000000000000000000000000000000000000000000000000000815250601460f81b63932b644e60e01b600060e01b60006001612296565b6107d36040518060400160405280600181526020017f3c00000000000000000000000000000000000000000000000000000000000000815250600360f81b63eda2de8060e01b600060e01b60006001612296565b6108276040518060400160405280600181526020017f3e00000000000000000000000000000000000000000000000000000000000000815250600460f81b6385b98d0160e01b600060e01b60006001612296565b61087b6040518060400160405280600281526020017f3c3d000000000000000000000000000000000000000000000000000000000000815250600660f81b6308061bf560e01b600060e01b60006001612296565b6108cf6040518060400160405280600281526020017f3e3d000000000000000000000000000000000000000000000000000000000000815250600760f81b63aa6dbce960e01b600060e01b60006001612296565b6109236040518060400160405280600481526020017f7377617000000000000000000000000000000000000000000000000000000000815250600560f81b6308a5688060e01b600060e01b60006003612296565b6109776040518060400160405280600181526020017f2100000000000000000000000000000000000000000000000000000000000000815250600260f81b63a046e39f60e01b600060e01b60006004612296565b6109cb6040518060400160405280600381526020017f616e640000000000000000000000000000000000000000000000000000000000815250601260f81b632e71887560e01b600060e01b60026003612296565b610a1e6040518060400160405280600381526020017f786f720000000000000000000000000000000000000000000000000000000000815250601160f81b638fb84cf960e01b600060e01b600280612296565b610a716040518060400160405280600281526020017f6f72000000000000000000000000000000000000000000000000000000000000815250601360f81b637752678360e01b600060e01b600280612296565b610ac46040518060400160405280600181526020017f2b00000000000000000000000000000000000000000000000000000000000000815250602660f81b63ed278a9860e01b600060e01b600280612296565b610b176040518060400160405280600181526020017f2d00000000000000000000000000000000000000000000000000000000000000815250602760f81b63bfc0085260e01b600060e01b600280612296565b610b6b6040518060400160405280600181526020017f2a00000000000000000000000000000000000000000000000000000000000000815250602860f81b63acd2912660e01b600060e01b60026003612296565b610bbf6040518060400160405280600181526020017f2f00000000000000000000000000000000000000000000000000000000000000815250602960f81b633f65819760e01b600060e01b60026003612296565b610c146040518060400160405280600681526020017f6966656c73650000000000000000000000000000000000000000000000000000815250602360f81b636afad9df60e01b63be1d121160e01b6001611951565b610c696040518060400160405280600281526020017f6966000000000000000000000000000000000000000000000000000000000000815250602560f81b63313b73e260e01b63f71c692a60e01b6001611951565b610cbb6040518060400160405280600381526020017f656e640000000000000000000000000000000000000000000000000000000000815250602460f81b63b051420360e01b600060e01b6001611951565b610d0d6040518060400160405280600681526020017f6272616e63680000000000000000000000000000000000000000000000000000815250602f60f81b63b051420360e01b600060e01b6001611951565b610d5f6040518060400160405280600b81526020017f626c6f636b4e756d626572000000000000000000000000000000000000000000815250601560f81b6368b2501260e01b600060e01b6003611951565b610db16040518060400160405280600481526020017f54494d4500000000000000000000000000000000000000000000000000000000815250601660f81b639aee175160e01b600060e01b6003611951565b610e036040518060400160405280600c81526020017f626c6f636b436861696e49640000000000000000000000000000000000000000815250601760f81b63bacb0a9560e01b600060e01b6003611951565b610e586040518060400160405280600481526020017f626f6f6c00000000000000000000000000000000000000000000000000000000815250601860f81b63a7e49eea60e01b637d4bb2ec60e01b6003611951565b610ead6040518060400160405280600781526020017f75696e7432353600000000000000000000000000000000000000000000000000815250601a60f81b63efe4974660e01b630b91bffc60e01b6003611951565b610eff6040518060400160405280600981526020017f6d736753656e6465720000000000000000000000000000000000000000000000815250601d60f81b63e95c2f1860e01b600060e01b6003611951565b610f546040518060400160405280600781526020017f73656e6445746800000000000000000000000000000000000000000000000000815250601e60f81b63a35d468360e01b63ea80bd5560e01b6003611951565b610fa96040518060400160405280600881526020017f7472616e73666572000000000000000000000000000000000000000000000000815250601f60f81b6331e9971c60e01b63548e07c560e01b6003611951565b610ffe6040518060400160405280600b81526020017f7472616e73666572566172000000000000000000000000000000000000000000815250602c60f81b634b146abe60e01b633635664660e01b6003611951565b6110536040518060400160405280600c81526020017f7472616e7366657246726f6d0000000000000000000000000000000000000000815250602060f81b6350ffe43260e01b63dff9ffc460e01b6003611951565b6110a86040518060400160405280600f81526020017f7472616e7366657246726f6d5661720000000000000000000000000000000000815250602a60f81b63669f4f9360e01b63ffaeef8d60e01b6003611951565b6110fd6040518060400160405280600c81526020017f7365744c6f63616c426f6f6c0000000000000000000000000000000000000000815250602160f81b63b881903160e01b6346b0a4f060e01b6003611951565b6111526040518060400160405280600f81526020017f7365744c6f63616c55696e743235360000000000000000000000000000000000815250602d60f81b634c588eb960e01b63072fa70b60e01b6003611951565b6111a76040518060400160405280600a81526020017f73657455696e7432353600000000000000000000000000000000000000000000815250602e60f81b63a8b7def460e01b63e4bd0c0760e01b6003611951565b6111f96040518060400160405280600881526020017f6d736756616c7565000000000000000000000000000000000000000000000000815250602260f81b63189c68d160e01b600060e01b6003611951565b61124e6040518060400160405280600981526020017f62616c616e63654f660000000000000000000000000000000000000000000000815250602b60f81b632957e0ac60e01b6360fad1ed60e01b6003611951565b6112a36040518060400160405280600481526020017f66756e6300000000000000000000000000000000000000000000000000000000815250603060f81b63a31576c360e01b63cf7f7ff460e01b6001611951565b60006040518060400160405280600981526020017f6c6f61644c6f63616c000000000000000000000000000000000000000000000081525090506112fd81601b60f81b63dc04cef860e01b63357bf0fb60e01b6003611951565b611349816040518060400160405280600781526020017f75696e7432353600000000000000000000000000000000000000000000000000815250600160f81b63e742fc9d60e01b6122b5565b611395816040518060400160405280600481526020017f626f6f6c00000000000000000000000000000000000000000000000000000000815250600260f81b63ffc447c860e01b6122b5565b6113e1816040518060400160405280600781526020017f6164647265737300000000000000000000000000000000000000000000000000815250600360f81b63b949dc1c60e01b6122b5565b61142d816040518060400160405280600781526020017f6279746573333200000000000000000000000000000000000000000000000000815250600460f81b6367cff50960e01b6122b5565b6040518060400160405280600a81526020017f6c6f616452656d6f746500000000000000000000000000000000000000000000815250905061148581601c60f81b638522394160e01b634a6cc8a660e01b6003611951565b6114d1816040518060400160405280600781526020017f75696e7432353600000000000000000000000000000000000000000000000000815250600160f81b632c2ac22f60e01b6122b5565b61151d816040518060400160405280600481526020017f626f6f6c00000000000000000000000000000000000000000000000000000000815250600260f81b633bd13fe160e01b6122b5565b611569816040518060400160405280600781526020017f6164647265737300000000000000000000000000000000000000000000000000815250600360f81b638a65e53060e01b6122b5565b6115b5816040518060400160405280600781526020017f6279746573333200000000000000000000000000000000000000000000000000815250600460f81b6352b03ead60e01b6122b5565b6116296040518060400160405280600481526020017f54494d45000000000000000000000000000000000000000000000000000000008152506040518060400160405280600e81526020017f626c6f636b54696d657374616d700000000000000000000000000000000000008152506125c0565b50565b606060006001805461163d90613183565b80601f016020809104026020016040519081016040528092919081815260200182805461166990613183565b80156116b65780601f1061168b576101008083540402835291602001916116b6565b820191906000526020600020905b81548152906001019060200180831161169957829003601f168201915b505050505090503073ffffffffffffffffffffffffffffffffffffffff1663c498148e8286866040518463ffffffff1660e01b81526004016116fa939291906131b5565b600060405180830381865afa158015611717573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906117409190613263565b91505092915050565b600c6020528060005260406000206000915054906101000a900460e01b81565b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600e818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460e01b81565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8060038190555050565b600d6020528060005260406000206000915054906101000a900460ff1681565b601282805160208101820180518482526020830160208501208183528095505050505050818051602081018201805184825260208301602085012081835280955050505050506000915091509054906101000a900460f81b81565b6000601080549050905090565b60138180516020810182018051848252602083016020850120818352809550505050505060009150905080546118d090613183565b80601f01602080910402602001604051908101604052809291908181526020018280546118fc90613183565b80156119495780601f1061191e57610100808354040283529160200191611949565b820191906000526020600020905b81548152906001019060200180831161192c57829003601f168201915b505050505081565b600060e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156119d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119cd906132f8565b60405180910390fd5b600060f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916600b86604051611a0d9190613354565b908152602001604051809103902060009054906101000a900460f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148015611afd5750600060e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916600c6000867effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b611b3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b33906133dd565b60405180910390fd5b83600b86604051611b4d9190613354565b908152602001604051809103902060006101000a81548160ff021916908360f81c021790555082600c6000867effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548163ffffffff021916908360e01c021790555080600d6000867effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690836003811115611c6057611c5f612c7d565b5b021790555081600e86604051611c769190613354565b908152602001604051809103902060006101000a81548163ffffffff021916908360e01c02179055505050505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8060026000828254611cde919061342c565b9250508190555050565b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b80600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600f818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6011828051602081018201805184825260208301602085012081835280955050505050506020528060005260406000206000915091509054906101000a900460e01b81565b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611e7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e71906134ce565b60405180910390fd5b81600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b8060019080519060200190611ed592919061265a565b50611ee06000612256565b50565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060828585905011611f50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f479061353a565b60405180910390fd5b848484908486611f60919061342c565b92611f6d93929190613564565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050949350505050565b60018054611fc790613183565b80601f0160208091040260200160405190810160405280929190818152602001828054611ff390613183565b80156120405780601f1061201557610100808354040283529160200191612040565b820191906000526020600020905b81548152906001019060200180831161202357829003601f168201915b505050505081565b80600a8190555050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156120e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120e0906134ce565b60405180910390fd5b81600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600a5481565b60035481565b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6010818154811061218e57600080fd5b9060005260206000200160009150905080546121a990613183565b80601f01602080910402602001604051908101604052809291908181526020018280546121d590613183565b80156122225780601f106121f757610100808354040283529160200191612222565b820191906000526020600020905b81548152906001019060200180831161220557829003601f168201915b505050505081565b60025481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8060028190555050565b600b818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460f81b81565b6122a38686868686611951565b6122ad86826125f7565b505050505050565b600060e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141561233a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612331906132f8565b60405180910390fd5b600060e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660118560405161236e9190613354565b90815260200160405180910390206000847effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480156124995750600060f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660128560405161243d9190613354565b9081526020016040518091039020846040516124599190613354565b908152602001604051809103902060009054906101000a900460f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b6124d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124cf906135eb565b60405180910390fd5b806011856040516124e99190613354565b90815260200160405180910390206000847effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548163ffffffff021916908360e01c0217905550816012856040516125789190613354565b9081526020016040518091039020846040516125949190613354565b908152602001604051809103902060006101000a81548160ff021916908360f81c021790555050505050565b816013826040516125d19190613354565b908152602001604051809103902090805190602001906125f29291906126e0565b505050565b80600f836040516126089190613354565b9081526020016040518091039020819055506010829080600181540180825580915050600190039060005260206000200160009091909190915090805190602001906126559291906126e0565b505050565b82805461266690613183565b90600052602060002090601f01602090048101928261268857600085556126cf565b82601f106126a157805160ff19168380011785556126cf565b828001600101855582156126cf579182015b828111156126ce5782518255916020019190600101906126b3565b5b5090506126dc9190612766565b5090565b8280546126ec90613183565b90600052602060002090601f01602090048101928261270e5760008555612755565b82601f1061272757805160ff1916838001178555612755565b82800160010185558215612755579182015b82811115612754578251825591602001919060010190612739565b5b5090506127629190612766565b5090565b5b8082111561277f576000816000905550600101612767565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006127c86127c36127be84612783565b6127a3565b612783565b9050919050565b60006127da826127ad565b9050919050565b60006127ec826127cf565b9050919050565b6127fc816127e1565b82525050565b600060208201905061281760008301846127f3565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61284481612831565b811461284f57600080fd5b50565b6000813590506128618161283b565b92915050565b6000806040838503121561287e5761287d612827565b5b600061288c85828601612852565b925050602061289d85828601612852565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b838110156128e15780820151818401526020810190506128c6565b838111156128f0576000848401525b50505050565b6000601f19601f8301169050919050565b6000612912826128a7565b61291c81856128b2565b935061292c8185602086016128c3565b612935816128f6565b840191505092915050565b6000602082019050818103600083015261295a8184612907565b905092915050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b61299781612962565b81146129a257600080fd5b50565b6000813590506129b48161298e565b92915050565b6000602082840312156129d0576129cf612827565b5b60006129de848285016129a5565b91505092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612a1c816129e7565b82525050565b6000602082019050612a376000830184612a13565b92915050565b6000612a4882612783565b9050919050565b612a5881612a3d565b8114612a6357600080fd5b50565b600081359050612a7581612a4f565b92915050565b600060208284031215612a9157612a90612827565b5b6000612a9f84828501612a66565b91505092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612aea826128f6565b810181811067ffffffffffffffff82111715612b0957612b08612ab2565b5b80604052505050565b6000612b1c61281d565b9050612b288282612ae1565b919050565b600067ffffffffffffffff821115612b4857612b47612ab2565b5b612b51826128f6565b9050602081019050919050565b82818337600083830152505050565b6000612b80612b7b84612b2d565b612b12565b905082815260208101848484011115612b9c57612b9b612aad565b5b612ba7848285612b5e565b509392505050565b600082601f830112612bc457612bc3612aa8565b5b8135612bd4848260208601612b6d565b91505092915050565b600060208284031215612bf357612bf2612827565b5b600082013567ffffffffffffffff811115612c1157612c1061282c565b5b612c1d84828501612baf565b91505092915050565b612c2f81612a3d565b82525050565b6000602082019050612c4a6000830184612c26565b92915050565b600060208284031215612c6657612c65612827565b5b6000612c7484828501612852565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110612cbd57612cbc612c7d565b5b50565b6000819050612cce82612cac565b919050565b6000612cde82612cc0565b9050919050565b612cee81612cd3565b82525050565b6000602082019050612d096000830184612ce5565b92915050565b60008060408385031215612d2657612d25612827565b5b600083013567ffffffffffffffff811115612d4457612d4361282c565b5b612d5085828601612baf565b925050602083013567ffffffffffffffff811115612d7157612d7061282c565b5b612d7d85828601612baf565b9150509250929050565b612d9081612962565b82525050565b6000602082019050612dab6000830184612d87565b92915050565b612dba81612831565b82525050565b6000602082019050612dd56000830184612db1565b92915050565b600081519050919050565b600082825260208201905092915050565b6000612e0282612ddb565b612e0c8185612de6565b9350612e1c8185602086016128c3565b612e25816128f6565b840191505092915050565b60006020820190508181036000830152612e4a8184612df7565b905092915050565b612e5b816129e7565b8114612e6657600080fd5b50565b600081359050612e7881612e52565b92915050565b60048110612e8b57600080fd5b50565b600081359050612e9d81612e7e565b92915050565b600080600080600060a08688031215612ebf57612ebe612827565b5b600086013567ffffffffffffffff811115612edd57612edc61282c565b5b612ee988828901612baf565b9550506020612efa888289016129a5565b9450506040612f0b88828901612e69565b9350506060612f1c88828901612e69565b9250506080612f2d88828901612e8e565b9150509295509295909350565b60008060408385031215612f5157612f50612827565b5b600083013567ffffffffffffffff811115612f6f57612f6e61282c565b5b612f7b85828601612baf565b9250506020612f8c858286016129a5565b9150509250929050565b600067ffffffffffffffff821115612fb157612fb0612ab2565b5b612fba826128f6565b9050602081019050919050565b6000612fda612fd584612f96565b612b12565b905082815260208101848484011115612ff657612ff5612aad565b5b613001848285612b5e565b509392505050565b600082601f83011261301e5761301d612aa8565b5b813561302e848260208601612fc7565b91505092915050565b60006020828403121561304d5761304c612827565b5b600082013567ffffffffffffffff81111561306b5761306a61282c565b5b61307784828501613009565b91505092915050565b600080fd5b600080fd5b60008083601f8401126130a05761309f612aa8565b5b8235905067ffffffffffffffff8111156130bd576130bc613080565b5b6020830191508360018202830111156130d9576130d8613085565b5b9250929050565b600080600080606085870312156130fa576130f9612827565b5b600085013567ffffffffffffffff8111156131185761311761282c565b5b6131248782880161308a565b9450945050602061313787828801612852565b925050604061314887828801612852565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061319b57607f821691505b602082108114156131af576131ae613154565b5b50919050565b600060608201905081810360008301526131cf8186612907565b90506131de6020830185612db1565b6131eb6040830184612db1565b949350505050565b600061320661320184612f96565b612b12565b90508281526020810184848401111561322257613221612aad565b5b61322d8482856128c3565b509392505050565b600082601f83011261324a57613249612aa8565b5b815161325a8482602086016131f3565b91505092915050565b60006020828403121561327957613278612827565b5b600082015167ffffffffffffffff8111156132975761329661282c565b5b6132a384828501613235565b91505092915050565b7f436f6e746578743a20656d707479206f70636f64652073656c6563746f720000600082015250565b60006132e2601e83612de6565b91506132ed826132ac565b602082019050919050565b60006020820190508181036000830152613311816132d5565b9050919050565b600081905092915050565b600061332e82612ddb565b6133388185613318565b93506133488185602086016128c3565b80840191505092915050565b60006133608284613323565b915081905092915050565b7f436f6e746578743a206475706c6963617465206f70636f6465206e616d65206f60008201527f7220636f64650000000000000000000000000000000000000000000000000000602082015250565b60006133c7602683612de6565b91506133d28261336b565b604082019050919050565b600060208201905081810360008301526133f6816133ba565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061343782612831565b915061344283612831565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613477576134766133fd565b5b828201905092915050565b7f436f6e746578743a2061646472657373206973207a65726f0000000000000000600082015250565b60006134b8601883612de6565b91506134c382613482565b602082019050919050565b600060208201905081810360008301526134e7816134ab565b9050919050565b7f436f6e746578743a20736c6963696e67206f7574206f662072616e6765000000600082015250565b6000613524601d83612de6565b915061352f826134ee565b602082019050919050565b6000602082019050818103600083015261355381613517565b9050919050565b600080fd5b600080fd5b600080858511156135785761357761355a565b5b838611156135895761358861355f565b5b6001850283019150848603905094509492505050565b7f436f6e746578743a206475706c6963617465206f70636f6465206272616e6368600082015250565b60006135d5602083612de6565b91506135e08261359f565b602082019050919050565b60006020820190508181036000830152613604816135c8565b905091905056fea2646970667358221220da237d43bd1038001b999af44da5ab7454f9a1d3e4b665671e369bd3f5198cdf64736f6c634300080b0033608060405234801561001057600080fd5b5061064d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630c308a3b146100675780631f7b6d321461008557806352efea6e146100a357806389b09de7146100ad578063a4ece52c146100c9578063dc9031c4146100e7575b600080fd5b61006f610117565b60405161007c91906103af565b60405180910390f35b61008d610126565b60405161009a91906103e3565b60405180910390f35b6100ab610135565b005b6100c760048036038101906100c29190610453565b610144565b005b6100d16101aa565b6040516100de91906103af565b60405180910390f35b61010160048036038101906100fc91906104ac565b610205565b60405161010e91906103af565b60405180910390f35b6000610121610244565b905090565b60006101306102e6565b905090565b60008061014291906102f2565b565b6000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806101b5610244565b905060008054806101c9576101c86104d9565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590558091505090565b6000818154811061021557600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061024f6102e6565b1161028f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028690610565565b60405180910390fd5b6000600161029b6102e6565b6102a591906105b4565b815481106102b6576102b56105e8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008080549050905090565b50805460008255906000526020600020908101906103109190610313565b50565b5b8082111561032c576000816000905550600101610314565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061037561037061036b84610330565b610350565b610330565b9050919050565b60006103878261035a565b9050919050565b60006103998261037c565b9050919050565b6103a98161038e565b82525050565b60006020820190506103c460008301846103a0565b92915050565b6000819050919050565b6103dd816103ca565b82525050565b60006020820190506103f860008301846103d4565b92915050565b600080fd5b600061040e82610330565b9050919050565b600061042082610403565b9050919050565b61043081610415565b811461043b57600080fd5b50565b60008135905061044d81610427565b92915050565b600060208284031215610469576104686103fe565b5b60006104778482850161043e565b91505092915050565b610489816103ca565b811461049457600080fd5b50565b6000813590506104a681610480565b92915050565b6000602082840312156104c2576104c16103fe565b5b60006104d084828501610497565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600082825260208201905092915050565b7f537461636b3a20737461636b20697320656d7074790000000000000000000000600082015250565b600061054f601583610508565b915061055a82610519565b602082019050919050565b6000602082019050818103600083015261057e81610542565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006105bf826103ca565b91506105ca836103ca565b9250828210156105dd576105dc610585565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212207cc2c030bc18b528de3a672d32196147153abd813ece5cfb3cbb226e48e7261464736f6c634300080b0033a2646970667358221220614b3af766374677e9b3ce3611724674a449fcf6b0e5bd0bb6d4e7efc104121d64736f6c634300080b0033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106100415760003560e01c806388bc267f146100465780638f26709714610064578063a715a15414610082575b600080fd5b61004e6100b2565b60405161005b919061021a565b60405180910390f35b61006c610181565b604051610079919061024e565b60405180910390f35b61009c6004803603810190610097919061029a565b61018d565b6040516100a9919061021a565b60405180910390f35b6000806040516100c1906101cc565b604051809103906000f0801580156100dd573d6000803e3d6000fd5b5090508091506000829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f7407cac6a69682f4e98288f0fcc3db4b5472565d66fbed36b8fd46360790527b82604051610175919061021a565b60405180910390a15090565b60008080549050905090565b6000818154811061019d57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b613d4f806102c883390190565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610204826101d9565b9050919050565b610214816101f9565b82525050565b600060208201905061022f600083018461020b565b92915050565b6000819050919050565b61024881610235565b82525050565b6000602082019050610263600083018461023f565b92915050565b600080fd5b61027781610235565b811461028257600080fd5b50565b6000813590506102948161026e565b92915050565b6000602082840312156102b0576102af610269565b5b60006102be84828501610285565b9150509291505056fe60806040523480156200001157600080fd5b50604051620000209062000083565b604051809103906000f0801580156200003d573d6000803e3d6000fd5b506000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000091565b61066d80620036e283390190565b61364180620000a16000396000f3fe608060405234801561001057600080fd5b50600436106101dc5760003560e01c8063ae93625111610105578063d7b69e3b1161009d578063d7b69e3b14610587578063ddf363d7146105a3578063dea75ba2146105c1578063df568cda146105df578063e28d4906146105fb578063e69919ae1461062b578063e72132d714610649578063f26c917814610667578063f3f8d4e314610683576101dc565b8063ae93625114610449578063b0757f8f14610479578063b7ce9b99146104a9578063bcf80c9d146104c5578063bddb783d146104e1578063c498148e146104ff578063c860ebc61461052f578063cdbeeec41461054d578063d737d0c714610569576101dc565b80635bf3e5d7116101785780635bf3e5d71461031f5780635f390d9b1461034f5780637823a2b81461036d57806393cbbbfc1461039d5780639f6f63a0146103b9578063a55b09ff146103d7578063a62c4a5e146103f3578063a62fb6861461040f578063adfd49cf1461042b576101dc565b8063138ef151146101e15780631c5cf2e5146101ff5780632941a5d61461020957806337df3a36146102395780633be6822d146102695780633cb9ceff1461028557806346972dbe146102b55780634afd51ea146102d3578063592e9831146102ef575b600080fd5b6101e96106b3565b6040516101f69190612802565b60405180910390f35b6102076106d7565b005b610223600480360381019061021e9190612867565b61162c565b6040516102309190612940565b60405180910390f35b610253600480360381019061024e91906129ba565b611749565b6040516102609190612a22565b60405180910390f35b610283600480360381019061027e9190612a7b565b611769565b005b61029f600480360381019061029a9190612bdd565b6117ad565b6040516102ac9190612a22565b60405180910390f35b6102bd6117e3565b6040516102ca9190612c35565b60405180910390f35b6102ed60048036038101906102e89190612c50565b611809565b005b610309600480360381019061030491906129ba565b611813565b6040516103169190612cf4565b60405180910390f35b61033960048036038101906103349190612d0f565b611833565b6040516103469190612d96565b60405180910390f35b61035761188e565b6040516103649190612dc0565b60405180910390f35b61038760048036038101906103829190612bdd565b61189b565b6040516103949190612e30565b60405180910390f35b6103b760048036038101906103b29190612ea3565b611951565b005b6103c1611ca6565b6040516103ce9190612c35565b60405180910390f35b6103f160048036038101906103ec9190612c50565b611ccc565b005b61040d60048036038101906104089190612a7b565b611ce8565b005b61042960048036038101906104249190612a7b565b611d2c565b005b610433611d70565b6040516104409190612c35565b60405180910390f35b610463600480360381019061045e9190612bdd565b611d96565b6040516104709190612dc0565b60405180910390f35b610493600480360381019061048e9190612f3a565b611dc4565b6040516104a09190612a22565b60405180910390f35b6104c360048036038101906104be9190612a7b565b611e09565b005b6104df60048036038101906104da9190613037565b611ebf565b005b6104e9611ee3565b6040516104f69190612c35565b60405180910390f35b610519600480360381019061051491906130e0565b611f09565b6040516105269190612940565b60405180910390f35b610537611fba565b6040516105449190612940565b60405180910390f35b61056760048036038101906105629190612c50565b612048565b005b610571612052565b60405161057e9190612c35565b60405180910390f35b6105a1600480360381019061059c9190612a7b565b612078565b005b6105ab61212e565b6040516105b89190612dc0565b60405180910390f35b6105c9612134565b6040516105d69190612dc0565b60405180910390f35b6105f960048036038101906105f49190612a7b565b61213a565b005b61061560048036038101906106109190612c50565b61217e565b6040516106229190612e30565b60405180910390f35b61063361222a565b6040516106409190612dc0565b60405180910390f35b610651612230565b60405161065e9190612c35565b60405180910390f35b610681600480360381019061067c9190612c50565b612256565b005b61069d60048036038101906106989190612bdd565b612260565b6040516106aa9190612d96565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61072b6040518060400160405280600281526020017f3d3d000000000000000000000000000000000000000000000000000000000000815250600160f81b63a862eb3a60e01b600060e01b60006001612296565b61077f6040518060400160405280600281526020017f213d000000000000000000000000000000000000000000000000000000000000815250601460f81b63932b644e60e01b600060e01b60006001612296565b6107d36040518060400160405280600181526020017f3c00000000000000000000000000000000000000000000000000000000000000815250600360f81b63eda2de8060e01b600060e01b60006001612296565b6108276040518060400160405280600181526020017f3e00000000000000000000000000000000000000000000000000000000000000815250600460f81b6385b98d0160e01b600060e01b60006001612296565b61087b6040518060400160405280600281526020017f3c3d000000000000000000000000000000000000000000000000000000000000815250600660f81b6308061bf560e01b600060e01b60006001612296565b6108cf6040518060400160405280600281526020017f3e3d000000000000000000000000000000000000000000000000000000000000815250600760f81b63aa6dbce960e01b600060e01b60006001612296565b6109236040518060400160405280600481526020017f7377617000000000000000000000000000000000000000000000000000000000815250600560f81b6308a5688060e01b600060e01b60006003612296565b6109776040518060400160405280600181526020017f2100000000000000000000000000000000000000000000000000000000000000815250600260f81b63a046e39f60e01b600060e01b60006004612296565b6109cb6040518060400160405280600381526020017f616e640000000000000000000000000000000000000000000000000000000000815250601260f81b632e71887560e01b600060e01b60026003612296565b610a1e6040518060400160405280600381526020017f786f720000000000000000000000000000000000000000000000000000000000815250601160f81b638fb84cf960e01b600060e01b600280612296565b610a716040518060400160405280600281526020017f6f72000000000000000000000000000000000000000000000000000000000000815250601360f81b637752678360e01b600060e01b600280612296565b610ac46040518060400160405280600181526020017f2b00000000000000000000000000000000000000000000000000000000000000815250602660f81b63ed278a9860e01b600060e01b600280612296565b610b176040518060400160405280600181526020017f2d00000000000000000000000000000000000000000000000000000000000000815250602760f81b63bfc0085260e01b600060e01b600280612296565b610b6b6040518060400160405280600181526020017f2a00000000000000000000000000000000000000000000000000000000000000815250602860f81b63acd2912660e01b600060e01b60026003612296565b610bbf6040518060400160405280600181526020017f2f00000000000000000000000000000000000000000000000000000000000000815250602960f81b633f65819760e01b600060e01b60026003612296565b610c146040518060400160405280600681526020017f6966656c73650000000000000000000000000000000000000000000000000000815250602360f81b636afad9df60e01b63be1d121160e01b6001611951565b610c696040518060400160405280600281526020017f6966000000000000000000000000000000000000000000000000000000000000815250602560f81b63313b73e260e01b63f71c692a60e01b6001611951565b610cbb6040518060400160405280600381526020017f656e640000000000000000000000000000000000000000000000000000000000815250602460f81b63b051420360e01b600060e01b6001611951565b610d0d6040518060400160405280600681526020017f6272616e63680000000000000000000000000000000000000000000000000000815250602f60f81b63b051420360e01b600060e01b6001611951565b610d5f6040518060400160405280600b81526020017f626c6f636b4e756d626572000000000000000000000000000000000000000000815250601560f81b6368b2501260e01b600060e01b6003611951565b610db16040518060400160405280600481526020017f54494d4500000000000000000000000000000000000000000000000000000000815250601660f81b639aee175160e01b600060e01b6003611951565b610e036040518060400160405280600c81526020017f626c6f636b436861696e49640000000000000000000000000000000000000000815250601760f81b63bacb0a9560e01b600060e01b6003611951565b610e586040518060400160405280600481526020017f626f6f6c00000000000000000000000000000000000000000000000000000000815250601860f81b63a7e49eea60e01b637d4bb2ec60e01b6003611951565b610ead6040518060400160405280600781526020017f75696e7432353600000000000000000000000000000000000000000000000000815250601a60f81b63efe4974660e01b630b91bffc60e01b6003611951565b610eff6040518060400160405280600981526020017f6d736753656e6465720000000000000000000000000000000000000000000000815250601d60f81b63e95c2f1860e01b600060e01b6003611951565b610f546040518060400160405280600781526020017f73656e6445746800000000000000000000000000000000000000000000000000815250601e60f81b63a35d468360e01b63ea80bd5560e01b6003611951565b610fa96040518060400160405280600881526020017f7472616e73666572000000000000000000000000000000000000000000000000815250601f60f81b6331e9971c60e01b63548e07c560e01b6003611951565b610ffe6040518060400160405280600b81526020017f7472616e73666572566172000000000000000000000000000000000000000000815250602c60f81b634b146abe60e01b633635664660e01b6003611951565b6110536040518060400160405280600c81526020017f7472616e7366657246726f6d0000000000000000000000000000000000000000815250602060f81b6350ffe43260e01b63dff9ffc460e01b6003611951565b6110a86040518060400160405280600f81526020017f7472616e7366657246726f6d5661720000000000000000000000000000000000815250602a60f81b63669f4f9360e01b63ffaeef8d60e01b6003611951565b6110fd6040518060400160405280600c81526020017f7365744c6f63616c426f6f6c0000000000000000000000000000000000000000815250602160f81b63b881903160e01b6346b0a4f060e01b6003611951565b6111526040518060400160405280600f81526020017f7365744c6f63616c55696e743235360000000000000000000000000000000000815250602d60f81b634c588eb960e01b63072fa70b60e01b6003611951565b6111a76040518060400160405280600a81526020017f73657455696e7432353600000000000000000000000000000000000000000000815250602e60f81b63a8b7def460e01b63e4bd0c0760e01b6003611951565b6111f96040518060400160405280600881526020017f6d736756616c7565000000000000000000000000000000000000000000000000815250602260f81b63189c68d160e01b600060e01b6003611951565b61124e6040518060400160405280600981526020017f62616c616e63654f660000000000000000000000000000000000000000000000815250602b60f81b632957e0ac60e01b6360fad1ed60e01b6003611951565b6112a36040518060400160405280600481526020017f66756e6300000000000000000000000000000000000000000000000000000000815250603060f81b63a31576c360e01b63cf7f7ff460e01b6001611951565b60006040518060400160405280600981526020017f6c6f61644c6f63616c000000000000000000000000000000000000000000000081525090506112fd81601b60f81b63dc04cef860e01b63357bf0fb60e01b6003611951565b611349816040518060400160405280600781526020017f75696e7432353600000000000000000000000000000000000000000000000000815250600160f81b63e742fc9d60e01b6122b5565b611395816040518060400160405280600481526020017f626f6f6c00000000000000000000000000000000000000000000000000000000815250600260f81b63ffc447c860e01b6122b5565b6113e1816040518060400160405280600781526020017f6164647265737300000000000000000000000000000000000000000000000000815250600360f81b63b949dc1c60e01b6122b5565b61142d816040518060400160405280600781526020017f6279746573333200000000000000000000000000000000000000000000000000815250600460f81b6367cff50960e01b6122b5565b6040518060400160405280600a81526020017f6c6f616452656d6f746500000000000000000000000000000000000000000000815250905061148581601c60f81b638522394160e01b634a6cc8a660e01b6003611951565b6114d1816040518060400160405280600781526020017f75696e7432353600000000000000000000000000000000000000000000000000815250600160f81b632c2ac22f60e01b6122b5565b61151d816040518060400160405280600481526020017f626f6f6c00000000000000000000000000000000000000000000000000000000815250600260f81b633bd13fe160e01b6122b5565b611569816040518060400160405280600781526020017f6164647265737300000000000000000000000000000000000000000000000000815250600360f81b638a65e53060e01b6122b5565b6115b5816040518060400160405280600781526020017f6279746573333200000000000000000000000000000000000000000000000000815250600460f81b6352b03ead60e01b6122b5565b6116296040518060400160405280600481526020017f54494d45000000000000000000000000000000000000000000000000000000008152506040518060400160405280600e81526020017f626c6f636b54696d657374616d700000000000000000000000000000000000008152506125c0565b50565b606060006001805461163d90613183565b80601f016020809104026020016040519081016040528092919081815260200182805461166990613183565b80156116b65780601f1061168b576101008083540402835291602001916116b6565b820191906000526020600020905b81548152906001019060200180831161169957829003601f168201915b505050505090503073ffffffffffffffffffffffffffffffffffffffff1663c498148e8286866040518463ffffffff1660e01b81526004016116fa939291906131b5565b600060405180830381865afa158015611717573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906117409190613263565b91505092915050565b600c6020528060005260406000206000915054906101000a900460e01b81565b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600e818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460e01b81565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8060038190555050565b600d6020528060005260406000206000915054906101000a900460ff1681565b601282805160208101820180518482526020830160208501208183528095505050505050818051602081018201805184825260208301602085012081835280955050505050506000915091509054906101000a900460f81b81565b6000601080549050905090565b60138180516020810182018051848252602083016020850120818352809550505050505060009150905080546118d090613183565b80601f01602080910402602001604051908101604052809291908181526020018280546118fc90613183565b80156119495780601f1061191e57610100808354040283529160200191611949565b820191906000526020600020905b81548152906001019060200180831161192c57829003601f168201915b505050505081565b600060e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156119d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119cd906132f8565b60405180910390fd5b600060f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916600b86604051611a0d9190613354565b908152602001604051809103902060009054906101000a900460f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148015611afd5750600060e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916600c6000867effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b611b3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b33906133dd565b60405180910390fd5b83600b86604051611b4d9190613354565b908152602001604051809103902060006101000a81548160ff021916908360f81c021790555082600c6000867effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548163ffffffff021916908360e01c021790555080600d6000867effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690836003811115611c6057611c5f612c7d565b5b021790555081600e86604051611c769190613354565b908152602001604051809103902060006101000a81548163ffffffff021916908360e01c02179055505050505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8060026000828254611cde919061342c565b9250508190555050565b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b80600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600f818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6011828051602081018201805184825260208301602085012081835280955050505050506020528060005260406000206000915091509054906101000a900460e01b81565b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611e7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e71906134ce565b60405180910390fd5b81600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b8060019080519060200190611ed592919061265a565b50611ee06000612256565b50565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060828585905011611f50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f479061353a565b60405180910390fd5b848484908486611f60919061342c565b92611f6d93929190613564565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050949350505050565b60018054611fc790613183565b80601f0160208091040260200160405190810160405280929190818152602001828054611ff390613183565b80156120405780601f1061201557610100808354040283529160200191612040565b820191906000526020600020905b81548152906001019060200180831161202357829003601f168201915b505050505081565b80600a8190555050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156120e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120e0906134ce565b60405180910390fd5b81600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600a5481565b60035481565b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6010818154811061218e57600080fd5b9060005260206000200160009150905080546121a990613183565b80601f01602080910402602001604051908101604052809291908181526020018280546121d590613183565b80156122225780601f106121f757610100808354040283529160200191612222565b820191906000526020600020905b81548152906001019060200180831161220557829003601f168201915b505050505081565b60025481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8060028190555050565b600b818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460f81b81565b6122a38686868686611951565b6122ad86826125f7565b505050505050565b600060e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141561233a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612331906132f8565b60405180910390fd5b600060e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660118560405161236e9190613354565b90815260200160405180910390206000847effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480156124995750600060f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660128560405161243d9190613354565b9081526020016040518091039020846040516124599190613354565b908152602001604051809103902060009054906101000a900460f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b6124d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124cf906135eb565b60405180910390fd5b806011856040516124e99190613354565b90815260200160405180910390206000847effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548163ffffffff021916908360e01c0217905550816012856040516125789190613354565b9081526020016040518091039020846040516125949190613354565b908152602001604051809103902060006101000a81548160ff021916908360f81c021790555050505050565b816013826040516125d19190613354565b908152602001604051809103902090805190602001906125f29291906126e0565b505050565b80600f836040516126089190613354565b9081526020016040518091039020819055506010829080600181540180825580915050600190039060005260206000200160009091909190915090805190602001906126559291906126e0565b505050565b82805461266690613183565b90600052602060002090601f01602090048101928261268857600085556126cf565b82601f106126a157805160ff19168380011785556126cf565b828001600101855582156126cf579182015b828111156126ce5782518255916020019190600101906126b3565b5b5090506126dc9190612766565b5090565b8280546126ec90613183565b90600052602060002090601f01602090048101928261270e5760008555612755565b82601f1061272757805160ff1916838001178555612755565b82800160010185558215612755579182015b82811115612754578251825591602001919060010190612739565b5b5090506127629190612766565b5090565b5b8082111561277f576000816000905550600101612767565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006127c86127c36127be84612783565b6127a3565b612783565b9050919050565b60006127da826127ad565b9050919050565b60006127ec826127cf565b9050919050565b6127fc816127e1565b82525050565b600060208201905061281760008301846127f3565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61284481612831565b811461284f57600080fd5b50565b6000813590506128618161283b565b92915050565b6000806040838503121561287e5761287d612827565b5b600061288c85828601612852565b925050602061289d85828601612852565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b838110156128e15780820151818401526020810190506128c6565b838111156128f0576000848401525b50505050565b6000601f19601f8301169050919050565b6000612912826128a7565b61291c81856128b2565b935061292c8185602086016128c3565b612935816128f6565b840191505092915050565b6000602082019050818103600083015261295a8184612907565b905092915050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b61299781612962565b81146129a257600080fd5b50565b6000813590506129b48161298e565b92915050565b6000602082840312156129d0576129cf612827565b5b60006129de848285016129a5565b91505092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612a1c816129e7565b82525050565b6000602082019050612a376000830184612a13565b92915050565b6000612a4882612783565b9050919050565b612a5881612a3d565b8114612a6357600080fd5b50565b600081359050612a7581612a4f565b92915050565b600060208284031215612a9157612a90612827565b5b6000612a9f84828501612a66565b91505092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612aea826128f6565b810181811067ffffffffffffffff82111715612b0957612b08612ab2565b5b80604052505050565b6000612b1c61281d565b9050612b288282612ae1565b919050565b600067ffffffffffffffff821115612b4857612b47612ab2565b5b612b51826128f6565b9050602081019050919050565b82818337600083830152505050565b6000612b80612b7b84612b2d565b612b12565b905082815260208101848484011115612b9c57612b9b612aad565b5b612ba7848285612b5e565b509392505050565b600082601f830112612bc457612bc3612aa8565b5b8135612bd4848260208601612b6d565b91505092915050565b600060208284031215612bf357612bf2612827565b5b600082013567ffffffffffffffff811115612c1157612c1061282c565b5b612c1d84828501612baf565b91505092915050565b612c2f81612a3d565b82525050565b6000602082019050612c4a6000830184612c26565b92915050565b600060208284031215612c6657612c65612827565b5b6000612c7484828501612852565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110612cbd57612cbc612c7d565b5b50565b6000819050612cce82612cac565b919050565b6000612cde82612cc0565b9050919050565b612cee81612cd3565b82525050565b6000602082019050612d096000830184612ce5565b92915050565b60008060408385031215612d2657612d25612827565b5b600083013567ffffffffffffffff811115612d4457612d4361282c565b5b612d5085828601612baf565b925050602083013567ffffffffffffffff811115612d7157612d7061282c565b5b612d7d85828601612baf565b9150509250929050565b612d9081612962565b82525050565b6000602082019050612dab6000830184612d87565b92915050565b612dba81612831565b82525050565b6000602082019050612dd56000830184612db1565b92915050565b600081519050919050565b600082825260208201905092915050565b6000612e0282612ddb565b612e0c8185612de6565b9350612e1c8185602086016128c3565b612e25816128f6565b840191505092915050565b60006020820190508181036000830152612e4a8184612df7565b905092915050565b612e5b816129e7565b8114612e6657600080fd5b50565b600081359050612e7881612e52565b92915050565b60048110612e8b57600080fd5b50565b600081359050612e9d81612e7e565b92915050565b600080600080600060a08688031215612ebf57612ebe612827565b5b600086013567ffffffffffffffff811115612edd57612edc61282c565b5b612ee988828901612baf565b9550506020612efa888289016129a5565b9450506040612f0b88828901612e69565b9350506060612f1c88828901612e69565b9250506080612f2d88828901612e8e565b9150509295509295909350565b60008060408385031215612f5157612f50612827565b5b600083013567ffffffffffffffff811115612f6f57612f6e61282c565b5b612f7b85828601612baf565b9250506020612f8c858286016129a5565b9150509250929050565b600067ffffffffffffffff821115612fb157612fb0612ab2565b5b612fba826128f6565b9050602081019050919050565b6000612fda612fd584612f96565b612b12565b905082815260208101848484011115612ff657612ff5612aad565b5b613001848285612b5e565b509392505050565b600082601f83011261301e5761301d612aa8565b5b813561302e848260208601612fc7565b91505092915050565b60006020828403121561304d5761304c612827565b5b600082013567ffffffffffffffff81111561306b5761306a61282c565b5b61307784828501613009565b91505092915050565b600080fd5b600080fd5b60008083601f8401126130a05761309f612aa8565b5b8235905067ffffffffffffffff8111156130bd576130bc613080565b5b6020830191508360018202830111156130d9576130d8613085565b5b9250929050565b600080600080606085870312156130fa576130f9612827565b5b600085013567ffffffffffffffff8111156131185761311761282c565b5b6131248782880161308a565b9450945050602061313787828801612852565b925050604061314887828801612852565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061319b57607f821691505b602082108114156131af576131ae613154565b5b50919050565b600060608201905081810360008301526131cf8186612907565b90506131de6020830185612db1565b6131eb6040830184612db1565b949350505050565b600061320661320184612f96565b612b12565b90508281526020810184848401111561322257613221612aad565b5b61322d8482856128c3565b509392505050565b600082601f83011261324a57613249612aa8565b5b815161325a8482602086016131f3565b91505092915050565b60006020828403121561327957613278612827565b5b600082015167ffffffffffffffff8111156132975761329661282c565b5b6132a384828501613235565b91505092915050565b7f436f6e746578743a20656d707479206f70636f64652073656c6563746f720000600082015250565b60006132e2601e83612de6565b91506132ed826132ac565b602082019050919050565b60006020820190508181036000830152613311816132d5565b9050919050565b600081905092915050565b600061332e82612ddb565b6133388185613318565b93506133488185602086016128c3565b80840191505092915050565b60006133608284613323565b915081905092915050565b7f436f6e746578743a206475706c6963617465206f70636f6465206e616d65206f60008201527f7220636f64650000000000000000000000000000000000000000000000000000602082015250565b60006133c7602683612de6565b91506133d28261336b565b604082019050919050565b600060208201905081810360008301526133f6816133ba565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061343782612831565b915061344283612831565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613477576134766133fd565b5b828201905092915050565b7f436f6e746578743a2061646472657373206973207a65726f0000000000000000600082015250565b60006134b8601883612de6565b91506134c382613482565b602082019050919050565b600060208201905081810360008301526134e7816134ab565b9050919050565b7f436f6e746578743a20736c6963696e67206f7574206f662072616e6765000000600082015250565b6000613524601d83612de6565b915061352f826134ee565b602082019050919050565b6000602082019050818103600083015261355381613517565b9050919050565b600080fd5b600080fd5b600080858511156135785761357761355a565b5b838611156135895761358861355f565b5b6001850283019150848603905094509492505050565b7f436f6e746578743a206475706c6963617465206f70636f6465206272616e6368600082015250565b60006135d5602083612de6565b91506135e08261359f565b602082019050919050565b60006020820190508181036000830152613604816135c8565b905091905056fea2646970667358221220da237d43bd1038001b999af44da5ab7454f9a1d3e4b665671e369bd3f5198cdf64736f6c634300080b0033608060405234801561001057600080fd5b5061064d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630c308a3b146100675780631f7b6d321461008557806352efea6e146100a357806389b09de7146100ad578063a4ece52c146100c9578063dc9031c4146100e7575b600080fd5b61006f610117565b60405161007c91906103af565b60405180910390f35b61008d610126565b60405161009a91906103e3565b60405180910390f35b6100ab610135565b005b6100c760048036038101906100c29190610453565b610144565b005b6100d16101aa565b6040516100de91906103af565b60405180910390f35b61010160048036038101906100fc91906104ac565b610205565b60405161010e91906103af565b60405180910390f35b6000610121610244565b905090565b60006101306102e6565b905090565b60008061014291906102f2565b565b6000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806101b5610244565b905060008054806101c9576101c86104d9565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590558091505090565b6000818154811061021557600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061024f6102e6565b1161028f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028690610565565b60405180910390fd5b6000600161029b6102e6565b6102a591906105b4565b815481106102b6576102b56105e8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008080549050905090565b50805460008255906000526020600020908101906103109190610313565b50565b5b8082111561032c576000816000905550600101610314565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061037561037061036b84610330565b610350565b610330565b9050919050565b60006103878261035a565b9050919050565b60006103998261037c565b9050919050565b6103a98161038e565b82525050565b60006020820190506103c460008301846103a0565b92915050565b6000819050919050565b6103dd816103ca565b82525050565b60006020820190506103f860008301846103d4565b92915050565b600080fd5b600061040e82610330565b9050919050565b600061042082610403565b9050919050565b61043081610415565b811461043b57600080fd5b50565b60008135905061044d81610427565b92915050565b600060208284031215610469576104686103fe565b5b60006104778482850161043e565b91505092915050565b610489816103ca565b811461049457600080fd5b50565b6000813590506104a681610480565b92915050565b6000602082840312156104c2576104c16103fe565b5b60006104d084828501610497565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600082825260208201905092915050565b7f537461636b3a20737461636b20697320656d7074790000000000000000000000600082015250565b600061054f601583610508565b915061055a82610519565b602082019050919050565b6000602082019050818103600083015261057e81610542565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006105bf826103ca565b91506105ca836103ca565b9250828210156105dd576105dc610585565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212207cc2c030bc18b528de3a672d32196147153abd813ece5cfb3cbb226e48e7261464736f6c634300080b0033a2646970667358221220614b3af766374677e9b3ce3611724674a449fcf6b0e5bd0bb6d4e7efc104121d64736f6c634300080b0033","abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"context","type":"address"}],"name":"NewContext","type":"event"},{"inputs":[],"name":"deployContext","outputs":[{"internalType":"address","name":"_contextAddr","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"deployedContexts","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getDeployedContextsLen","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}]}